// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct AppStoreVersion: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case appStoreVersions
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var platform: Platform?
        public var versionString: String?
        public var appStoreState: AppStoreVersionState?
        public var appVersionState: AppVersionState?
        public var copyright: String?
        public var reviewType: ReviewType?
        public var releaseType: ReleaseType?
        public var earliestReleaseDate: Date?
        public var isDownloadable: Bool?
        public var createdDate: Date?

        public enum ReviewType: String, CaseIterable, Codable, Sendable {
            case appStore = "APP_STORE"
            case notarization = "NOTARIZATION"
        }

        public enum ReleaseType: String, CaseIterable, Codable, Sendable {
            case manual = "MANUAL"
            case afterApproval = "AFTER_APPROVAL"
            case scheduled = "SCHEDULED"
        }

        public init(platform: Platform? = nil, versionString: String? = nil, appStoreState: AppStoreVersionState? = nil, appVersionState: AppVersionState? = nil, copyright: String? = nil, reviewType: ReviewType? = nil, releaseType: ReleaseType? = nil, earliestReleaseDate: Date? = nil, isDownloadable: Bool? = nil, createdDate: Date? = nil) {
            self.platform = platform
            self.versionString = versionString
            self.appStoreState = appStoreState
            self.appVersionState = appVersionState
            self.copyright = copyright
            self.reviewType = reviewType
            self.releaseType = releaseType
            self.earliestReleaseDate = earliestReleaseDate
            self.isDownloadable = isDownloadable
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case platform
            case versionString
            case appStoreState
            case appVersionState
            case copyright
            case reviewType
            case releaseType
            case earliestReleaseDate
            case isDownloadable = "downloadable"
            case createdDate
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var app: App?
        public var ageRatingDeclaration: AgeRatingDeclaration?
        public var appStoreVersionLocalizations: AppStoreVersionLocalizations?
        public var build: Build?
        public var appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease?
        public var gameCenterAppVersion: GameCenterAppVersion?
        public var routingAppCoverage: RoutingAppCoverage?
        public var appStoreReviewDetail: AppStoreReviewDetail?
        public var appStoreVersionSubmission: AppStoreVersionSubmission?
        public var appClipDefaultExperience: AppClipDefaultExperience?
        public var appStoreVersionExperiments: AppStoreVersionExperiments?
        public var appStoreVersionExperimentsV2: AppStoreVersionExperimentsV2?
        public var customerReviews: CustomerReviews?
        public var alternativeDistributionPackage: AlternativeDistributionPackage?

        public struct App: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case apps
                }

                public init(type: `Type` = .apps, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct AgeRatingDeclaration: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case ageRatingDeclarations
                }

                public init(type: `Type` = .ageRatingDeclarations, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionLocalizations: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appStoreVersionLocalizations
                }

                public init(type: `Type` = .appStoreVersionLocalizations, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Build: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case builds
                }

                public init(type: `Type` = .builds, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionPhasedRelease: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appStoreVersionPhasedReleases
                }

                public init(type: `Type` = .appStoreVersionPhasedReleases, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct GameCenterAppVersion: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterAppVersions
                }

                public init(type: `Type` = .gameCenterAppVersions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct RoutingAppCoverage: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case routingAppCoverages
                }

                public init(type: `Type` = .routingAppCoverages, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreReviewDetail: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appStoreReviewDetails
                }

                public init(type: `Type` = .appStoreReviewDetails, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionSubmission: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appStoreVersionSubmissions
                }

                public init(type: `Type` = .appStoreVersionSubmissions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppClipDefaultExperience: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appClipDefaultExperiences
                }

                public init(type: `Type` = .appClipDefaultExperiences, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionExperiments: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appStoreVersionExperiments
                }

                public init(type: `Type` = .appStoreVersionExperiments, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppStoreVersionExperimentsV2: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appStoreVersionExperiments
                }

                public init(type: `Type` = .appStoreVersionExperiments, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct CustomerReviews: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct AlternativeDistributionPackage: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case alternativeDistributionPackages
                }

                public init(type: `Type` = .alternativeDistributionPackages, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil, ageRatingDeclaration: AgeRatingDeclaration? = nil, appStoreVersionLocalizations: AppStoreVersionLocalizations? = nil, build: Build? = nil, appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease? = nil, gameCenterAppVersion: GameCenterAppVersion? = nil, routingAppCoverage: RoutingAppCoverage? = nil, appStoreReviewDetail: AppStoreReviewDetail? = nil, appStoreVersionSubmission: AppStoreVersionSubmission? = nil, appClipDefaultExperience: AppClipDefaultExperience? = nil, appStoreVersionExperiments: AppStoreVersionExperiments? = nil, appStoreVersionExperimentsV2: AppStoreVersionExperimentsV2? = nil, customerReviews: CustomerReviews? = nil, alternativeDistributionPackage: AlternativeDistributionPackage? = nil) {
            self.app = app
            self.ageRatingDeclaration = ageRatingDeclaration
            self.appStoreVersionLocalizations = appStoreVersionLocalizations
            self.build = build
            self.appStoreVersionPhasedRelease = appStoreVersionPhasedRelease
            self.gameCenterAppVersion = gameCenterAppVersion
            self.routingAppCoverage = routingAppCoverage
            self.appStoreReviewDetail = appStoreReviewDetail
            self.appStoreVersionSubmission = appStoreVersionSubmission
            self.appClipDefaultExperience = appClipDefaultExperience
            self.appStoreVersionExperiments = appStoreVersionExperiments
            self.appStoreVersionExperimentsV2 = appStoreVersionExperimentsV2
            self.customerReviews = customerReviews
            self.alternativeDistributionPackage = alternativeDistributionPackage
        }
    }

    public init(type: `Type` = .appStoreVersions, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
