// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterActivity: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case gameCenterActivities
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var referenceName: String?
        public var vendorIdentifier: String?
        public var playStyle: PlayStyle?
        public var minimumPlayersCount: Int?
        public var maximumPlayersCount: Int?
        public var isSupportsPartyCode: Bool?
        public var isArchived: Bool?
        public var properties: [String: String]?

        public enum PlayStyle: String, CaseIterable, Codable, Sendable {
            case asynchronous = "ASYNCHRONOUS"
            case synchronous = "SYNCHRONOUS"
        }

        public init(referenceName: String? = nil, vendorIdentifier: String? = nil, playStyle: PlayStyle? = nil, minimumPlayersCount: Int? = nil, maximumPlayersCount: Int? = nil, isSupportsPartyCode: Bool? = nil, isArchived: Bool? = nil, properties: [String: String]? = nil) {
            self.referenceName = referenceName
            self.vendorIdentifier = vendorIdentifier
            self.playStyle = playStyle
            self.minimumPlayersCount = minimumPlayersCount
            self.maximumPlayersCount = maximumPlayersCount
            self.isSupportsPartyCode = isSupportsPartyCode
            self.isArchived = isArchived
            self.properties = properties
        }

        private enum CodingKeys: String, CodingKey {
            case referenceName
            case vendorIdentifier
            case playStyle
            case minimumPlayersCount
            case maximumPlayersCount
            case isSupportsPartyCode = "supportsPartyCode"
            case isArchived = "archived"
            case properties
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var gameCenterDetail: GameCenterDetail?
        public var gameCenterGroup: GameCenterGroup?
        public var achievements: Achievements?
        public var leaderboards: Leaderboards?
        public var versions: Versions?

        public struct GameCenterDetail: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterDetails
                }

                public init(type: `Type` = .gameCenterDetails, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct GameCenterGroup: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterGroups
                }

                public init(type: `Type` = .gameCenterGroups, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct Achievements: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterAchievements
                }

                public init(type: `Type` = .gameCenterAchievements, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Leaderboards: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterLeaderboards
                }

                public init(type: `Type` = .gameCenterLeaderboards, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Versions: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterActivityVersions
                }

                public init(type: `Type` = .gameCenterActivityVersions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(gameCenterDetail: GameCenterDetail? = nil, gameCenterGroup: GameCenterGroup? = nil, achievements: Achievements? = nil, leaderboards: Leaderboards? = nil, versions: Versions? = nil) {
            self.gameCenterDetail = gameCenterDetail
            self.gameCenterGroup = gameCenterGroup
            self.achievements = achievements
            self.leaderboards = leaderboards
            self.versions = versions
        }
    }

    public init(type: `Type` = .gameCenterActivities, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
