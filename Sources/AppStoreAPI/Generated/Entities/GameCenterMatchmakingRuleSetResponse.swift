// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterMatchmakingRuleSetResponse: Codable, Equatable, Sendable {
    /// GameCenterMatchmakingRuleSet
    public var data: GameCenterMatchmakingRuleSet
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable, Equatable, Sendable {
        case gameCenterMatchmakingTeam(GameCenterMatchmakingTeam)
        case gameCenterMatchmakingRule(GameCenterMatchmakingRule)
        case gameCenterMatchmakingQueue(GameCenterMatchmakingQueue)

        public init(from decoder: any Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(GameCenterMatchmakingTeam.self) {
                self = .gameCenterMatchmakingTeam(value)
            } else if let value = try? container.decode(GameCenterMatchmakingRule.self) {
                self = .gameCenterMatchmakingRule(value)
            } else if let value = try? container.decode(GameCenterMatchmakingQueue.self) {
                self = .gameCenterMatchmakingQueue(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (GameCenterMatchmakingTeam, GameCenterMatchmakingRule, GameCenterMatchmakingQueue)."
                )
            }
        }

        public func encode(to encoder: any Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .gameCenterMatchmakingTeam(let value): try container.encode(value)
            case .gameCenterMatchmakingRule(let value): try container.encode(value)
            case .gameCenterMatchmakingQueue(let value): try container.encode(value)
            }
        }
    }

    public init(data: GameCenterMatchmakingRuleSet, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}
