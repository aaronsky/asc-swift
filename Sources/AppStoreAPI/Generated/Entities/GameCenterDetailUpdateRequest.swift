// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterDetailUpdateRequest: Codable, Equatable, Sendable {
    public var data: Data

    public struct Data: Codable, Equatable, Identifiable, Sendable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, CaseIterable, Codable, Sendable {
            case gameCenterDetails
        }

        public struct Attributes: Codable, Equatable, Sendable {
            public var isChallengeEnabled: Bool?

            public init(isChallengeEnabled: Bool? = nil) {
                self.isChallengeEnabled = isChallengeEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case isChallengeEnabled = "challengeEnabled"
            }
        }

        public struct Relationships: Codable, Equatable, Sendable {
            public var gameCenterGroup: GameCenterGroup?
            public var defaultLeaderboard: DefaultLeaderboard?
            public var defaultGroupLeaderboard: DefaultGroupLeaderboard?

            public struct GameCenterGroup: Codable, Equatable, Sendable {
                public var data: Data?

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case gameCenterGroups
                    }

                    public init(type: `Type` = .gameCenterGroups, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct DefaultLeaderboard: Codable, Equatable, Sendable {
                public var data: Data?

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case gameCenterLeaderboards
                    }

                    public init(type: `Type` = .gameCenterLeaderboards, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct DefaultGroupLeaderboard: Codable, Equatable, Sendable {
                public var data: Data?

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case gameCenterLeaderboards
                    }

                    public init(type: `Type` = .gameCenterLeaderboards, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(gameCenterGroup: GameCenterGroup? = nil, defaultLeaderboard: DefaultLeaderboard? = nil, defaultGroupLeaderboard: DefaultGroupLeaderboard? = nil) {
                self.gameCenterGroup = gameCenterGroup
                self.defaultLeaderboard = defaultLeaderboard
                self.defaultGroupLeaderboard = defaultGroupLeaderboard
            }
        }

        public init(type: `Type` = .gameCenterDetails, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}
