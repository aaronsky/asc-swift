// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct WebhookDelivery: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case webhookDeliveries
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var createdDate: Date?
        public var deliveryState: DeliveryState?
        public var errorMessage: String?
        public var isRedelivery: Bool?
        public var sentDate: Date?
        public var request: Request?
        public var response: Response?

        public enum DeliveryState: String, CaseIterable, Codable, Sendable {
            case succeeded = "SUCCEEDED"
            case failed = "FAILED"
            case pending = "PENDING"
        }

        public struct Request: Codable, Equatable, Sendable {
            public var url: URL?

            public init(url: URL? = nil) {
                self.url = url
            }
        }

        public struct Response: Codable, Equatable, Sendable {
            public var httpstatusCode: Int?
            public var body: String?

            public init(httpstatusCode: Int? = nil, body: String? = nil) {
                self.httpstatusCode = httpstatusCode
                self.body = body
            }

            private enum CodingKeys: String, CodingKey {
                case httpstatusCode = "httpStatusCode"
                case body
            }
        }

        public init(createdDate: Date? = nil, deliveryState: DeliveryState? = nil, errorMessage: String? = nil, isRedelivery: Bool? = nil, sentDate: Date? = nil, request: Request? = nil, response: Response? = nil) {
            self.createdDate = createdDate
            self.deliveryState = deliveryState
            self.errorMessage = errorMessage
            self.isRedelivery = isRedelivery
            self.sentDate = sentDate
            self.request = request
            self.response = response
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate
            case deliveryState
            case errorMessage
            case isRedelivery = "redelivery"
            case sentDate
            case request
            case response
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var event: Event?

        public struct Event: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case webhookEvents
                }

                public init(type: `Type` = .webhookEvents, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public init(event: Event? = nil) {
            self.event = event
        }
    }

    public init(type: `Type` = .webhookDeliveries, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
