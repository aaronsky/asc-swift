// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct SubscriptionUpdateRequest: Codable, Equatable, Sendable {
    public var data: Data
    public var included: [IncludedItem]?

    public struct Data: Codable, Equatable, Identifiable, Sendable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, CaseIterable, Codable, Sendable {
            case subscriptions
        }

        public struct Attributes: Codable, Equatable, Sendable {
            public var name: String?
            public var isFamilySharable: Bool?
            public var subscriptionPeriod: SubscriptionPeriod?
            public var reviewNote: String?
            public var groupLevel: Int?

            public enum SubscriptionPeriod: String, CaseIterable, Codable, Sendable {
                case oneWeek = "ONE_WEEK"
                case oneMonth = "ONE_MONTH"
                case twoMonths = "TWO_MONTHS"
                case threeMonths = "THREE_MONTHS"
                case sixMonths = "SIX_MONTHS"
                case oneYear = "ONE_YEAR"
            }

            public init(name: String? = nil, isFamilySharable: Bool? = nil, subscriptionPeriod: SubscriptionPeriod? = nil, reviewNote: String? = nil, groupLevel: Int? = nil) {
                self.name = name
                self.isFamilySharable = isFamilySharable
                self.subscriptionPeriod = subscriptionPeriod
                self.reviewNote = reviewNote
                self.groupLevel = groupLevel
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case isFamilySharable = "familySharable"
                case subscriptionPeriod
                case reviewNote
                case groupLevel
            }
        }

        public struct Relationships: Codable, Equatable, Sendable {
            public var introductoryOffers: IntroductoryOffers?
            public var promotionalOffers: PromotionalOffers?
            public var prices: Prices?

            public struct IntroductoryOffers: Codable, Equatable, Sendable {
                public var data: [Datum]?

                public struct Datum: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case subscriptionIntroductoryOffers
                    }

                    public init(type: `Type` = .subscriptionIntroductoryOffers, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct PromotionalOffers: Codable, Equatable, Sendable {
                public var data: [Datum]?

                public struct Datum: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case subscriptionPromotionalOffers
                    }

                    public init(type: `Type` = .subscriptionPromotionalOffers, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct Prices: Codable, Equatable, Sendable {
                public var data: [Datum]?

                public struct Datum: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case subscriptionPrices
                    }

                    public init(type: `Type` = .subscriptionPrices, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(introductoryOffers: IntroductoryOffers? = nil, promotionalOffers: PromotionalOffers? = nil, prices: Prices? = nil) {
                self.introductoryOffers = introductoryOffers
                self.promotionalOffers = promotionalOffers
                self.prices = prices
            }
        }

        public init(type: `Type` = .subscriptions, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public enum IncludedItem: Codable, Equatable, Sendable {
        case subscriptionPromotionalOfferInlineCreate(SubscriptionPromotionalOfferInlineCreate)
        case subscriptionPriceInlineCreate(SubscriptionPriceInlineCreate)
        case subscriptionIntroductoryOfferInlineCreate(SubscriptionIntroductoryOfferInlineCreate)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(SubscriptionPromotionalOfferInlineCreate.self) {
                self = .subscriptionPromotionalOfferInlineCreate(value)
            } else if let value = try? container.decode(SubscriptionPriceInlineCreate.self) {
                self = .subscriptionPriceInlineCreate(value)
            } else if let value = try? container.decode(SubscriptionIntroductoryOfferInlineCreate.self) {
                self = .subscriptionIntroductoryOfferInlineCreate(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (SubscriptionPromotionalOfferInlineCreate, SubscriptionPriceInlineCreate, SubscriptionIntroductoryOfferInlineCreate)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .subscriptionPromotionalOfferInlineCreate(let value): try container.encode(value)
            case .subscriptionPriceInlineCreate(let value): try container.encode(value)
            case .subscriptionIntroductoryOfferInlineCreate(let value): try container.encode(value)
            }
        }
    }

    public init(data: Data, included: [IncludedItem]? = nil) {
        self.data = data
        self.included = included
    }
}
