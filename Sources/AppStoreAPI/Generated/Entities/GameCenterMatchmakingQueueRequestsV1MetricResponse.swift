// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterMatchmakingQueueRequestsV1MetricResponse: Codable, Equatable, Sendable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable, Equatable, Sendable {
        public var dataPoints: DataPoints?
        public var dimensions: Dimensions?
        public var granularity: Granularity?

        public struct DataPoints: Codable, Equatable, Sendable {
            public var start: Date?
            public var end: Date?
            public var values: Values?

            public struct Values: Codable, Equatable, Sendable {
                public var count: Int?
                public var averageSecondsInQueue: Double?
                public var p50SecondsInQueue: Double?
                public var p95SecondsInQueue: Double?

                public init(count: Int? = nil, averageSecondsInQueue: Double? = nil, p50SecondsInQueue: Double? = nil, p95SecondsInQueue: Double? = nil) {
                    self.count = count
                    self.averageSecondsInQueue = averageSecondsInQueue
                    self.p50SecondsInQueue = p50SecondsInQueue
                    self.p95SecondsInQueue = p95SecondsInQueue
                }
            }

            public init(start: Date? = nil, end: Date? = nil, values: Values? = nil) {
                self.start = start
                self.end = end
                self.values = values
            }
        }

        public struct Dimensions: Codable, Equatable, Sendable {
            public var result: Result?
            public var gameCenterDetail: GameCenterDetail?

            public struct Result: Codable, Equatable, Sendable {
                public var links: Links?

                public struct Links: Codable, Equatable, Sendable {
                    public var groupBy: URL?

                    public init(groupBy: URL? = nil) {
                        self.groupBy = groupBy
                    }
                }

                public init(links: Links? = nil) {
                    self.links = links
                }
            }

            public struct GameCenterDetail: Codable, Equatable, Sendable {
                public var links: Links?

                public struct Links: Codable, Equatable, Sendable {
                    public var groupBy: URL?
                    public var related: URL?

                    public init(groupBy: URL? = nil, related: URL? = nil) {
                        self.groupBy = groupBy
                        self.related = related
                    }
                }

                public init(links: Links? = nil) {
                    self.links = links
                }
            }

            public init(result: Result? = nil, gameCenterDetail: GameCenterDetail? = nil) {
                self.result = result
                self.gameCenterDetail = gameCenterDetail
            }
        }

        public enum Granularity: String, CaseIterable, Codable, Sendable {
            case p1d = "P1D"
            case pt1h = "PT1H"
            case pt15m = "PT15M"
        }

        public init(dataPoints: DataPoints? = nil, dimensions: Dimensions? = nil, granularity: Granularity? = nil) {
            self.dataPoints = dataPoints
            self.dimensions = dimensions
            self.granularity = granularity
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}
