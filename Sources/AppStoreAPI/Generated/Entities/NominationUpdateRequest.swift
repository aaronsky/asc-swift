// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct NominationUpdateRequest: Codable, Equatable, Sendable {
    public var data: Data

    public struct Data: Codable, Equatable, Identifiable, Sendable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, CaseIterable, Codable, Sendable {
            case nominations
        }

        public struct Attributes: Codable, Equatable, Sendable {
            public var name: String?
            public var type: `Type`?
            public var description: String?
            public var isSubmitted: Bool?
            public var isArchived: Bool?
            public var publishStartDate: Date?
            public var publishEndDate: Date?
            public var deviceFamilies: [DeviceFamily]?
            public var locales: [String]?
            public var supplementalMaterialsUris: [URL]?
            public var hasInAppEvents: Bool?
            public var isLaunchInSelectMarketsFirst: Bool?
            public var notes: String?
            public var isPreOrderEnabled: Bool?

            public enum `Type`: String, CaseIterable, Codable, Sendable {
                case appLaunch = "APP_LAUNCH"
                case appEnhancements = "APP_ENHANCEMENTS"
                case newContent = "NEW_CONTENT"
            }

            public init(name: String? = nil, type: `Type`? = nil, description: String? = nil, isSubmitted: Bool? = nil, isArchived: Bool? = nil, publishStartDate: Date? = nil, publishEndDate: Date? = nil, deviceFamilies: [DeviceFamily]? = nil, locales: [String]? = nil, supplementalMaterialsUris: [URL]? = nil, hasInAppEvents: Bool? = nil, isLaunchInSelectMarketsFirst: Bool? = nil, notes: String? = nil, isPreOrderEnabled: Bool? = nil) {
                self.name = name
                self.type = type
                self.description = description
                self.isSubmitted = isSubmitted
                self.isArchived = isArchived
                self.publishStartDate = publishStartDate
                self.publishEndDate = publishEndDate
                self.deviceFamilies = deviceFamilies
                self.locales = locales
                self.supplementalMaterialsUris = supplementalMaterialsUris
                self.hasInAppEvents = hasInAppEvents
                self.isLaunchInSelectMarketsFirst = isLaunchInSelectMarketsFirst
                self.notes = notes
                self.isPreOrderEnabled = isPreOrderEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case type
                case description
                case isSubmitted = "submitted"
                case isArchived = "archived"
                case publishStartDate
                case publishEndDate
                case deviceFamilies
                case locales
                case supplementalMaterialsUris
                case hasInAppEvents
                case isLaunchInSelectMarketsFirst = "launchInSelectMarketsFirst"
                case notes
                case isPreOrderEnabled = "preOrderEnabled"
            }
        }

        public struct Relationships: Codable, Equatable, Sendable {
            public var relatedApps: RelatedApps?
            public var inAppEvents: InAppEvents?
            public var supportedTerritories: SupportedTerritories?

            public struct RelatedApps: Codable, Equatable, Sendable {
                public var data: [Datum]?

                public struct Datum: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case apps
                    }

                    public init(type: `Type` = .apps, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct InAppEvents: Codable, Equatable, Sendable {
                public var data: [Datum]?

                public struct Datum: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case appEvents
                    }

                    public init(type: `Type` = .appEvents, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct SupportedTerritories: Codable, Equatable, Sendable {
                public var data: [Datum]?

                public struct Datum: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case territories
                    }

                    public init(type: `Type` = .territories, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(relatedApps: RelatedApps? = nil, inAppEvents: InAppEvents? = nil, supportedTerritories: SupportedTerritories? = nil) {
                self.relatedApps = relatedApps
                self.inAppEvents = inAppEvents
                self.supportedTerritories = supportedTerritories
            }
        }

        public init(type: `Type` = .nominations, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}
