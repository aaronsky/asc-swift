// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct App: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case apps
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var accessibilityURL: URL?
        public var name: String?
        public var bundleID: String?
        public var sku: String?
        public var primaryLocale: String?
        public var isOrEverWasMadeForKids: Bool?
        public var subscriptionStatusURL: URL?
        public var subscriptionStatusURLVersion: SubscriptionStatusURLVersion?
        public var subscriptionStatusURLForSandbox: URL?
        public var subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion?
        public var contentRightsDeclaration: ContentRightsDeclaration?
        public var isStreamlinedPurchasingEnabled: Bool?

        public enum ContentRightsDeclaration: String, CaseIterable, Codable, Sendable {
            case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
            case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
        }

        public init(accessibilityURL: URL? = nil, name: String? = nil, bundleID: String? = nil, sku: String? = nil, primaryLocale: String? = nil, isOrEverWasMadeForKids: Bool? = nil, subscriptionStatusURL: URL? = nil, subscriptionStatusURLVersion: SubscriptionStatusURLVersion? = nil, subscriptionStatusURLForSandbox: URL? = nil, subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion? = nil, contentRightsDeclaration: ContentRightsDeclaration? = nil, isStreamlinedPurchasingEnabled: Bool? = nil) {
            self.accessibilityURL = accessibilityURL
            self.name = name
            self.bundleID = bundleID
            self.sku = sku
            self.primaryLocale = primaryLocale
            self.isOrEverWasMadeForKids = isOrEverWasMadeForKids
            self.subscriptionStatusURL = subscriptionStatusURL
            self.subscriptionStatusURLVersion = subscriptionStatusURLVersion
            self.subscriptionStatusURLForSandbox = subscriptionStatusURLForSandbox
            self.subscriptionStatusURLVersionForSandbox = subscriptionStatusURLVersionForSandbox
            self.contentRightsDeclaration = contentRightsDeclaration
            self.isStreamlinedPurchasingEnabled = isStreamlinedPurchasingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case accessibilityURL = "accessibilityUrl"
            case name
            case bundleID = "bundleId"
            case sku
            case primaryLocale
            case isOrEverWasMadeForKids
            case subscriptionStatusURL = "subscriptionStatusUrl"
            case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
            case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
            case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
            case contentRightsDeclaration
            case isStreamlinedPurchasingEnabled = "streamlinedPurchasingEnabled"
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var accessibilityDeclarations: AccessibilityDeclarations?
        public var appEncryptionDeclarations: AppEncryptionDeclarations?
        public var ciProduct: CiProduct?
        public var betaTesters: BetaTesters?
        public var betaGroups: BetaGroups?
        public var appStoreVersions: AppStoreVersions?
        public var preReleaseVersions: PreReleaseVersions?
        public var betaAppLocalizations: BetaAppLocalizations?
        public var builds: Builds?
        public var betaLicenseAgreement: BetaLicenseAgreement?
        public var betaAppReviewDetail: BetaAppReviewDetail?
        public var appInfos: AppInfos?
        public var appClips: AppClips?
        public var appPricePoints: AppPricePoints?
        public var endUserLicenseAgreement: EndUserLicenseAgreement?
        public var appPriceSchedule: AppPriceSchedule?
        public var appAvailabilityV2: AppAvailabilityV2?
        public var inAppPurchases: InAppPurchases?
        public var subscriptionGroups: SubscriptionGroups?
        public var gameCenterEnabledVersions: GameCenterEnabledVersions?
        public var perfPowerMetrics: PerfPowerMetrics?
        public var appCustomProductPages: AppCustomProductPages?
        public var inAppPurchasesV2: InAppPurchasesV2?
        public var promotedPurchases: PromotedPurchases?
        public var appEvents: AppEvents?
        public var reviewSubmissions: ReviewSubmissions?
        public var subscriptionGracePeriod: SubscriptionGracePeriod?
        public var customerReviews: CustomerReviews?
        public var customerReviewSummarizations: CustomerReviewSummarizations?
        public var gameCenterDetail: GameCenterDetail?
        public var appStoreVersionExperimentsV2: AppStoreVersionExperimentsV2?
        public var alternativeDistributionKey: AlternativeDistributionKey?
        public var analyticsReportRequests: AnalyticsReportRequests?
        public var marketplaceSearchDetail: MarketplaceSearchDetail?
        public var backgroundAssets: BackgroundAssets?
        public var betaFeedbackScreenshotSubmissions: BetaFeedbackScreenshotSubmissions?
        public var betaFeedbackCrashSubmissions: BetaFeedbackCrashSubmissions?
        public var webhooks: Webhooks?

        public struct AccessibilityDeclarations: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct AppEncryptionDeclarations: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appEncryptionDeclarations
                }

                public init(type: `Type` = .appEncryptionDeclarations, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct CiProduct: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case ciProducts
                }

                public init(type: `Type` = .ciProducts, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BetaTesters: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct BetaGroups: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case betaGroups
                }

                public init(type: `Type` = .betaGroups, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppStoreVersions: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appStoreVersions
                }

                public init(type: `Type` = .appStoreVersions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct PreReleaseVersions: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case preReleaseVersions
                }

                public init(type: `Type` = .preReleaseVersions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaAppLocalizations: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case betaAppLocalizations
                }

                public init(type: `Type` = .betaAppLocalizations, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Builds: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case builds
                }

                public init(type: `Type` = .builds, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaLicenseAgreement: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case betaLicenseAgreements
                }

                public init(type: `Type` = .betaLicenseAgreements, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BetaAppReviewDetail: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case betaAppReviewDetails
                }

                public init(type: `Type` = .betaAppReviewDetails, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppInfos: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appInfos
                }

                public init(type: `Type` = .appInfos, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppClips: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appClips
                }

                public init(type: `Type` = .appClips, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppPricePoints: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct EndUserLicenseAgreement: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case endUserLicenseAgreements
                }

                public init(type: `Type` = .endUserLicenseAgreements, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppPriceSchedule: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct AppAvailabilityV2: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct InAppPurchases: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case inAppPurchases
                }

                public init(type: `Type` = .inAppPurchases, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct SubscriptionGroups: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case subscriptionGroups
                }

                public init(type: `Type` = .subscriptionGroups, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct GameCenterEnabledVersions: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterEnabledVersions
                }

                public init(type: `Type` = .gameCenterEnabledVersions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct PerfPowerMetrics: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct AppCustomProductPages: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appCustomProductPages
                }

                public init(type: `Type` = .appCustomProductPages, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct InAppPurchasesV2: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case inAppPurchases
                }

                public init(type: `Type` = .inAppPurchases, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct PromotedPurchases: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case promotedPurchases
                }

                public init(type: `Type` = .promotedPurchases, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppEvents: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appEvents
                }

                public init(type: `Type` = .appEvents, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct ReviewSubmissions: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case reviewSubmissions
                }

                public init(type: `Type` = .reviewSubmissions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct SubscriptionGracePeriod: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case subscriptionGracePeriods
                }

                public init(type: `Type` = .subscriptionGracePeriods, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct CustomerReviews: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct CustomerReviewSummarizations: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct GameCenterDetail: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterDetails
                }

                public init(type: `Type` = .gameCenterDetails, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionExperimentsV2: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appStoreVersionExperiments
                }

                public init(type: `Type` = .appStoreVersionExperiments, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AlternativeDistributionKey: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct AnalyticsReportRequests: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct MarketplaceSearchDetail: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct BackgroundAssets: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct BetaFeedbackScreenshotSubmissions: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct BetaFeedbackCrashSubmissions: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct Webhooks: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public init(accessibilityDeclarations: AccessibilityDeclarations? = nil, appEncryptionDeclarations: AppEncryptionDeclarations? = nil, ciProduct: CiProduct? = nil, betaTesters: BetaTesters? = nil, betaGroups: BetaGroups? = nil, appStoreVersions: AppStoreVersions? = nil, preReleaseVersions: PreReleaseVersions? = nil, betaAppLocalizations: BetaAppLocalizations? = nil, builds: Builds? = nil, betaLicenseAgreement: BetaLicenseAgreement? = nil, betaAppReviewDetail: BetaAppReviewDetail? = nil, appInfos: AppInfos? = nil, appClips: AppClips? = nil, appPricePoints: AppPricePoints? = nil, endUserLicenseAgreement: EndUserLicenseAgreement? = nil, appPriceSchedule: AppPriceSchedule? = nil, appAvailabilityV2: AppAvailabilityV2? = nil, inAppPurchases: InAppPurchases? = nil, subscriptionGroups: SubscriptionGroups? = nil, gameCenterEnabledVersions: GameCenterEnabledVersions? = nil, perfPowerMetrics: PerfPowerMetrics? = nil, appCustomProductPages: AppCustomProductPages? = nil, inAppPurchasesV2: InAppPurchasesV2? = nil, promotedPurchases: PromotedPurchases? = nil, appEvents: AppEvents? = nil, reviewSubmissions: ReviewSubmissions? = nil, subscriptionGracePeriod: SubscriptionGracePeriod? = nil, customerReviews: CustomerReviews? = nil, customerReviewSummarizations: CustomerReviewSummarizations? = nil, gameCenterDetail: GameCenterDetail? = nil, appStoreVersionExperimentsV2: AppStoreVersionExperimentsV2? = nil, alternativeDistributionKey: AlternativeDistributionKey? = nil, analyticsReportRequests: AnalyticsReportRequests? = nil, marketplaceSearchDetail: MarketplaceSearchDetail? = nil, backgroundAssets: BackgroundAssets? = nil, betaFeedbackScreenshotSubmissions: BetaFeedbackScreenshotSubmissions? = nil, betaFeedbackCrashSubmissions: BetaFeedbackCrashSubmissions? = nil, webhooks: Webhooks? = nil) {
            self.accessibilityDeclarations = accessibilityDeclarations
            self.appEncryptionDeclarations = appEncryptionDeclarations
            self.ciProduct = ciProduct
            self.betaTesters = betaTesters
            self.betaGroups = betaGroups
            self.appStoreVersions = appStoreVersions
            self.preReleaseVersions = preReleaseVersions
            self.betaAppLocalizations = betaAppLocalizations
            self.builds = builds
            self.betaLicenseAgreement = betaLicenseAgreement
            self.betaAppReviewDetail = betaAppReviewDetail
            self.appInfos = appInfos
            self.appClips = appClips
            self.appPricePoints = appPricePoints
            self.endUserLicenseAgreement = endUserLicenseAgreement
            self.appPriceSchedule = appPriceSchedule
            self.appAvailabilityV2 = appAvailabilityV2
            self.inAppPurchases = inAppPurchases
            self.subscriptionGroups = subscriptionGroups
            self.gameCenterEnabledVersions = gameCenterEnabledVersions
            self.perfPowerMetrics = perfPowerMetrics
            self.appCustomProductPages = appCustomProductPages
            self.inAppPurchasesV2 = inAppPurchasesV2
            self.promotedPurchases = promotedPurchases
            self.appEvents = appEvents
            self.reviewSubmissions = reviewSubmissions
            self.subscriptionGracePeriod = subscriptionGracePeriod
            self.customerReviews = customerReviews
            self.customerReviewSummarizations = customerReviewSummarizations
            self.gameCenterDetail = gameCenterDetail
            self.appStoreVersionExperimentsV2 = appStoreVersionExperimentsV2
            self.alternativeDistributionKey = alternativeDistributionKey
            self.analyticsReportRequests = analyticsReportRequests
            self.marketplaceSearchDetail = marketplaceSearchDetail
            self.backgroundAssets = backgroundAssets
            self.betaFeedbackScreenshotSubmissions = betaFeedbackScreenshotSubmissions
            self.betaFeedbackCrashSubmissions = betaFeedbackCrashSubmissions
            self.webhooks = webhooks
        }
    }

    public init(type: `Type` = .apps, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
