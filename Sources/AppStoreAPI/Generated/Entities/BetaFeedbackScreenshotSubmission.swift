// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct BetaFeedbackScreenshotSubmission: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case betaFeedbackScreenshotSubmissions
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var createdDate: Date?
        public var comment: String?
        public var email: String?
        public var deviceModel: String?
        public var osVersion: String?
        public var locale: String?
        public var timeZone: String?
        public var architecture: String?
        public var connectionType: DeviceConnectionType?
        public var pairedAppleWatch: String?
        public var appUptimeInMilliseconds: Int64?
        public var diskBytesAvailable: Int64?
        public var diskBytesTotal: Int64?
        public var batteryPercentage: Int?
        public var screenWidthInPoints: Int?
        public var screenHeightInPoints: Int?
        public var appPlatform: Platform?
        public var devicePlatform: Platform?
        public var deviceFamily: DeviceFamily?
        public var buildBundleID: String?
        public var screenshots: [BetaFeedbackScreenshotImage]?

        public init(createdDate: Date? = nil, comment: String? = nil, email: String? = nil, deviceModel: String? = nil, osVersion: String? = nil, locale: String? = nil, timeZone: String? = nil, architecture: String? = nil, connectionType: DeviceConnectionType? = nil, pairedAppleWatch: String? = nil, appUptimeInMilliseconds: Int64? = nil, diskBytesAvailable: Int64? = nil, diskBytesTotal: Int64? = nil, batteryPercentage: Int? = nil, screenWidthInPoints: Int? = nil, screenHeightInPoints: Int? = nil, appPlatform: Platform? = nil, devicePlatform: Platform? = nil, deviceFamily: DeviceFamily? = nil, buildBundleID: String? = nil, screenshots: [BetaFeedbackScreenshotImage]? = nil) {
            self.createdDate = createdDate
            self.comment = comment
            self.email = email
            self.deviceModel = deviceModel
            self.osVersion = osVersion
            self.locale = locale
            self.timeZone = timeZone
            self.architecture = architecture
            self.connectionType = connectionType
            self.pairedAppleWatch = pairedAppleWatch
            self.appUptimeInMilliseconds = appUptimeInMilliseconds
            self.diskBytesAvailable = diskBytesAvailable
            self.diskBytesTotal = diskBytesTotal
            self.batteryPercentage = batteryPercentage
            self.screenWidthInPoints = screenWidthInPoints
            self.screenHeightInPoints = screenHeightInPoints
            self.appPlatform = appPlatform
            self.devicePlatform = devicePlatform
            self.deviceFamily = deviceFamily
            self.buildBundleID = buildBundleID
            self.screenshots = screenshots
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate
            case comment
            case email
            case deviceModel
            case osVersion
            case locale
            case timeZone
            case architecture
            case connectionType
            case pairedAppleWatch
            case appUptimeInMilliseconds
            case diskBytesAvailable
            case diskBytesTotal
            case batteryPercentage
            case screenWidthInPoints
            case screenHeightInPoints
            case appPlatform
            case devicePlatform
            case deviceFamily
            case buildBundleID = "buildBundleId"
            case screenshots
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var build: Build?
        public var tester: Tester?

        public struct Build: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case builds
                }

                public init(type: `Type` = .builds, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct Tester: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case betaTesters
                }

                public init(type: `Type` = .betaTesters, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public init(build: Build? = nil, tester: Tester? = nil) {
            self.build = build
            self.tester = tester
        }
    }

    public init(type: `Type` = .betaFeedbackScreenshotSubmissions, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
