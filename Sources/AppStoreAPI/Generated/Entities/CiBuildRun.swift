// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct CiBuildRun: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case ciBuildRuns
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var number: Int?
        public var createdDate: Date?
        public var startedDate: Date?
        public var finishedDate: Date?
        public var sourceCommit: SourceCommit?
        public var destinationCommit: DestinationCommit?
        public var isPullRequestBuild: Bool?
        public var issueCounts: CiIssueCounts?
        public var executionProgress: CiExecutionProgress?
        public var completionStatus: CiCompletionStatus?
        public var startReason: StartReason?
        public var cancelReason: CancelReason?

        public struct SourceCommit: Codable, Equatable, Sendable {
            public var commitSha: String?
            public var message: String?
            public var author: CiGitUser?
            public var committer: CiGitUser?
            public var webURL: URL?

            public init(commitSha: String? = nil, message: String? = nil, author: CiGitUser? = nil, committer: CiGitUser? = nil, webURL: URL? = nil) {
                self.commitSha = commitSha
                self.message = message
                self.author = author
                self.committer = committer
                self.webURL = webURL
            }

            private enum CodingKeys: String, CodingKey {
                case commitSha
                case message
                case author
                case committer
                case webURL = "webUrl"
            }
        }

        public struct DestinationCommit: Codable, Equatable, Sendable {
            public var commitSha: String?
            public var message: String?
            public var author: CiGitUser?
            public var committer: CiGitUser?
            public var webURL: URL?

            public init(commitSha: String? = nil, message: String? = nil, author: CiGitUser? = nil, committer: CiGitUser? = nil, webURL: URL? = nil) {
                self.commitSha = commitSha
                self.message = message
                self.author = author
                self.committer = committer
                self.webURL = webURL
            }

            private enum CodingKeys: String, CodingKey {
                case commitSha
                case message
                case author
                case committer
                case webURL = "webUrl"
            }
        }

        public enum StartReason: String, CaseIterable, Codable, Sendable {
            case gitRefChange = "GIT_REF_CHANGE"
            case manual = "MANUAL"
            case manualRebuild = "MANUAL_REBUILD"
            case pullRequestOpen = "PULL_REQUEST_OPEN"
            case pullRequestUpdate = "PULL_REQUEST_UPDATE"
            case schedule = "SCHEDULE"
        }

        public enum CancelReason: String, CaseIterable, Codable, Sendable {
            case automaticallyByNewerBuild = "AUTOMATICALLY_BY_NEWER_BUILD"
            case manuallyByUser = "MANUALLY_BY_USER"
        }

        public init(number: Int? = nil, createdDate: Date? = nil, startedDate: Date? = nil, finishedDate: Date? = nil, sourceCommit: SourceCommit? = nil, destinationCommit: DestinationCommit? = nil, isPullRequestBuild: Bool? = nil, issueCounts: CiIssueCounts? = nil, executionProgress: CiExecutionProgress? = nil, completionStatus: CiCompletionStatus? = nil, startReason: StartReason? = nil, cancelReason: CancelReason? = nil) {
            self.number = number
            self.createdDate = createdDate
            self.startedDate = startedDate
            self.finishedDate = finishedDate
            self.sourceCommit = sourceCommit
            self.destinationCommit = destinationCommit
            self.isPullRequestBuild = isPullRequestBuild
            self.issueCounts = issueCounts
            self.executionProgress = executionProgress
            self.completionStatus = completionStatus
            self.startReason = startReason
            self.cancelReason = cancelReason
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var builds: Builds?
        public var workflow: Workflow?
        public var product: Product?
        public var sourceBranchOrTag: SourceBranchOrTag?
        public var destinationBranch: DestinationBranch?
        public var actions: Actions?
        public var pullRequest: PullRequest?

        public struct Builds: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case builds
                }

                public init(type: `Type` = .builds, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Workflow: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case ciWorkflows
                }

                public init(type: `Type` = .ciWorkflows, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct Product: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case ciProducts
                }

                public init(type: `Type` = .ciProducts, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct SourceBranchOrTag: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case scmGitReferences
                }

                public init(type: `Type` = .scmGitReferences, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct DestinationBranch: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case scmGitReferences
                }

                public init(type: `Type` = .scmGitReferences, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct Actions: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct PullRequest: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case scmPullRequests
                }

                public init(type: `Type` = .scmPullRequests, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public init(builds: Builds? = nil, workflow: Workflow? = nil, product: Product? = nil, sourceBranchOrTag: SourceBranchOrTag? = nil, destinationBranch: DestinationBranch? = nil, actions: Actions? = nil, pullRequest: PullRequest? = nil) {
            self.builds = builds
            self.workflow = workflow
            self.product = product
            self.sourceBranchOrTag = sourceBranchOrTag
            self.destinationBranch = destinationBranch
            self.actions = actions
            self.pullRequest = pullRequest
        }
    }

    public init(type: `Type` = .ciBuildRuns, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
