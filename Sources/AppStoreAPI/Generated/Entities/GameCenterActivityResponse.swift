// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterActivityResponse: Codable, Equatable, Sendable {
    /// GameCenterActivity
    public var data: GameCenterActivity
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable, Equatable, Sendable {
        case gameCenterDetail(GameCenterDetail)
        case gameCenterGroup(GameCenterGroup)
        case gameCenterAchievement(GameCenterAchievement)
        case gameCenterLeaderboard(GameCenterLeaderboard)
        case gameCenterActivityVersion(GameCenterActivityVersion)

        public init(from decoder: any Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(GameCenterDetail.self) {
                self = .gameCenterDetail(value)
            } else if let value = try? container.decode(GameCenterGroup.self) {
                self = .gameCenterGroup(value)
            } else if let value = try? container.decode(GameCenterAchievement.self) {
                self = .gameCenterAchievement(value)
            } else if let value = try? container.decode(GameCenterLeaderboard.self) {
                self = .gameCenterLeaderboard(value)
            } else if let value = try? container.decode(GameCenterActivityVersion.self) {
                self = .gameCenterActivityVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (GameCenterDetail, GameCenterGroup, GameCenterAchievement, GameCenterLeaderboard, GameCenterActivityVersion)."
                )
            }
        }

        public func encode(to encoder: any Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .gameCenterDetail(let value): try container.encode(value)
            case .gameCenterGroup(let value): try container.encode(value)
            case .gameCenterAchievement(let value): try container.encode(value)
            case .gameCenterLeaderboard(let value): try container.encode(value)
            case .gameCenterActivityVersion(let value): try container.encode(value)
            }
        }
    }

    public init(data: GameCenterActivity, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}
