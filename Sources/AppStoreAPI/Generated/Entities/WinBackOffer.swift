// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct WinBackOffer: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case winBackOffers
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var referenceName: String?
        public var offerID: String?
        public var duration: SubscriptionOfferDuration?
        public var offerMode: SubscriptionOfferMode?
        public var periodCount: Int?
        public var customerEligibilityPaidSubscriptionDurationInMonths: Int?
        public var customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange?
        public var customerEligibilityWaitBetweenOffersInMonths: Int?
        public var startDate: String?
        public var endDate: String?
        public var priority: Priority?
        public var promotionIntent: PromotionIntent?

        public enum Priority: String, CaseIterable, Codable, Sendable {
            case high = "HIGH"
            case normal = "NORMAL"
        }

        public enum PromotionIntent: String, CaseIterable, Codable, Sendable {
            case notPromoted = "NOT_PROMOTED"
            case useAutoGeneratedAssets = "USE_AUTO_GENERATED_ASSETS"
        }

        public init(referenceName: String? = nil, offerID: String? = nil, duration: SubscriptionOfferDuration? = nil, offerMode: SubscriptionOfferMode? = nil, periodCount: Int? = nil, customerEligibilityPaidSubscriptionDurationInMonths: Int? = nil, customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange? = nil, customerEligibilityWaitBetweenOffersInMonths: Int? = nil, startDate: String? = nil, endDate: String? = nil, priority: Priority? = nil, promotionIntent: PromotionIntent? = nil) {
            self.referenceName = referenceName
            self.offerID = offerID
            self.duration = duration
            self.offerMode = offerMode
            self.periodCount = periodCount
            self.customerEligibilityPaidSubscriptionDurationInMonths = customerEligibilityPaidSubscriptionDurationInMonths
            self.customerEligibilityTimeSinceLastSubscribedInMonths = customerEligibilityTimeSinceLastSubscribedInMonths
            self.customerEligibilityWaitBetweenOffersInMonths = customerEligibilityWaitBetweenOffersInMonths
            self.startDate = startDate
            self.endDate = endDate
            self.priority = priority
            self.promotionIntent = promotionIntent
        }

        private enum CodingKeys: String, CodingKey {
            case referenceName
            case offerID = "offerId"
            case duration
            case offerMode
            case periodCount
            case customerEligibilityPaidSubscriptionDurationInMonths
            case customerEligibilityTimeSinceLastSubscribedInMonths
            case customerEligibilityWaitBetweenOffersInMonths
            case startDate
            case endDate
            case priority
            case promotionIntent
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var prices: Prices?

        public struct Prices: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case winBackOfferPrices
                }

                public init(type: `Type` = .winBackOfferPrices, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(prices: Prices? = nil) {
            self.prices = prices
        }
    }

    public init(type: `Type` = .winBackOffers, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
