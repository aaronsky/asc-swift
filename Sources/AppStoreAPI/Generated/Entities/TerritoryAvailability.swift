// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct TerritoryAvailability: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case territoryAvailabilities
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var isAvailable: Bool?
        public var releaseDate: String?
        public var isPreOrderEnabled: Bool?
        public var preOrderPublishDate: String?
        public var contentStatuses: [ContentStatus]?

        public enum ContentStatus: String, CaseIterable, Codable, Sendable {
            case available = "AVAILABLE"
            case availableForPreorderOnDate = "AVAILABLE_FOR_PREORDER_ON_DATE"
            case processingToNotAvailable = "PROCESSING_TO_NOT_AVAILABLE"
            case processingToAvailable = "PROCESSING_TO_AVAILABLE"
            case processingToPreOrder = "PROCESSING_TO_PRE_ORDER"
            case availableForSaleUnreleasedApp = "AVAILABLE_FOR_SALE_UNRELEASED_APP"
            case preorderOnUnreleasedApp = "PREORDER_ON_UNRELEASED_APP"
            case availableForPreorder = "AVAILABLE_FOR_PREORDER"
            case missingRating = "MISSING_RATING"
            case cannotSellRestrictedRating = "CANNOT_SELL_RESTRICTED_RATING"
            case brazilRequiredTaxID = "BRAZIL_REQUIRED_TAX_ID"
            case missingGrn = "MISSING_GRN"
            case unverifiedGrn = "UNVERIFIED_GRN"
            case icpNumberInvalid = "ICP_NUMBER_INVALID"
            case icpNumberMissing = "ICP_NUMBER_MISSING"
            case traderStatusNotProvided = "TRADER_STATUS_NOT_PROVIDED"
            case traderStatusVerificationFailed = "TRADER_STATUS_VERIFICATION_FAILED"
            case traderStatusVerificationStatusMissing = "TRADER_STATUS_VERIFICATION_STATUS_MISSING"
            case cannotSellSeventeenPlusApps = "CANNOT_SELL_SEVENTEEN_PLUS_APPS"
            case cannotSellSexuallyExplicit = "CANNOT_SELL_SEXUALLY_EXPLICIT"
            case cannotSellNoniOSGames = "CANNOT_SELL_NON_IOS_GAMES"
            case cannotSellSeventeenPlusGames = "CANNOT_SELL_SEVENTEEN_PLUS_GAMES"
            case cannotSellCasino = "CANNOT_SELL_CASINO"
            case cannotSellCasinoWithoutGrac = "CANNOT_SELL_CASINO_WITHOUT_GRAC"
            case cannotSellCasinoWithoutAgeVerification = "CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION"
            case cannotSellAdultOnly = "CANNOT_SELL_ADULT_ONLY"
            case cannotSellGamblingContests = "CANNOT_SELL_GAMBLING_CONTESTS"
            case cannotSellGambling = "CANNOT_SELL_GAMBLING"
            case cannotSellContests = "CANNOT_SELL_CONTESTS"
            case cannotSell = "CANNOT_SELL"
        }

        public init(isAvailable: Bool? = nil, releaseDate: String? = nil, isPreOrderEnabled: Bool? = nil, preOrderPublishDate: String? = nil, contentStatuses: [ContentStatus]? = nil) {
            self.isAvailable = isAvailable
            self.releaseDate = releaseDate
            self.isPreOrderEnabled = isPreOrderEnabled
            self.preOrderPublishDate = preOrderPublishDate
            self.contentStatuses = contentStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case isAvailable = "available"
            case releaseDate
            case isPreOrderEnabled = "preOrderEnabled"
            case preOrderPublishDate
            case contentStatuses
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var territory: Territory?

        public struct Territory: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case territories
                }

                public init(type: `Type` = .territories, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public init(territory: Territory? = nil) {
            self.territory = territory
        }
    }

    public init(type: `Type` = .territoryAvailabilities, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
