// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterLeaderboardUpdateRequest: Codable, Equatable, Sendable {
    public var data: Data

    public struct Data: Codable, Equatable, Identifiable, Sendable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, CaseIterable, Codable, Sendable {
            case gameCenterLeaderboards
        }

        public struct Attributes: Codable, Equatable, Sendable {
            public var defaultFormatter: GameCenterLeaderboardFormatter?
            public var referenceName: String?
            public var submissionType: SubmissionType?
            public var scoreSortType: ScoreSortType?
            public var scoreRangeStart: String?
            public var scoreRangeEnd: String?
            public var recurrenceStartDate: Date?
            public var recurrenceDuration: String?
            public var recurrenceRule: String?
            public var isArchived: Bool?
            public var activityProperties: [String: String]?
            public var visibility: Visibility?

            public enum SubmissionType: String, CaseIterable, Codable, Sendable {
                case bestScore = "BEST_SCORE"
                case mostRecentScore = "MOST_RECENT_SCORE"
            }

            public enum ScoreSortType: String, CaseIterable, Codable, Sendable {
                case asc = "ASC"
                case desc = "DESC"
            }

            public enum Visibility: String, CaseIterable, Codable, Sendable {
                case showForAll = "SHOW_FOR_ALL"
                case hideForAll = "HIDE_FOR_ALL"
            }

            public init(defaultFormatter: GameCenterLeaderboardFormatter? = nil, referenceName: String? = nil, submissionType: SubmissionType? = nil, scoreSortType: ScoreSortType? = nil, scoreRangeStart: String? = nil, scoreRangeEnd: String? = nil, recurrenceStartDate: Date? = nil, recurrenceDuration: String? = nil, recurrenceRule: String? = nil, isArchived: Bool? = nil, activityProperties: [String: String]? = nil, visibility: Visibility? = nil) {
                self.defaultFormatter = defaultFormatter
                self.referenceName = referenceName
                self.submissionType = submissionType
                self.scoreSortType = scoreSortType
                self.scoreRangeStart = scoreRangeStart
                self.scoreRangeEnd = scoreRangeEnd
                self.recurrenceStartDate = recurrenceStartDate
                self.recurrenceDuration = recurrenceDuration
                self.recurrenceRule = recurrenceRule
                self.isArchived = isArchived
                self.activityProperties = activityProperties
                self.visibility = visibility
            }

            private enum CodingKeys: String, CodingKey {
                case defaultFormatter
                case referenceName
                case submissionType
                case scoreSortType
                case scoreRangeStart
                case scoreRangeEnd
                case recurrenceStartDate
                case recurrenceDuration
                case recurrenceRule
                case isArchived = "archived"
                case activityProperties
                case visibility
            }
        }

        public init(type: `Type` = .gameCenterLeaderboards, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}
