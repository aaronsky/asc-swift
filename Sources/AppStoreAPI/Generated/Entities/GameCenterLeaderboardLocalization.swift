// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterLeaderboardLocalization: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case gameCenterLeaderboardLocalizations
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var locale: String?
        public var name: String?
        public var formatterOverride: GameCenterLeaderboardFormatter?
        public var formatterSuffix: String?
        public var formatterSuffixSingular: String?

        public init(locale: String? = nil, name: String? = nil, formatterOverride: GameCenterLeaderboardFormatter? = nil, formatterSuffix: String? = nil, formatterSuffixSingular: String? = nil) {
            self.locale = locale
            self.name = name
            self.formatterOverride = formatterOverride
            self.formatterSuffix = formatterSuffix
            self.formatterSuffixSingular = formatterSuffixSingular
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var gameCenterLeaderboard: GameCenterLeaderboard?
        public var gameCenterLeaderboardImage: GameCenterLeaderboardImage?

        public struct GameCenterLeaderboard: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterLeaderboards
                }

                public init(type: `Type` = .gameCenterLeaderboards, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct GameCenterLeaderboardImage: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case gameCenterLeaderboardImages
                }

                public init(type: `Type` = .gameCenterLeaderboardImages, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(gameCenterLeaderboard: GameCenterLeaderboard? = nil, gameCenterLeaderboardImage: GameCenterLeaderboardImage? = nil) {
            self.gameCenterLeaderboard = gameCenterLeaderboard
            self.gameCenterLeaderboardImage = gameCenterLeaderboardImage
        }
    }

    public init(type: `Type` = .gameCenterLeaderboardLocalizations, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
