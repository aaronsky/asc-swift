// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct Build: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case builds
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var version: String?
        public var uploadedDate: Date?
        public var expirationDate: Date?
        public var isExpired: Bool?
        public var minOsVersion: String?
        public var lsMinimumSystemVersion: String?
        public var computedMinMacOsVersion: String?
        public var computedMinVisionOsVersion: String?
        public var iconAssetToken: ImageAsset?
        public var processingState: ProcessingState?
        public var buildAudienceType: BuildAudienceType?
        public var usesNonExemptEncryption: Bool?

        public enum ProcessingState: String, CaseIterable, Codable, Sendable {
            case processing = "PROCESSING"
            case failed = "FAILED"
            case invalid = "INVALID"
            case valid = "VALID"
        }

        public init(version: String? = nil, uploadedDate: Date? = nil, expirationDate: Date? = nil, isExpired: Bool? = nil, minOsVersion: String? = nil, lsMinimumSystemVersion: String? = nil, computedMinMacOsVersion: String? = nil, computedMinVisionOsVersion: String? = nil, iconAssetToken: ImageAsset? = nil, processingState: ProcessingState? = nil, buildAudienceType: BuildAudienceType? = nil, usesNonExemptEncryption: Bool? = nil) {
            self.version = version
            self.uploadedDate = uploadedDate
            self.expirationDate = expirationDate
            self.isExpired = isExpired
            self.minOsVersion = minOsVersion
            self.lsMinimumSystemVersion = lsMinimumSystemVersion
            self.computedMinMacOsVersion = computedMinMacOsVersion
            self.computedMinVisionOsVersion = computedMinVisionOsVersion
            self.iconAssetToken = iconAssetToken
            self.processingState = processingState
            self.buildAudienceType = buildAudienceType
            self.usesNonExemptEncryption = usesNonExemptEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case version
            case uploadedDate
            case expirationDate
            case isExpired = "expired"
            case minOsVersion
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case computedMinVisionOsVersion
            case iconAssetToken
            case processingState
            case buildAudienceType
            case usesNonExemptEncryption
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var preReleaseVersion: PreReleaseVersion?
        public var individualTesters: IndividualTesters?
        public var betaGroups: BetaGroups?
        public var betaBuildLocalizations: BetaBuildLocalizations?
        public var appEncryptionDeclaration: AppEncryptionDeclaration?
        public var betaAppReviewSubmission: BetaAppReviewSubmission?
        public var app: App?
        public var buildBetaDetail: BuildBetaDetail?
        public var appStoreVersion: AppStoreVersion?
        public var icons: Icons?
        public var buildBundles: BuildBundles?
        public var perfPowerMetrics: PerfPowerMetrics?
        public var diagnosticSignatures: DiagnosticSignatures?

        public struct PreReleaseVersion: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case preReleaseVersions
                }

                public init(type: `Type` = .preReleaseVersions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct IndividualTesters: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case betaTesters
                }

                public init(type: `Type` = .betaTesters, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaGroups: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case betaGroups
                }

                public init(type: `Type` = .betaGroups, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaBuildLocalizations: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case betaBuildLocalizations
                }

                public init(type: `Type` = .betaBuildLocalizations, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppEncryptionDeclaration: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appEncryptionDeclarations
                }

                public init(type: `Type` = .appEncryptionDeclarations, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BetaAppReviewSubmission: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case betaAppReviewSubmissions
                }

                public init(type: `Type` = .betaAppReviewSubmissions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct App: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case apps
                }

                public init(type: `Type` = .apps, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BuildBetaDetail: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case buildBetaDetails
                }

                public init(type: `Type` = .buildBetaDetails, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersion: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appStoreVersions
                }

                public init(type: `Type` = .appStoreVersions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Icons: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case buildIcons
                }

                public init(type: `Type` = .buildIcons, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BuildBundles: Codable, Equatable, Sendable {
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case buildBundles
                }

                public init(type: `Type` = .buildBundles, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.data = data
            }
        }

        public struct PerfPowerMetrics: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct DiagnosticSignatures: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public init(preReleaseVersion: PreReleaseVersion? = nil, individualTesters: IndividualTesters? = nil, betaGroups: BetaGroups? = nil, betaBuildLocalizations: BetaBuildLocalizations? = nil, appEncryptionDeclaration: AppEncryptionDeclaration? = nil, betaAppReviewSubmission: BetaAppReviewSubmission? = nil, app: App? = nil, buildBetaDetail: BuildBetaDetail? = nil, appStoreVersion: AppStoreVersion? = nil, icons: Icons? = nil, buildBundles: BuildBundles? = nil, perfPowerMetrics: PerfPowerMetrics? = nil, diagnosticSignatures: DiagnosticSignatures? = nil) {
            self.preReleaseVersion = preReleaseVersion
            self.individualTesters = individualTesters
            self.betaGroups = betaGroups
            self.betaBuildLocalizations = betaBuildLocalizations
            self.appEncryptionDeclaration = appEncryptionDeclaration
            self.betaAppReviewSubmission = betaAppReviewSubmission
            self.app = app
            self.buildBetaDetail = buildBetaDetail
            self.appStoreVersion = appStoreVersion
            self.icons = icons
            self.buildBundles = buildBundles
            self.perfPowerMetrics = perfPowerMetrics
            self.diagnosticSignatures = diagnosticSignatures
        }
    }

    public init(type: `Type` = .builds, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
