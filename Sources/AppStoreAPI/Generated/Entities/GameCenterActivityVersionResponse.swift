// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterActivityVersionResponse: Codable, Equatable, Sendable {
    /// GameCenterActivityVersion
    public var data: GameCenterActivityVersion
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable, Equatable, Sendable {
        case gameCenterActivity(GameCenterActivity)
        case gameCenterActivityLocalization(GameCenterActivityLocalization)
        case gameCenterActivityImage(GameCenterActivityImage)
        case gameCenterActivityVersionRelease(GameCenterActivityVersionRelease)

        public init(from decoder: any Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(GameCenterActivity.self) {
                self = .gameCenterActivity(value)
            } else if let value = try? container.decode(GameCenterActivityLocalization.self) {
                self = .gameCenterActivityLocalization(value)
            } else if let value = try? container.decode(GameCenterActivityImage.self) {
                self = .gameCenterActivityImage(value)
            } else if let value = try? container.decode(GameCenterActivityVersionRelease.self) {
                self = .gameCenterActivityVersionRelease(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (GameCenterActivity, GameCenterActivityLocalization, GameCenterActivityImage, GameCenterActivityVersionRelease)."
                )
            }
        }

        public func encode(to encoder: any Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .gameCenterActivity(let value): try container.encode(value)
            case .gameCenterActivityLocalization(let value): try container.encode(value)
            case .gameCenterActivityImage(let value): try container.encode(value)
            case .gameCenterActivityVersionRelease(let value): try container.encode(value)
            }
        }
    }

    public init(data: GameCenterActivityVersion, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}
