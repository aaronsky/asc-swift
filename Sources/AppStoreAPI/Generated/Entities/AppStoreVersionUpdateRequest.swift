// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct AppStoreVersionUpdateRequest: Codable, Equatable, Sendable {
    public var data: Data

    public struct Data: Codable, Equatable, Identifiable, Sendable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, CaseIterable, Codable, Sendable {
            case appStoreVersions
        }

        public struct Attributes: Codable, Equatable, Sendable {
            public var versionString: String?
            public var copyright: String?
            public var reviewType: ReviewType?
            public var releaseType: ReleaseType?
            public var earliestReleaseDate: Date?
            public var isDownloadable: Bool?

            public enum ReviewType: String, CaseIterable, Codable, Sendable {
                case appStore = "APP_STORE"
                case notarization = "NOTARIZATION"
            }

            public enum ReleaseType: String, CaseIterable, Codable, Sendable {
                case manual = "MANUAL"
                case afterApproval = "AFTER_APPROVAL"
                case scheduled = "SCHEDULED"
            }

            public init(versionString: String? = nil, copyright: String? = nil, reviewType: ReviewType? = nil, releaseType: ReleaseType? = nil, earliestReleaseDate: Date? = nil, isDownloadable: Bool? = nil) {
                self.versionString = versionString
                self.copyright = copyright
                self.reviewType = reviewType
                self.releaseType = releaseType
                self.earliestReleaseDate = earliestReleaseDate
                self.isDownloadable = isDownloadable
            }

            private enum CodingKeys: String, CodingKey {
                case versionString
                case copyright
                case reviewType
                case releaseType
                case earliestReleaseDate
                case isDownloadable = "downloadable"
            }
        }

        public struct Relationships: Codable, Equatable, Sendable {
            public var build: Build?
            public var appClipDefaultExperience: AppClipDefaultExperience?

            public struct Build: Codable, Equatable, Sendable {
                public var data: Data?

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case builds
                    }

                    public init(type: `Type` = .builds, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppClipDefaultExperience: Codable, Equatable, Sendable {
                public var data: Data?

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case appClipDefaultExperiences
                    }

                    public init(type: `Type` = .appClipDefaultExperiences, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(build: Build? = nil, appClipDefaultExperience: AppClipDefaultExperience? = nil) {
                self.build = build
                self.appClipDefaultExperience = appClipDefaultExperience
            }
        }

        public init(type: `Type` = .appStoreVersions, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}
