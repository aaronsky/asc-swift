// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct PromotedPurchaseCreateRequest: Codable, Equatable, Sendable {
    public var data: Data

    public struct Data: Codable, Equatable, Sendable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, CaseIterable, Codable, Sendable {
            case promotedPurchases
        }

        public struct Attributes: Codable, Equatable, Sendable {
            public var isVisibleForAllUsers: Bool
            public var isEnabled: Bool?

            public init(isVisibleForAllUsers: Bool, isEnabled: Bool? = nil) {
                self.isVisibleForAllUsers = isVisibleForAllUsers
                self.isEnabled = isEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case isVisibleForAllUsers = "visibleForAllUsers"
                case isEnabled = "enabled"
            }
        }

        public struct Relationships: Codable, Equatable, Sendable {
            public var app: App
            public var inAppPurchaseV2: InAppPurchaseV2?
            public var subscription: Subscription?

            public struct App: Codable, Equatable, Sendable {
                public var data: Data

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case apps
                    }

                    public init(type: `Type` = .apps, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct InAppPurchaseV2: Codable, Equatable, Sendable {
                public var data: Data?

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case inAppPurchases
                    }

                    public init(type: `Type` = .inAppPurchases, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct Subscription: Codable, Equatable, Sendable {
                public var data: Data?

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case subscriptions
                    }

                    public init(type: `Type` = .subscriptions, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(app: App, inAppPurchaseV2: InAppPurchaseV2? = nil, subscription: Subscription? = nil) {
                self.app = app
                self.inAppPurchaseV2 = inAppPurchaseV2
                self.subscription = subscription
            }
        }

        public init(type: `Type` = .promotedPurchases, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}
