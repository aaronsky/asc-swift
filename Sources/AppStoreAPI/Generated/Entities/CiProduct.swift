// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct CiProduct: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case ciProducts
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var name: String?
        public var createdDate: Date?
        public var productType: ProductType?

        public enum ProductType: String, CaseIterable, Codable, Sendable {
            case app = "APP"
            case framework = "FRAMEWORK"
        }

        public init(name: String? = nil, createdDate: Date? = nil, productType: ProductType? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.productType = productType
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var app: App?
        public var bundleID: BundleID?
        public var workflows: Workflows?
        public var primaryRepositories: PrimaryRepositories?
        public var additionalRepositories: AdditionalRepositories?
        public var buildRuns: BuildRuns?

        public struct App: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case apps
                }

                public init(type: `Type` = .apps, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BundleID: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case bundleIDs = "bundleIds"
                }

                public init(type: `Type` = .bundleIDs, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct Workflows: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct PrimaryRepositories: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case scmRepositories
                }

                public init(type: `Type` = .scmRepositories, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: RelationshipLinks? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AdditionalRepositories: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public struct BuildRuns: Codable, Equatable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }
        }

        public init(app: App? = nil, bundleID: BundleID? = nil, workflows: Workflows? = nil, primaryRepositories: PrimaryRepositories? = nil, additionalRepositories: AdditionalRepositories? = nil, buildRuns: BuildRuns? = nil) {
            self.app = app
            self.bundleID = bundleID
            self.workflows = workflows
            self.primaryRepositories = primaryRepositories
            self.additionalRepositories = additionalRepositories
            self.buildRuns = buildRuns
        }

        private enum CodingKeys: String, CodingKey {
            case app
            case bundleID = "bundleId"
            case workflows
            case primaryRepositories
            case additionalRepositories
            case buildRuns
        }
    }

    public init(type: `Type` = .ciProducts, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
