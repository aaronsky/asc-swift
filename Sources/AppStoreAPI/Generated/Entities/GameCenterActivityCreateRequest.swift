// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterActivityCreateRequest: Codable, Equatable, Sendable {
    public var data: Data

    public struct Data: Codable, Equatable, Sendable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships?

        public enum `Type`: String, CaseIterable, Codable, Sendable {
            case gameCenterActivities
        }

        public struct Attributes: Codable, Equatable, Sendable {
            public var referenceName: String
            public var vendorIdentifier: String
            public var playStyle: PlayStyle?
            public var minimumPlayersCount: Int?
            public var maximumPlayersCount: Int?
            public var isSupportsPartyCode: Bool?
            public var properties: [String: String]?

            public enum PlayStyle: String, CaseIterable, Codable, Sendable {
                case asynchronous = "ASYNCHRONOUS"
                case synchronous = "SYNCHRONOUS"
            }

            public init(referenceName: String, vendorIdentifier: String, playStyle: PlayStyle? = nil, minimumPlayersCount: Int? = nil, maximumPlayersCount: Int? = nil, isSupportsPartyCode: Bool? = nil, properties: [String: String]? = nil) {
                self.referenceName = referenceName
                self.vendorIdentifier = vendorIdentifier
                self.playStyle = playStyle
                self.minimumPlayersCount = minimumPlayersCount
                self.maximumPlayersCount = maximumPlayersCount
                self.isSupportsPartyCode = isSupportsPartyCode
                self.properties = properties
            }

            private enum CodingKeys: String, CodingKey {
                case referenceName
                case vendorIdentifier
                case playStyle
                case minimumPlayersCount
                case maximumPlayersCount
                case isSupportsPartyCode = "supportsPartyCode"
                case properties
            }
        }

        public struct Relationships: Codable, Equatable, Sendable {
            public var gameCenterDetail: GameCenterDetail?
            public var gameCenterGroup: GameCenterGroup?

            public struct GameCenterDetail: Codable, Equatable, Sendable {
                public var data: Data?

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case gameCenterDetails
                    }

                    public init(type: `Type` = .gameCenterDetails, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct GameCenterGroup: Codable, Equatable, Sendable {
                public var data: Data?

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case gameCenterGroups
                    }

                    public init(type: `Type` = .gameCenterGroups, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(gameCenterDetail: GameCenterDetail? = nil, gameCenterGroup: GameCenterGroup? = nil) {
                self.gameCenterDetail = gameCenterDetail
                self.gameCenterGroup = gameCenterGroup
            }
        }

        public init(type: `Type` = .gameCenterActivities, attributes: Attributes, relationships: Relationships? = nil) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}
