// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct Nomination: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case nominations
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var name: String?
        public var type: `Type`?
        public var description: String?
        public var createdDate: Date?
        public var lastModifiedDate: Date?
        public var submittedDate: Date?
        public var state: State?
        public var publishStartDate: Date?
        public var publishEndDate: Date?
        public var deviceFamilies: [DeviceFamily]?
        public var locales: [String]?
        public var supplementalMaterialsUris: [URL]?
        public var hasInAppEvents: Bool?
        public var isLaunchInSelectMarketsFirst: Bool?
        public var notes: String?
        public var isPreOrderEnabled: Bool?

        public enum `Type`: String, CaseIterable, Codable, Sendable {
            case appLaunch = "APP_LAUNCH"
            case appEnhancements = "APP_ENHANCEMENTS"
            case newContent = "NEW_CONTENT"
        }

        public enum State: String, CaseIterable, Codable, Sendable {
            case draft = "DRAFT"
            case submitted = "SUBMITTED"
            case archived = "ARCHIVED"
        }

        public init(name: String? = nil, type: `Type`? = nil, description: String? = nil, createdDate: Date? = nil, lastModifiedDate: Date? = nil, submittedDate: Date? = nil, state: State? = nil, publishStartDate: Date? = nil, publishEndDate: Date? = nil, deviceFamilies: [DeviceFamily]? = nil, locales: [String]? = nil, supplementalMaterialsUris: [URL]? = nil, hasInAppEvents: Bool? = nil, isLaunchInSelectMarketsFirst: Bool? = nil, notes: String? = nil, isPreOrderEnabled: Bool? = nil) {
            self.name = name
            self.type = type
            self.description = description
            self.createdDate = createdDate
            self.lastModifiedDate = lastModifiedDate
            self.submittedDate = submittedDate
            self.state = state
            self.publishStartDate = publishStartDate
            self.publishEndDate = publishEndDate
            self.deviceFamilies = deviceFamilies
            self.locales = locales
            self.supplementalMaterialsUris = supplementalMaterialsUris
            self.hasInAppEvents = hasInAppEvents
            self.isLaunchInSelectMarketsFirst = isLaunchInSelectMarketsFirst
            self.notes = notes
            self.isPreOrderEnabled = isPreOrderEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case type
            case description
            case createdDate
            case lastModifiedDate
            case submittedDate
            case state
            case publishStartDate
            case publishEndDate
            case deviceFamilies
            case locales
            case supplementalMaterialsUris
            case hasInAppEvents
            case isLaunchInSelectMarketsFirst = "launchInSelectMarketsFirst"
            case notes
            case isPreOrderEnabled = "preOrderEnabled"
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var relatedApps: RelatedApps?
        public var createdByActor: CreatedByActor?
        public var lastModifiedByActor: LastModifiedByActor?
        public var submittedByActor: SubmittedByActor?
        public var inAppEvents: InAppEvents?
        public var supportedTerritories: SupportedTerritories?

        public struct RelatedApps: Codable, Equatable, Sendable {
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case apps
                }

                public init(type: `Type` = .apps, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.data = data
            }
        }

        public struct CreatedByActor: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case actors
                }

                public init(type: `Type` = .actors, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct LastModifiedByActor: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case actors
                }

                public init(type: `Type` = .actors, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct SubmittedByActor: Codable, Equatable, Sendable {
            public var data: Data?

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case actors
                }

                public init(type: `Type` = .actors, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct InAppEvents: Codable, Equatable, Sendable {
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case appEvents
                }

                public init(type: `Type` = .appEvents, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.data = data
            }
        }

        public struct SupportedTerritories: Codable, Equatable, Sendable {
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case territories
                }

                public init(type: `Type` = .territories, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.data = data
            }
        }

        public init(relatedApps: RelatedApps? = nil, createdByActor: CreatedByActor? = nil, lastModifiedByActor: LastModifiedByActor? = nil, submittedByActor: SubmittedByActor? = nil, inAppEvents: InAppEvents? = nil, supportedTerritories: SupportedTerritories? = nil) {
            self.relatedApps = relatedApps
            self.createdByActor = createdByActor
            self.lastModifiedByActor = lastModifiedByActor
            self.submittedByActor = submittedByActor
            self.inAppEvents = inAppEvents
            self.supportedTerritories = supportedTerritories
        }
    }

    public init(type: `Type` = .nominations, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
