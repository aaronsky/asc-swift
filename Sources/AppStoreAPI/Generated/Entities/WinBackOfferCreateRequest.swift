// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct WinBackOfferCreateRequest: Codable, Equatable, Sendable {
    public var data: Data
    public var included: [WinBackOfferPriceInlineCreate]?

    public struct Data: Codable, Equatable, Sendable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, CaseIterable, Codable, Sendable {
            case winBackOffers
        }

        public struct Attributes: Codable, Equatable, Sendable {
            public var referenceName: String
            public var offerID: String
            public var duration: SubscriptionOfferDuration
            public var offerMode: SubscriptionOfferMode
            public var periodCount: Int
            public var customerEligibilityPaidSubscriptionDurationInMonths: Int
            public var customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange
            public var customerEligibilityWaitBetweenOffersInMonths: Int?
            public var startDate: String
            public var endDate: String?
            public var priority: Priority
            public var promotionIntent: PromotionIntent?

            public enum Priority: String, CaseIterable, Codable, Sendable {
                case high = "HIGH"
                case normal = "NORMAL"
            }

            public enum PromotionIntent: String, CaseIterable, Codable, Sendable {
                case notPromoted = "NOT_PROMOTED"
                case useAutoGeneratedAssets = "USE_AUTO_GENERATED_ASSETS"
            }

            public init(referenceName: String, offerID: String, duration: SubscriptionOfferDuration, offerMode: SubscriptionOfferMode, periodCount: Int, customerEligibilityPaidSubscriptionDurationInMonths: Int, customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange, customerEligibilityWaitBetweenOffersInMonths: Int? = nil, startDate: String, endDate: String? = nil, priority: Priority, promotionIntent: PromotionIntent? = nil) {
                self.referenceName = referenceName
                self.offerID = offerID
                self.duration = duration
                self.offerMode = offerMode
                self.periodCount = periodCount
                self.customerEligibilityPaidSubscriptionDurationInMonths = customerEligibilityPaidSubscriptionDurationInMonths
                self.customerEligibilityTimeSinceLastSubscribedInMonths = customerEligibilityTimeSinceLastSubscribedInMonths
                self.customerEligibilityWaitBetweenOffersInMonths = customerEligibilityWaitBetweenOffersInMonths
                self.startDate = startDate
                self.endDate = endDate
                self.priority = priority
                self.promotionIntent = promotionIntent
            }

            private enum CodingKeys: String, CodingKey {
                case referenceName
                case offerID = "offerId"
                case duration
                case offerMode
                case periodCount
                case customerEligibilityPaidSubscriptionDurationInMonths
                case customerEligibilityTimeSinceLastSubscribedInMonths
                case customerEligibilityWaitBetweenOffersInMonths
                case startDate
                case endDate
                case priority
                case promotionIntent
            }
        }

        public struct Relationships: Codable, Equatable, Sendable {
            public var subscription: Subscription
            public var prices: Prices

            public struct Subscription: Codable, Equatable, Sendable {
                public var data: Data

                public struct Data: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case subscriptions
                    }

                    public init(type: `Type` = .subscriptions, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Prices: Codable, Equatable, Sendable {
                public var data: [Datum]

                public struct Datum: Codable, Equatable, Identifiable, Sendable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, CaseIterable, Codable, Sendable {
                        case winBackOfferPrices
                    }

                    public init(type: `Type` = .winBackOfferPrices, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public init(subscription: Subscription, prices: Prices) {
                self.subscription = subscription
                self.prices = prices
            }
        }

        public init(type: `Type` = .winBackOffers, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data, included: [WinBackOfferPriceInlineCreate]? = nil) {
        self.data = data
        self.included = included
    }
}
