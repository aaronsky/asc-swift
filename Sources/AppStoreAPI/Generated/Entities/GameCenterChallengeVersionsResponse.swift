// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect

public struct GameCenterChallengeVersionsResponse: Codable, Equatable, Sendable {
    public var data: [GameCenterChallengeVersion]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable, Equatable, Sendable {
        case gameCenterChallenge(GameCenterChallenge)
        case gameCenterChallengeLocalization(GameCenterChallengeLocalization)
        case gameCenterChallengeVersionRelease(GameCenterChallengeVersionRelease)
        case gameCenterChallengeImage(GameCenterChallengeImage)

        public init(from decoder: any Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(GameCenterChallenge.self) {
                self = .gameCenterChallenge(value)
            } else if let value = try? container.decode(GameCenterChallengeLocalization.self) {
                self = .gameCenterChallengeLocalization(value)
            } else if let value = try? container.decode(GameCenterChallengeVersionRelease.self) {
                self = .gameCenterChallengeVersionRelease(value)
            } else if let value = try? container.decode(GameCenterChallengeImage.self) {
                self = .gameCenterChallengeImage(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (GameCenterChallenge, GameCenterChallengeLocalization, GameCenterChallengeVersionRelease, GameCenterChallengeImage)."
                )
            }
        }

        public func encode(to encoder: any Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .gameCenterChallenge(let value): try container.encode(value)
            case .gameCenterChallengeLocalization(let value): try container.encode(value)
            case .gameCenterChallengeVersionRelease(let value): try container.encode(value)
            case .gameCenterChallengeImage(let value): try container.encode(value)
            }
        }
    }

    public init(data: [GameCenterChallengeVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}
