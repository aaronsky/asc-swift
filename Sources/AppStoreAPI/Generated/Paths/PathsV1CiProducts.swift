// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1 {
    public var ciProducts: CiProducts {
        CiProducts(path: path + "/ciProducts")
    }

    public struct CiProducts {
        /// Path: `/v1/ciProducts`
        public let path: String

        public func get(filterProductType: [FilterProductType]? = nil, filterApp: [String]? = nil, fieldsCiProducts: [FieldsCiProducts]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsScmRepositories: [FieldsScmRepositories]? = nil, limit: Int? = nil, include: [Include]? = nil, limitPrimaryRepositories: Int? = nil) -> Request<AppStoreAPI.CiProductsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterProductType, filterApp, fieldsCiProducts, fieldsApps, fieldsScmRepositories, limit, include, limitPrimaryRepositories), id: "ciProducts_getCollection")
        }

        private func makeGetQuery(_ filterProductType: [FilterProductType]?, _ filterApp: [String]?, _ fieldsCiProducts: [FieldsCiProducts]?, _ fieldsApps: [FieldsApps]?, _ fieldsScmRepositories: [FieldsScmRepositories]?, _ limit: Int?, _ include: [Include]?, _ limitPrimaryRepositories: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterProductType, forKey: "filter[productType]")
            encoder.encode(filterApp, forKey: "filter[app]")
            encoder.encode(fieldsCiProducts, forKey: "fields[ciProducts]")
            encoder.encode(fieldsApps, forKey: "fields[apps]")
            encoder.encode(fieldsScmRepositories, forKey: "fields[scmRepositories]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitPrimaryRepositories, forKey: "limit[primaryRepositories]")
            return encoder.items
        }

        public enum FilterProductType: String, CaseIterable, Codable, Sendable {
            case app = "APP"
            case framework = "FRAMEWORK"
        }

        public enum FieldsCiProducts: String, CaseIterable, Codable, Sendable {
            case name
            case createdDate
            case productType
            case app
            case bundleID = "bundleId"
            case workflows
            case primaryRepositories
            case additionalRepositories
            case buildRuns
        }

        public enum FieldsApps: String, CaseIterable, Codable, Sendable {
            case name
            case bundleID = "bundleId"
            case sku
            case primaryLocale
            case isOrEverWasMadeForKids
            case subscriptionStatusURL = "subscriptionStatusUrl"
            case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
            case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
            case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
            case contentRightsDeclaration
            case streamlinedPurchasingEnabled
            case appEncryptionDeclarations
            case ciProduct
            case betaTesters
            case betaGroups
            case appStoreVersions
            case preReleaseVersions
            case betaAppLocalizations
            case builds
            case betaLicenseAgreement
            case betaAppReviewDetail
            case appInfos
            case appClips
            case appPricePoints
            case endUserLicenseAgreement
            case appPriceSchedule
            case appAvailabilityV2
            case inAppPurchases
            case subscriptionGroups
            case gameCenterEnabledVersions
            case perfPowerMetrics
            case appCustomProductPages
            case inAppPurchasesV2
            case promotedPurchases
            case appEvents
            case reviewSubmissions
            case subscriptionGracePeriod
            case customerReviews
            case gameCenterDetail
            case appStoreVersionExperimentsV2
            case alternativeDistributionKey
            case analyticsReportRequests
            case marketplaceSearchDetail
        }

        public enum FieldsScmRepositories: String, CaseIterable, Codable, Sendable {
            case lastAccessedDate
            case httpCloneURL = "httpCloneUrl"
            case sshCloneURL = "sshCloneUrl"
            case ownerName
            case repositoryName
            case scmProvider
            case defaultBranch
            case gitReferences
            case pullRequests
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case app
            case bundleID = "bundleId"
            case primaryRepositories
        }
    }
}
