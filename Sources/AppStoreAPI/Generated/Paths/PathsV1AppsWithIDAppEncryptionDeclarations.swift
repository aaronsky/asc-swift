// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Apps.WithID {
    public var appEncryptionDeclarations: AppEncryptionDeclarations {
        AppEncryptionDeclarations(path: path + "/appEncryptionDeclarations")
    }

    public struct AppEncryptionDeclarations {
        /// Path: `/v1/apps/{id}/appEncryptionDeclarations`
        public let path: String

        public func get(filterPlatform: [FilterPlatform]? = nil, filterBuilds: [String]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, fieldsAppEncryptionDeclarationDocuments: [FieldsAppEncryptionDeclarationDocuments]? = nil, limit: Int? = nil, include: [Include]? = nil, limitBuilds: Int? = nil) -> Request<AppStoreAPI.AppEncryptionDeclarationsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterPlatform, filterBuilds, fieldsAppEncryptionDeclarations, fieldsApps, fieldsBuilds, fieldsAppEncryptionDeclarationDocuments, limit, include, limitBuilds), id: "apps_appEncryptionDeclarations_getToManyRelated")
        }

        private func makeGetQuery(_ filterPlatform: [FilterPlatform]?, _ filterBuilds: [String]?, _ fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations]?, _ fieldsApps: [FieldsApps]?, _ fieldsBuilds: [FieldsBuilds]?, _ fieldsAppEncryptionDeclarationDocuments: [FieldsAppEncryptionDeclarationDocuments]?, _ limit: Int?, _ include: [Include]?, _ limitBuilds: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterPlatform, forKey: "filter[platform]")
            encoder.encode(filterBuilds, forKey: "filter[builds]")
            encoder.encode(fieldsAppEncryptionDeclarations, forKey: "fields[appEncryptionDeclarations]")
            encoder.encode(fieldsApps, forKey: "fields[apps]")
            encoder.encode(fieldsBuilds, forKey: "fields[builds]")
            encoder.encode(fieldsAppEncryptionDeclarationDocuments, forKey: "fields[appEncryptionDeclarationDocuments]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitBuilds, forKey: "limit[builds]")
            return encoder.items
        }

        public enum FilterPlatform: String, CaseIterable, Codable, Sendable {
            case iOS = "IOS"
            case macOS = "MAC_OS"
            case tvOS = "TV_OS"
            case visionOS = "VISION_OS"
        }

        public enum FieldsAppEncryptionDeclarations: String, CaseIterable, Codable, Sendable {
            case appDescription
            case createdDate
            case usesEncryption
            case exempt
            case containsProprietaryCryptography
            case containsThirdPartyCryptography
            case availableOnFrenchStore
            case platform
            case uploadedDate
            case documentURL = "documentUrl"
            case documentName
            case documentType
            case appEncryptionDeclarationState
            case codeValue
            case app
            case builds
            case appEncryptionDeclarationDocument
        }

        public enum FieldsApps: String, CaseIterable, Codable, Sendable {
            case accessibilityURL = "accessibilityUrl"
            case name
            case bundleID = "bundleId"
            case sku
            case primaryLocale
            case isOrEverWasMadeForKids
            case subscriptionStatusURL = "subscriptionStatusUrl"
            case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
            case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
            case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
            case contentRightsDeclaration
            case streamlinedPurchasingEnabled
            case accessibilityDeclarations
            case appEncryptionDeclarations
            case ciProduct
            case betaTesters
            case betaGroups
            case appStoreVersions
            case preReleaseVersions
            case betaAppLocalizations
            case builds
            case betaLicenseAgreement
            case betaAppReviewDetail
            case appInfos
            case appClips
            case appPricePoints
            case endUserLicenseAgreement
            case appPriceSchedule
            case appAvailabilityV2
            case inAppPurchases
            case subscriptionGroups
            case gameCenterEnabledVersions
            case perfPowerMetrics
            case appCustomProductPages
            case inAppPurchasesV2
            case promotedPurchases
            case appEvents
            case reviewSubmissions
            case subscriptionGracePeriod
            case customerReviews
            case customerReviewSummarizations
            case gameCenterDetail
            case appStoreVersionExperimentsV2
            case alternativeDistributionKey
            case analyticsReportRequests
            case marketplaceSearchDetail
            case backgroundAssets
            case betaFeedbackScreenshotSubmissions
            case betaFeedbackCrashSubmissions
            case webhooks
        }

        public enum FieldsBuilds: String, CaseIterable, Codable, Sendable {
            case version
            case uploadedDate
            case expirationDate
            case expired
            case minOsVersion
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case computedMinVisionOsVersion
            case iconAssetToken
            case processingState
            case buildAudienceType
            case usesNonExemptEncryption
            case preReleaseVersion
            case individualTesters
            case betaGroups
            case betaBuildLocalizations
            case appEncryptionDeclaration
            case betaAppReviewSubmission
            case app
            case buildBetaDetail
            case appStoreVersion
            case icons
            case buildBundles
            case perfPowerMetrics
            case diagnosticSignatures
        }

        public enum FieldsAppEncryptionDeclarationDocuments: String, CaseIterable, Codable, Sendable {
            case fileSize
            case fileName
            case assetToken
            case downloadURL = "downloadUrl"
            case sourceFileChecksum
            case uploadOperations
            case assetDeliveryState
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case app
            case builds
            case appEncryptionDeclarationDocument
        }
    }
}
