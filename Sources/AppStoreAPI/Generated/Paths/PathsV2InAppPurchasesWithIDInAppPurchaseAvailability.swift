// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V2.InAppPurchases.WithID {
    public var inAppPurchaseAvailability: InAppPurchaseAvailability {
        InAppPurchaseAvailability(path: path + "/inAppPurchaseAvailability")
    }

    public struct InAppPurchaseAvailability {
        /// Path: `/v2/inAppPurchases/{id}/inAppPurchaseAvailability`
        public let path: String

        public func get(fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, include: [Include]? = nil, limitAvailableTerritories: Int? = nil) -> Request<AppStoreAPI.InAppPurchaseAvailabilityResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsInAppPurchaseAvailabilities, fieldsTerritories, include, limitAvailableTerritories), id: "inAppPurchasesV2_inAppPurchaseAvailability_getToOneRelated")
        }

        private func makeGetQuery(_ fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities]?, _ fieldsTerritories: [FieldsTerritories]?, _ include: [Include]?, _ limitAvailableTerritories: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsInAppPurchaseAvailabilities, forKey: "fields[inAppPurchaseAvailabilities]")
            encoder.encode(fieldsTerritories, forKey: "fields[territories]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitAvailableTerritories, forKey: "limit[availableTerritories]")
            return encoder.items
        }

        public enum FieldsInAppPurchaseAvailabilities: String, CaseIterable, Codable, Sendable {
            case availableInNewTerritories
            case availableTerritories
        }

        public enum FieldsTerritories: String, CaseIterable, Codable, Sendable {
            case currency
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case availableTerritories
        }
    }
}
