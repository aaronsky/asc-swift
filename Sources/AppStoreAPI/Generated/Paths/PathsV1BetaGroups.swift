// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1 {
    public var betaGroups: BetaGroups {
        BetaGroups(path: path + "/betaGroups")
    }

    public struct BetaGroups {
        /// Path: `/v1/betaGroups`
        public let path: String

        public func get(filterName: [String]? = nil, filterIsInternalGroup: [String]? = nil, filterPublicLinkEnabled: [String]? = nil, filterPublicLinkLimitEnabled: [String]? = nil, filterPublicLink: [String]? = nil, filterApp: [String]? = nil, filterBuilds: [String]? = nil, filterID: [String]? = nil, sort: [Sort]? = nil, fieldsBetaGroups: [FieldsBetaGroups]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, fieldsBetaTesters: [FieldsBetaTesters]? = nil, limit: Int? = nil, include: [Include]? = nil, limitBetaTesters: Int? = nil, limitBuilds: Int? = nil) -> Request<AppStoreAPI.BetaGroupsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterName, filterIsInternalGroup, filterPublicLinkEnabled, filterPublicLinkLimitEnabled, filterPublicLink, filterApp, filterBuilds, filterID, sort, fieldsBetaGroups, fieldsApps, fieldsBuilds, fieldsBetaTesters, limit, include, limitBetaTesters, limitBuilds), id: "betaGroups_getCollection")
        }

        private func makeGetQuery(_ filterName: [String]?, _ filterIsInternalGroup: [String]?, _ filterPublicLinkEnabled: [String]?, _ filterPublicLinkLimitEnabled: [String]?, _ filterPublicLink: [String]?, _ filterApp: [String]?, _ filterBuilds: [String]?, _ filterID: [String]?, _ sort: [Sort]?, _ fieldsBetaGroups: [FieldsBetaGroups]?, _ fieldsApps: [FieldsApps]?, _ fieldsBuilds: [FieldsBuilds]?, _ fieldsBetaTesters: [FieldsBetaTesters]?, _ limit: Int?, _ include: [Include]?, _ limitBetaTesters: Int?, _ limitBuilds: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterName, forKey: "filter[name]")
            encoder.encode(filterIsInternalGroup, forKey: "filter[isInternalGroup]")
            encoder.encode(filterPublicLinkEnabled, forKey: "filter[publicLinkEnabled]")
            encoder.encode(filterPublicLinkLimitEnabled, forKey: "filter[publicLinkLimitEnabled]")
            encoder.encode(filterPublicLink, forKey: "filter[publicLink]")
            encoder.encode(filterApp, forKey: "filter[app]")
            encoder.encode(filterBuilds, forKey: "filter[builds]")
            encoder.encode(filterID, forKey: "filter[id]")
            encoder.encode(sort, forKey: "sort")
            encoder.encode(fieldsBetaGroups, forKey: "fields[betaGroups]")
            encoder.encode(fieldsApps, forKey: "fields[apps]")
            encoder.encode(fieldsBuilds, forKey: "fields[builds]")
            encoder.encode(fieldsBetaTesters, forKey: "fields[betaTesters]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitBetaTesters, forKey: "limit[betaTesters]")
            encoder.encode(limitBuilds, forKey: "limit[builds]")
            return encoder.items
        }

        public enum Sort: String, CaseIterable, Codable, Sendable {
            case name
            case minusName = "-name"
            case createdDate
            case minusCreatedDate = "-createdDate"
            case publicLinkEnabled
            case minusPublicLinkEnabled = "-publicLinkEnabled"
            case publicLinkLimit
            case minusPublicLinkLimit = "-publicLinkLimit"
        }

        public enum FieldsBetaGroups: String, CaseIterable, Codable, Sendable {
            case name
            case createdDate
            case isInternalGroup
            case hasAccessToAllBuilds
            case publicLinkEnabled
            case publicLinkID = "publicLinkId"
            case publicLinkLimitEnabled
            case publicLinkLimit
            case publicLink
            case feedbackEnabled
            case iosBuildsAvailableForAppleSiliconMac
            case app
            case builds
            case betaTesters
        }

        public enum FieldsApps: String, CaseIterable, Codable, Sendable {
            case name
            case bundleID = "bundleId"
            case sku
            case primaryLocale
            case isOrEverWasMadeForKids
            case subscriptionStatusURL = "subscriptionStatusUrl"
            case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
            case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
            case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
            case contentRightsDeclaration
            case streamlinedPurchasingEnabled
            case appEncryptionDeclarations
            case ciProduct
            case betaTesters
            case betaGroups
            case appStoreVersions
            case preReleaseVersions
            case betaAppLocalizations
            case builds
            case betaLicenseAgreement
            case betaAppReviewDetail
            case appInfos
            case appClips
            case appPricePoints
            case endUserLicenseAgreement
            case preOrder
            case appPriceSchedule
            case appAvailability
            case appAvailabilityV2
            case inAppPurchases
            case subscriptionGroups
            case gameCenterEnabledVersions
            case perfPowerMetrics
            case appCustomProductPages
            case inAppPurchasesV2
            case promotedPurchases
            case appEvents
            case reviewSubmissions
            case subscriptionGracePeriod
            case customerReviews
            case gameCenterDetail
            case appStoreVersionExperimentsV2
            case alternativeDistributionKey
            case analyticsReportRequests
            case marketplaceSearchDetail
        }

        public enum FieldsBuilds: String, CaseIterable, Codable, Sendable {
            case version
            case uploadedDate
            case expirationDate
            case expired
            case minOsVersion
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case iconAssetToken
            case processingState
            case buildAudienceType
            case usesNonExemptEncryption
            case preReleaseVersion
            case individualTesters
            case betaGroups
            case betaBuildLocalizations
            case appEncryptionDeclaration
            case betaAppReviewSubmission
            case app
            case buildBetaDetail
            case appStoreVersion
            case icons
            case buildBundles
            case perfPowerMetrics
            case diagnosticSignatures
        }

        public enum FieldsBetaTesters: String, CaseIterable, Codable, Sendable {
            case firstName
            case lastName
            case email
            case inviteType
            case state
            case apps
            case betaGroups
            case builds
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case app
            case builds
            case betaTesters
        }

        public func post(_ body: AppStoreAPI.BetaGroupCreateRequest) -> Request<AppStoreAPI.BetaGroupResponse> {
            Request(path: path, method: "POST", body: body, id: "betaGroups_createInstance")
        }
    }
}
