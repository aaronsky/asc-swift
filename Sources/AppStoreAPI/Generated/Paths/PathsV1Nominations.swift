// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1 {
    public var nominations: Nominations {
        Nominations(path: path + "/nominations")
    }

    public struct Nominations {
        /// Path: `/v1/nominations`
        public let path: String

        public func get(filterType: [FilterType]? = nil, filterState: [FilterState], filterRelatedApps: [String]? = nil, sort: [Sort]? = nil, fieldsNominations: [FieldsNominations]? = nil, limit: Int? = nil, include: [Include]? = nil, limitInAppEvents: Int? = nil, limitRelatedApps: Int? = nil, limitSupportedTerritories: Int? = nil) -> Request<AppStoreAPI.NominationsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterType, filterState, filterRelatedApps, sort, fieldsNominations, limit, include, limitInAppEvents, limitRelatedApps, limitSupportedTerritories), id: "nominations_getCollection")
        }

        private func makeGetQuery(_ filterType: [FilterType]?, _ filterState: [FilterState], _ filterRelatedApps: [String]?, _ sort: [Sort]?, _ fieldsNominations: [FieldsNominations]?, _ limit: Int?, _ include: [Include]?, _ limitInAppEvents: Int?, _ limitRelatedApps: Int?, _ limitSupportedTerritories: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterType, forKey: "filter[type]")
            encoder.encode(filterState, forKey: "filter[state]")
            encoder.encode(filterRelatedApps, forKey: "filter[relatedApps]")
            encoder.encode(sort, forKey: "sort")
            encoder.encode(fieldsNominations, forKey: "fields[nominations]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitInAppEvents, forKey: "limit[inAppEvents]")
            encoder.encode(limitRelatedApps, forKey: "limit[relatedApps]")
            encoder.encode(limitSupportedTerritories, forKey: "limit[supportedTerritories]")
            return encoder.items
        }

        public enum FilterType: String, CaseIterable, Codable, Sendable {
            case appLaunch = "APP_LAUNCH"
            case appEnhancements = "APP_ENHANCEMENTS"
            case newContent = "NEW_CONTENT"
        }

        public enum FilterState: String, CaseIterable, Codable, Sendable {
            case draft = "DRAFT"
            case submitted = "SUBMITTED"
            case archived = "ARCHIVED"
        }

        public enum Sort: String, CaseIterable, Codable, Sendable {
            case lastModifiedDate
            case minusLastModifiedDate = "-lastModifiedDate"
            case publishStartDate
            case minusPublishStartDate = "-publishStartDate"
            case publishEndDate
            case minusPublishEndDate = "-publishEndDate"
            case name
            case minusName = "-name"
            case type
            case minusType = "-type"
        }

        public enum FieldsNominations: String, CaseIterable, Codable, Sendable {
            case name
            case type
            case description
            case createdDate
            case lastModifiedDate
            case submittedDate
            case state
            case publishStartDate
            case publishEndDate
            case deviceFamilies
            case locales
            case supplementalMaterialsUris
            case hasInAppEvents
            case launchInSelectMarketsFirst
            case notes
            case preOrderEnabled
            case relatedApps
            case createdByActor
            case lastModifiedByActor
            case submittedByActor
            case inAppEvents
            case supportedTerritories
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case relatedApps
            case createdByActor
            case lastModifiedByActor
            case submittedByActor
            case inAppEvents
            case supportedTerritories
        }

        public func post(_ body: AppStoreAPI.NominationCreateRequest) -> Request<AppStoreAPI.NominationResponse> {
            Request(path: path, method: "POST", body: body, id: "nominations_createInstance")
        }
    }
}
