// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.AlternativeDistributionPackages.WithID {
    public var versions: Versions {
        Versions(path: path + "/versions")
    }

    public struct Versions {
        /// Path: `/v1/alternativeDistributionPackages/{id}/versions`
        public let path: String

        public func get(filterState: [FilterState]? = nil, fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions]? = nil, fieldsAlternativeDistributionPackageVariants: [FieldsAlternativeDistributionPackageVariants]? = nil, fieldsAlternativeDistributionPackageDeltas: [FieldsAlternativeDistributionPackageDeltas]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages]? = nil, limit: Int? = nil, include: [Include]? = nil, limitVariants: Int? = nil, limitDeltas: Int? = nil) -> Request<AppStoreAPI.AlternativeDistributionPackageVersionsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterState, fieldsAlternativeDistributionPackageVersions, fieldsAlternativeDistributionPackageVariants, fieldsAlternativeDistributionPackageDeltas, fieldsAlternativeDistributionPackages, limit, include, limitVariants, limitDeltas), id: "alternativeDistributionPackages_versions_getToManyRelated")
        }

        private func makeGetQuery(_ filterState: [FilterState]?, _ fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions]?, _ fieldsAlternativeDistributionPackageVariants: [FieldsAlternativeDistributionPackageVariants]?, _ fieldsAlternativeDistributionPackageDeltas: [FieldsAlternativeDistributionPackageDeltas]?, _ fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages]?, _ limit: Int?, _ include: [Include]?, _ limitVariants: Int?, _ limitDeltas: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterState, forKey: "filter[state]")
            encoder.encode(fieldsAlternativeDistributionPackageVersions, forKey: "fields[alternativeDistributionPackageVersions]")
            encoder.encode(fieldsAlternativeDistributionPackageVariants, forKey: "fields[alternativeDistributionPackageVariants]")
            encoder.encode(fieldsAlternativeDistributionPackageDeltas, forKey: "fields[alternativeDistributionPackageDeltas]")
            encoder.encode(fieldsAlternativeDistributionPackages, forKey: "fields[alternativeDistributionPackages]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitVariants, forKey: "limit[variants]")
            encoder.encode(limitDeltas, forKey: "limit[deltas]")
            return encoder.items
        }

        public enum FilterState: String, CaseIterable, Codable, Sendable {
            case completed = "COMPLETED"
            case replaced = "REPLACED"
        }

        public enum FieldsAlternativeDistributionPackageVersions: String, CaseIterable, Codable, Sendable {
            case url
            case urlExpirationDate
            case version
            case fileChecksum
            case state
            case variants
            case deltas
            case alternativeDistributionPackage
        }

        public enum FieldsAlternativeDistributionPackageVariants: String, CaseIterable, Codable, Sendable {
            case url
            case urlExpirationDate
            case alternativeDistributionKeyBlob
            case fileChecksum
        }

        public enum FieldsAlternativeDistributionPackageDeltas: String, CaseIterable, Codable, Sendable {
            case url
            case urlExpirationDate
            case alternativeDistributionKeyBlob
            case fileChecksum
        }

        public enum FieldsAlternativeDistributionPackages: String, CaseIterable, Codable, Sendable {
            case appStoreVersion
            case versions
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case variants
            case deltas
            case alternativeDistributionPackage
        }
    }
}
