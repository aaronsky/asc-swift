// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Apps.WithID {
    public var customerReviewSummarizations: CustomerReviewSummarizations {
        CustomerReviewSummarizations(path: path + "/customerReviewSummarizations")
    }

    public struct CustomerReviewSummarizations {
        /// Path: `/v1/apps/{id}/customerReviewSummarizations`
        public let path: String

        public func get(filterPlatform: [FilterPlatform], filterTerritory: [String]? = nil, fieldsCustomerReviewSummarizations: [FieldsCustomerReviewSummarizations]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, limit: Int? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.CustomerReviewSummarizationsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterPlatform, filterTerritory, fieldsCustomerReviewSummarizations, fieldsTerritories, limit, include), id: "apps_customerReviewSummarizations_getToManyRelated")
        }

        private func makeGetQuery(_ filterPlatform: [FilterPlatform], _ filterTerritory: [String]?, _ fieldsCustomerReviewSummarizations: [FieldsCustomerReviewSummarizations]?, _ fieldsTerritories: [FieldsTerritories]?, _ limit: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterPlatform, forKey: "filter[platform]")
            encoder.encode(filterTerritory, forKey: "filter[territory]")
            encoder.encode(fieldsCustomerReviewSummarizations, forKey: "fields[customerReviewSummarizations]")
            encoder.encode(fieldsTerritories, forKey: "fields[territories]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FilterPlatform: String, CaseIterable, Codable, Sendable {
            case iOS = "IOS"
            case macOS = "MAC_OS"
            case tvOS = "TV_OS"
            case visionOS = "VISION_OS"
        }

        public enum FieldsCustomerReviewSummarizations: String, CaseIterable, Codable, Sendable {
            case createdDate
            case locale
            case platform
            case text
            case territory
        }

        public enum FieldsTerritories: String, CaseIterable, Codable, Sendable {
            case currency
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case territory
        }
    }
}
