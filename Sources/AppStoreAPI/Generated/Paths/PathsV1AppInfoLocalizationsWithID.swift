// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.AppInfoLocalizations {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/appInfoLocalizations/{id}`
        public let path: String

        public func get(fieldsAppInfoLocalizations: [FieldsAppInfoLocalizations]? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.AppInfoLocalizationResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsAppInfoLocalizations, include), id: "appInfoLocalizations_getInstance")
        }

        private func makeGetQuery(_ fieldsAppInfoLocalizations: [FieldsAppInfoLocalizations]?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsAppInfoLocalizations, forKey: "fields[appInfoLocalizations]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsAppInfoLocalizations: String, CaseIterable, Codable, Sendable {
            case locale
            case name
            case subtitle
            case privacyPolicyURL = "privacyPolicyUrl"
            case privacyChoicesURL = "privacyChoicesUrl"
            case privacyPolicyText
            case appInfo
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case appInfo
        }

        public func patch(_ body: AppStoreAPI.AppInfoLocalizationUpdateRequest) -> Request<AppStoreAPI.AppInfoLocalizationResponse> {
            Request(path: path, method: "PATCH", body: body, id: "appInfoLocalizations_updateInstance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "appInfoLocalizations_deleteInstance")
        }
    }
}
