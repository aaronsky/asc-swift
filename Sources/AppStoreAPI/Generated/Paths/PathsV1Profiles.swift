// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1 {
    public var profiles: Profiles {
        Profiles(path: path + "/profiles")
    }

    public struct Profiles {
        /// Path: `/v1/profiles`
        public let path: String

        public func get(filterName: [String]? = nil, filterProfileType: [FilterProfileType]? = nil, filterProfileState: [FilterProfileState]? = nil, filterID: [String]? = nil, sort: [Sort]? = nil, fieldsProfiles: [FieldsProfiles]? = nil, fieldsBundleIDs: [FieldsBundleIDs]? = nil, fieldsDevices: [FieldsDevices]? = nil, fieldsCertificates: [FieldsCertificates]? = nil, limit: Int? = nil, include: [Include]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil) -> Request<AppStoreAPI.ProfilesResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterName, filterProfileType, filterProfileState, filterID, sort, fieldsProfiles, fieldsBundleIDs, fieldsDevices, fieldsCertificates, limit, include, limitCertificates, limitDevices), id: "profiles_getCollection")
        }

        private func makeGetQuery(_ filterName: [String]?, _ filterProfileType: [FilterProfileType]?, _ filterProfileState: [FilterProfileState]?, _ filterID: [String]?, _ sort: [Sort]?, _ fieldsProfiles: [FieldsProfiles]?, _ fieldsBundleIDs: [FieldsBundleIDs]?, _ fieldsDevices: [FieldsDevices]?, _ fieldsCertificates: [FieldsCertificates]?, _ limit: Int?, _ include: [Include]?, _ limitCertificates: Int?, _ limitDevices: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterName, forKey: "filter[name]")
            encoder.encode(filterProfileType, forKey: "filter[profileType]")
            encoder.encode(filterProfileState, forKey: "filter[profileState]")
            encoder.encode(filterID, forKey: "filter[id]")
            encoder.encode(sort, forKey: "sort")
            encoder.encode(fieldsProfiles, forKey: "fields[profiles]")
            encoder.encode(fieldsBundleIDs, forKey: "fields[bundleIds]")
            encoder.encode(fieldsDevices, forKey: "fields[devices]")
            encoder.encode(fieldsCertificates, forKey: "fields[certificates]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitCertificates, forKey: "limit[certificates]")
            encoder.encode(limitDevices, forKey: "limit[devices]")
            return encoder.items
        }

        public enum FilterProfileType: String, CaseIterable, Codable, Sendable {
            case iOSAppDevelopment = "IOS_APP_DEVELOPMENT"
            case iOSAppStore = "IOS_APP_STORE"
            case iOSAppAdhoc = "IOS_APP_ADHOC"
            case iOSAppInhouse = "IOS_APP_INHOUSE"
            case macAppDevelopment = "MAC_APP_DEVELOPMENT"
            case macAppStore = "MAC_APP_STORE"
            case macAppDirect = "MAC_APP_DIRECT"
            case tvOSAppDevelopment = "TVOS_APP_DEVELOPMENT"
            case tvOSAppStore = "TVOS_APP_STORE"
            case tvOSAppAdhoc = "TVOS_APP_ADHOC"
            case tvOSAppInhouse = "TVOS_APP_INHOUSE"
            case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
            case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
            case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
        }

        public enum FilterProfileState: String, CaseIterable, Codable, Sendable {
            case active = "ACTIVE"
            case invalid = "INVALID"
        }

        public enum Sort: String, CaseIterable, Codable, Sendable {
            case name
            case minusName = "-name"
            case profileType
            case minusProfileType = "-profileType"
            case profileState
            case minusProfileState = "-profileState"
            case id
            case minusID = "-id"
        }

        public enum FieldsProfiles: String, CaseIterable, Codable, Sendable {
            case name
            case platform
            case profileType
            case profileState
            case profileContent
            case uuid
            case createdDate
            case expirationDate
            case bundleID = "bundleId"
            case devices
            case certificates
        }

        public enum FieldsBundleIDs: String, CaseIterable, Codable, Sendable {
            case name
            case platform
            case identifier
            case seedID = "seedId"
            case profiles
            case bundleIDCapabilities = "bundleIdCapabilities"
            case app
        }

        public enum FieldsDevices: String, CaseIterable, Codable, Sendable {
            case name
            case platform
            case udid
            case deviceClass
            case status
            case model
            case addedDate
        }

        public enum FieldsCertificates: String, CaseIterable, Codable, Sendable {
            case name
            case certificateType
            case displayName
            case serialNumber
            case platform
            case expirationDate
            case certificateContent
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case bundleID = "bundleId"
            case devices
            case certificates
        }

        public func post(_ body: AppStoreAPI.ProfileCreateRequest) -> Request<AppStoreAPI.ProfileResponse> {
            Request(path: path, method: "POST", body: body, id: "profiles_createInstance")
        }
    }
}
