// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.GameCenterChallenges {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/gameCenterChallenges/{id}`
        public let path: String

        public func get(fieldsGameCenterChallenges: [FieldsGameCenterChallenges]? = nil, fieldsGameCenterChallengeVersions: [FieldsGameCenterChallengeVersions]? = nil, include: [Include]? = nil, limitVersions: Int? = nil) -> Request<AppStoreAPI.GameCenterChallengeResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsGameCenterChallenges, fieldsGameCenterChallengeVersions, include, limitVersions), id: "gameCenterChallenges_getInstance")
        }

        private func makeGetQuery(_ fieldsGameCenterChallenges: [FieldsGameCenterChallenges]?, _ fieldsGameCenterChallengeVersions: [FieldsGameCenterChallengeVersions]?, _ include: [Include]?, _ limitVersions: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsGameCenterChallenges, forKey: "fields[gameCenterChallenges]")
            encoder.encode(fieldsGameCenterChallengeVersions, forKey: "fields[gameCenterChallengeVersions]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitVersions, forKey: "limit[versions]")
            return encoder.items
        }

        public enum FieldsGameCenterChallenges: String, CaseIterable, Codable, Sendable {
            case referenceName
            case vendorIdentifier
            case allowedDurations
            case archived
            case challengeType
            case repeatable
            case gameCenterDetail
            case gameCenterGroup
            case versions
            case leaderboard
        }

        public enum FieldsGameCenterChallengeVersions: String, CaseIterable, Codable, Sendable {
            case version
            case state
            case challenge
            case localizations
            case releases
            case defaultImage
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case gameCenterDetail
            case gameCenterGroup
            case versions
            case leaderboard
        }

        public func patch(_ body: AppStoreAPI.GameCenterChallengeUpdateRequest) -> Request<AppStoreAPI.GameCenterChallengeResponse> {
            Request(path: path, method: "PATCH", body: body, id: "gameCenterChallenges_updateInstance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "gameCenterChallenges_deleteInstance")
        }
    }
}
