// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.AppStoreReviewAttachments {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/appStoreReviewAttachments/{id}`
        public let path: String

        public func get(fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments]? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.AppStoreReviewAttachmentResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsAppStoreReviewAttachments, include), id: "appStoreReviewAttachments_getInstance")
        }

        private func makeGetQuery(_ fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments]?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsAppStoreReviewAttachments, forKey: "fields[appStoreReviewAttachments]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsAppStoreReviewAttachments: String, CaseIterable, Codable, Sendable {
            case fileSize
            case fileName
            case sourceFileChecksum
            case uploadOperations
            case assetDeliveryState
            case uploaded
            case appStoreReviewDetail
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case appStoreReviewDetail
        }

        public func patch(_ body: AppStoreAPI.AppStoreReviewAttachmentUpdateRequest) -> Request<AppStoreAPI.AppStoreReviewAttachmentResponse> {
            Request(path: path, method: "PATCH", body: body, id: "appStoreReviewAttachments_updateInstance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "appStoreReviewAttachments_deleteInstance")
        }
    }
}
