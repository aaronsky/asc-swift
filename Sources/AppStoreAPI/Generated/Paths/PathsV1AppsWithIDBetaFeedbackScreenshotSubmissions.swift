// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Apps.WithID {
    public var betaFeedbackScreenshotSubmissions: BetaFeedbackScreenshotSubmissions {
        BetaFeedbackScreenshotSubmissions(path: path + "/betaFeedbackScreenshotSubmissions")
    }

    public struct BetaFeedbackScreenshotSubmissions {
        /// Path: `/v1/apps/{id}/betaFeedbackScreenshotSubmissions`
        public let path: String

        public func get(filterDeviceModel: [String]? = nil, filterOsVersion: [String]? = nil, filterAppPlatform: [FilterAppPlatform]? = nil, filterDevicePlatform: [FilterDevicePlatform]? = nil, filterBuild: [String]? = nil, filterBuildPreReleaseVersion: [String]? = nil, filterTester: [String]? = nil, sort: [Sort]? = nil, fieldsBetaFeedbackScreenshotSubmissions: [FieldsBetaFeedbackScreenshotSubmissions]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, fieldsBetaTesters: [FieldsBetaTesters]? = nil, limit: Int? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.BetaFeedbackScreenshotSubmissionsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterDeviceModel, filterOsVersion, filterAppPlatform, filterDevicePlatform, filterBuild, filterBuildPreReleaseVersion, filterTester, sort, fieldsBetaFeedbackScreenshotSubmissions, fieldsBuilds, fieldsBetaTesters, limit, include), id: "apps_betaFeedbackScreenshotSubmissions_getToManyRelated")
        }

        private func makeGetQuery(_ filterDeviceModel: [String]?, _ filterOsVersion: [String]?, _ filterAppPlatform: [FilterAppPlatform]?, _ filterDevicePlatform: [FilterDevicePlatform]?, _ filterBuild: [String]?, _ filterBuildPreReleaseVersion: [String]?, _ filterTester: [String]?, _ sort: [Sort]?, _ fieldsBetaFeedbackScreenshotSubmissions: [FieldsBetaFeedbackScreenshotSubmissions]?, _ fieldsBuilds: [FieldsBuilds]?, _ fieldsBetaTesters: [FieldsBetaTesters]?, _ limit: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterDeviceModel, forKey: "filter[deviceModel]")
            encoder.encode(filterOsVersion, forKey: "filter[osVersion]")
            encoder.encode(filterAppPlatform, forKey: "filter[appPlatform]")
            encoder.encode(filterDevicePlatform, forKey: "filter[devicePlatform]")
            encoder.encode(filterBuild, forKey: "filter[build]")
            encoder.encode(filterBuildPreReleaseVersion, forKey: "filter[build.preReleaseVersion]")
            encoder.encode(filterTester, forKey: "filter[tester]")
            encoder.encode(sort, forKey: "sort")
            encoder.encode(fieldsBetaFeedbackScreenshotSubmissions, forKey: "fields[betaFeedbackScreenshotSubmissions]")
            encoder.encode(fieldsBuilds, forKey: "fields[builds]")
            encoder.encode(fieldsBetaTesters, forKey: "fields[betaTesters]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FilterAppPlatform: String, CaseIterable, Codable, Sendable {
            case iOS = "IOS"
            case macOS = "MAC_OS"
            case tvOS = "TV_OS"
            case visionOS = "VISION_OS"
        }

        public enum FilterDevicePlatform: String, CaseIterable, Codable, Sendable {
            case iOS = "IOS"
            case macOS = "MAC_OS"
            case tvOS = "TV_OS"
            case visionOS = "VISION_OS"
        }

        public enum Sort: String, CaseIterable, Codable, Sendable {
            case createdDate
            case minusCreatedDate = "-createdDate"
        }

        public enum FieldsBetaFeedbackScreenshotSubmissions: String, CaseIterable, Codable, Sendable {
            case createdDate
            case comment
            case email
            case deviceModel
            case osVersion
            case locale
            case timeZone
            case architecture
            case connectionType
            case pairedAppleWatch
            case appUptimeInMilliseconds
            case diskBytesAvailable
            case diskBytesTotal
            case batteryPercentage
            case screenWidthInPoints
            case screenHeightInPoints
            case appPlatform
            case devicePlatform
            case deviceFamily
            case buildBundleID = "buildBundleId"
            case screenshots
            case build
            case tester
        }

        public enum FieldsBuilds: String, CaseIterable, Codable, Sendable {
            case version
            case uploadedDate
            case expirationDate
            case expired
            case minOsVersion
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case computedMinVisionOsVersion
            case iconAssetToken
            case processingState
            case buildAudienceType
            case usesNonExemptEncryption
            case preReleaseVersion
            case individualTesters
            case betaGroups
            case betaBuildLocalizations
            case appEncryptionDeclaration
            case betaAppReviewSubmission
            case app
            case buildBetaDetail
            case appStoreVersion
            case icons
            case buildBundles
            case perfPowerMetrics
            case diagnosticSignatures
        }

        public enum FieldsBetaTesters: String, CaseIterable, Codable, Sendable {
            case firstName
            case lastName
            case email
            case inviteType
            case state
            case apps
            case betaGroups
            case builds
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case build
            case tester
        }
    }
}
