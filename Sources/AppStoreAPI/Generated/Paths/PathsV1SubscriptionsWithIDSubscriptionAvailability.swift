// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Subscriptions.WithID {
    public var subscriptionAvailability: SubscriptionAvailability {
        SubscriptionAvailability(path: path + "/subscriptionAvailability")
    }

    public struct SubscriptionAvailability {
        /// Path: `/v1/subscriptions/{id}/subscriptionAvailability`
        public let path: String

        public func get(fieldsSubscriptionAvailabilities: [FieldsSubscriptionAvailabilities]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, include: [Include]? = nil, limitAvailableTerritories: Int? = nil) -> Request<AppStoreAPI.SubscriptionAvailabilityResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsSubscriptionAvailabilities, fieldsTerritories, include, limitAvailableTerritories), id: "subscriptions_subscriptionAvailability_getToOneRelated")
        }

        private func makeGetQuery(_ fieldsSubscriptionAvailabilities: [FieldsSubscriptionAvailabilities]?, _ fieldsTerritories: [FieldsTerritories]?, _ include: [Include]?, _ limitAvailableTerritories: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsSubscriptionAvailabilities, forKey: "fields[subscriptionAvailabilities]")
            encoder.encode(fieldsTerritories, forKey: "fields[territories]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitAvailableTerritories, forKey: "limit[availableTerritories]")
            return encoder.items
        }

        public enum FieldsSubscriptionAvailabilities: String, CaseIterable, Codable, Sendable {
            case availableInNewTerritories
            case availableTerritories
        }

        public enum FieldsTerritories: String, CaseIterable, Codable, Sendable {
            case currency
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case availableTerritories
        }
    }
}
