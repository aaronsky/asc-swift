// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Profiles {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/profiles/{id}`
        public let path: String

        public func get(fieldsProfiles: [FieldsProfiles]? = nil, fieldsBundleIDs: [FieldsBundleIDs]? = nil, fieldsDevices: [FieldsDevices]? = nil, fieldsCertificates: [FieldsCertificates]? = nil, include: [Include]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil) -> Request<AppStoreAPI.ProfileResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsProfiles, fieldsBundleIDs, fieldsDevices, fieldsCertificates, include, limitCertificates, limitDevices), id: "profiles_getInstance")
        }

        private func makeGetQuery(_ fieldsProfiles: [FieldsProfiles]?, _ fieldsBundleIDs: [FieldsBundleIDs]?, _ fieldsDevices: [FieldsDevices]?, _ fieldsCertificates: [FieldsCertificates]?, _ include: [Include]?, _ limitCertificates: Int?, _ limitDevices: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsProfiles, forKey: "fields[profiles]")
            encoder.encode(fieldsBundleIDs, forKey: "fields[bundleIds]")
            encoder.encode(fieldsDevices, forKey: "fields[devices]")
            encoder.encode(fieldsCertificates, forKey: "fields[certificates]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitCertificates, forKey: "limit[certificates]")
            encoder.encode(limitDevices, forKey: "limit[devices]")
            return encoder.items
        }

        public enum FieldsProfiles: String, CaseIterable, Codable, Sendable {
            case name
            case platform
            case profileType
            case profileState
            case profileContent
            case uuid
            case createdDate
            case expirationDate
            case bundleID = "bundleId"
            case devices
            case certificates
        }

        public enum FieldsBundleIDs: String, CaseIterable, Codable, Sendable {
            case name
            case platform
            case identifier
            case seedID = "seedId"
            case profiles
            case bundleIDCapabilities = "bundleIdCapabilities"
            case app
        }

        public enum FieldsDevices: String, CaseIterable, Codable, Sendable {
            case name
            case platform
            case udid
            case deviceClass
            case status
            case model
            case addedDate
        }

        public enum FieldsCertificates: String, CaseIterable, Codable, Sendable {
            case name
            case certificateType
            case displayName
            case serialNumber
            case platform
            case expirationDate
            case certificateContent
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case bundleID = "bundleId"
            case devices
            case certificates
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "profiles_deleteInstance")
        }
    }
}
