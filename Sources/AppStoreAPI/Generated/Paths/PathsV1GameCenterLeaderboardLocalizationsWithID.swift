// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1.GameCenterLeaderboardLocalizations {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/gameCenterLeaderboardLocalizations/{id}`
        public let path: String

        public func get(fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations]? = nil, include: [Include]? = nil, fieldsGameCenterLeaderboardImages: [FieldsGameCenterLeaderboardImages]? = nil) -> Request<AppStoreAPI.GameCenterLeaderboardLocalizationResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsGameCenterLeaderboardLocalizations, include, fieldsGameCenterLeaderboardImages), id: "gameCenterLeaderboardLocalizations-get_instance")
        }

        private func makeGetQuery(_ fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations]?, _ include: [Include]?, _ fieldsGameCenterLeaderboardImages: [FieldsGameCenterLeaderboardImages]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsGameCenterLeaderboardLocalizations, forKey: "fields[gameCenterLeaderboardLocalizations]")
            encoder.encode(include, forKey: "include")
            encoder.encode(fieldsGameCenterLeaderboardImages, forKey: "fields[gameCenterLeaderboardImages]")
            return encoder.items
        }

        public enum FieldsGameCenterLeaderboardLocalizations: String, CaseIterable, Codable, Sendable {
            case formatterOverride
            case formatterSuffix
            case formatterSuffixSingular
            case gameCenterLeaderboard
            case gameCenterLeaderboardImage
            case locale
            case name
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case gameCenterLeaderboard
            case gameCenterLeaderboardImage
        }

        public enum FieldsGameCenterLeaderboardImages: String, CaseIterable, Codable, Sendable {
            case assetDeliveryState
            case fileName
            case fileSize
            case gameCenterLeaderboardLocalization
            case imageAsset
            case uploadOperations
            case uploaded
        }

        public func patch(_ body: AppStoreAPI.GameCenterLeaderboardLocalizationUpdateRequest) -> Request<AppStoreAPI.GameCenterLeaderboardLocalizationResponse> {
            Request(path: path, method: "PATCH", body: body, id: "gameCenterLeaderboardLocalizations-update_instance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "gameCenterLeaderboardLocalizations-delete_instance")
        }
    }
}
