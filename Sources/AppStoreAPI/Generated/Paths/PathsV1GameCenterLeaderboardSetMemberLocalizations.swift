// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1 {
    public var gameCenterLeaderboardSetMemberLocalizations: GameCenterLeaderboardSetMemberLocalizations {
        GameCenterLeaderboardSetMemberLocalizations(path: path + "/gameCenterLeaderboardSetMemberLocalizations")
    }

    public struct GameCenterLeaderboardSetMemberLocalizations {
        /// Path: `/v1/gameCenterLeaderboardSetMemberLocalizations`
        public let path: String

        public func get(filterGameCenterLeaderboardSet: [String], filterGameCenterLeaderboard: [String], fieldsGameCenterLeaderboardSetMemberLocalizations: [FieldsGameCenterLeaderboardSetMemberLocalizations]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]? = nil, limit: Int? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.GameCenterLeaderboardSetMemberLocalizationsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterGameCenterLeaderboardSet, filterGameCenterLeaderboard, fieldsGameCenterLeaderboardSetMemberLocalizations, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboards, limit, include), id: "gameCenterLeaderboardSetMemberLocalizations_getCollection")
        }

        private func makeGetQuery(_ filterGameCenterLeaderboardSet: [String], _ filterGameCenterLeaderboard: [String], _ fieldsGameCenterLeaderboardSetMemberLocalizations: [FieldsGameCenterLeaderboardSetMemberLocalizations]?, _ fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]?, _ fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]?, _ limit: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterGameCenterLeaderboardSet, forKey: "filter[gameCenterLeaderboardSet]")
            encoder.encode(filterGameCenterLeaderboard, forKey: "filter[gameCenterLeaderboard]")
            encoder.encode(fieldsGameCenterLeaderboardSetMemberLocalizations, forKey: "fields[gameCenterLeaderboardSetMemberLocalizations]")
            encoder.encode(fieldsGameCenterLeaderboardSets, forKey: "fields[gameCenterLeaderboardSets]")
            encoder.encode(fieldsGameCenterLeaderboards, forKey: "fields[gameCenterLeaderboards]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsGameCenterLeaderboardSetMemberLocalizations: String, CaseIterable, Codable, Sendable {
            case name
            case locale
            case gameCenterLeaderboardSet
            case gameCenterLeaderboard
        }

        public enum FieldsGameCenterLeaderboardSets: String, CaseIterable, Codable, Sendable {
            case referenceName
            case vendorIdentifier
            case gameCenterDetail
            case gameCenterGroup
            case groupLeaderboardSet
            case localizations
            case gameCenterLeaderboards
            case releases
        }

        public enum FieldsGameCenterLeaderboards: String, CaseIterable, Codable, Sendable {
            case defaultFormatter
            case referenceName
            case vendorIdentifier
            case submissionType
            case scoreSortType
            case scoreRangeStart
            case scoreRangeEnd
            case recurrenceStartDate
            case recurrenceDuration
            case recurrenceRule
            case archived
            case activityProperties
            case visibility
            case gameCenterDetail
            case gameCenterGroup
            case groupLeaderboard
            case gameCenterLeaderboardSets
            case localizations
            case releases
            case activity
            case challenge
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case gameCenterLeaderboardSet
            case gameCenterLeaderboard
        }

        public func post(_ body: AppStoreAPI.GameCenterLeaderboardSetMemberLocalizationCreateRequest) -> Request<AppStoreAPI.GameCenterLeaderboardSetMemberLocalizationResponse> {
            Request(path: path, method: "POST", body: body, id: "gameCenterLeaderboardSetMemberLocalizations_createInstance")
        }
    }
}
