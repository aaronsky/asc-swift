// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Webhooks.WithID {
    public var deliveries: Deliveries {
        Deliveries(path: path + "/deliveries")
    }

    public struct Deliveries {
        /// Path: `/v1/webhooks/{id}/deliveries`
        public let path: String

        public func get(filterDeliveryState: [FilterDeliveryState]? = nil, filterCreatedDateGreaterThanOrEqualTo: [String]? = nil, filterCreatedDateLessThan: [String]? = nil, fieldsWebhookDeliveries: [FieldsWebhookDeliveries]? = nil, fieldsWebhookEvents: [FieldsWebhookEvents]? = nil, limit: Int? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.WebhookDeliveriesResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterDeliveryState, filterCreatedDateGreaterThanOrEqualTo, filterCreatedDateLessThan, fieldsWebhookDeliveries, fieldsWebhookEvents, limit, include), id: "webhooks_deliveries_getToManyRelated")
        }

        private func makeGetQuery(_ filterDeliveryState: [FilterDeliveryState]?, _ filterCreatedDateGreaterThanOrEqualTo: [String]?, _ filterCreatedDateLessThan: [String]?, _ fieldsWebhookDeliveries: [FieldsWebhookDeliveries]?, _ fieldsWebhookEvents: [FieldsWebhookEvents]?, _ limit: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterDeliveryState, forKey: "filter[deliveryState]")
            encoder.encode(filterCreatedDateGreaterThanOrEqualTo, forKey: "filter[createdDateGreaterThanOrEqualTo]")
            encoder.encode(filterCreatedDateLessThan, forKey: "filter[createdDateLessThan]")
            encoder.encode(fieldsWebhookDeliveries, forKey: "fields[webhookDeliveries]")
            encoder.encode(fieldsWebhookEvents, forKey: "fields[webhookEvents]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FilterDeliveryState: String, CaseIterable, Codable, Sendable {
            case succeeded = "SUCCEEDED"
            case failed = "FAILED"
            case pending = "PENDING"
        }

        public enum FieldsWebhookDeliveries: String, CaseIterable, Codable, Sendable {
            case createdDate
            case deliveryState
            case errorMessage
            case redelivery
            case sentDate
            case request
            case response
            case event
        }

        public enum FieldsWebhookEvents: String, CaseIterable, Codable, Sendable {
            case eventType
            case payload
            case ping
            case createdDate
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case event
        }
    }
}
