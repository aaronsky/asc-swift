// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.CiBuildRuns {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/ciBuildRuns/{id}`
        public let path: String

        public func get(fieldsCiBuildRuns: [FieldsCiBuildRuns]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, include: [Include]? = nil, limitBuilds: Int? = nil) -> Request<AppStoreAPI.CiBuildRunResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsCiBuildRuns, fieldsBuilds, include, limitBuilds), id: "ciBuildRuns_getInstance")
        }

        private func makeGetQuery(_ fieldsCiBuildRuns: [FieldsCiBuildRuns]?, _ fieldsBuilds: [FieldsBuilds]?, _ include: [Include]?, _ limitBuilds: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsCiBuildRuns, forKey: "fields[ciBuildRuns]")
            encoder.encode(fieldsBuilds, forKey: "fields[builds]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitBuilds, forKey: "limit[builds]")
            return encoder.items
        }

        public enum FieldsCiBuildRuns: String, CaseIterable, Codable, Sendable {
            case number
            case createdDate
            case startedDate
            case finishedDate
            case sourceCommit
            case destinationCommit
            case isPullRequestBuild
            case issueCounts
            case executionProgress
            case completionStatus
            case startReason
            case cancelReason
            case builds
            case workflow
            case product
            case sourceBranchOrTag
            case destinationBranch
            case actions
            case pullRequest
        }

        public enum FieldsBuilds: String, CaseIterable, Codable, Sendable {
            case version
            case uploadedDate
            case expirationDate
            case expired
            case minOsVersion
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case iconAssetToken
            case processingState
            case buildAudienceType
            case usesNonExemptEncryption
            case preReleaseVersion
            case individualTesters
            case betaGroups
            case betaBuildLocalizations
            case appEncryptionDeclaration
            case betaAppReviewSubmission
            case app
            case buildBetaDetail
            case appStoreVersion
            case icons
            case buildBundles
            case perfPowerMetrics
            case diagnosticSignatures
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case builds
            case workflow
            case product
            case sourceBranchOrTag
            case destinationBranch
            case pullRequest
        }
    }
}
