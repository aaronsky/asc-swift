// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.InAppPurchaseImages {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/inAppPurchaseImages/{id}`
        public let path: String

        public func get(fieldsInAppPurchaseImages: [FieldsInAppPurchaseImages]? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.InAppPurchaseImageResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsInAppPurchaseImages, include), id: "inAppPurchaseImages_getInstance")
        }

        private func makeGetQuery(_ fieldsInAppPurchaseImages: [FieldsInAppPurchaseImages]?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsInAppPurchaseImages, forKey: "fields[inAppPurchaseImages]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsInAppPurchaseImages: String, CaseIterable, Codable, Sendable {
            case fileSize
            case fileName
            case sourceFileChecksum
            case assetToken
            case imageAsset
            case uploadOperations
            case state
            case inAppPurchase
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case inAppPurchase
        }

        public func patch(_ body: AppStoreAPI.InAppPurchaseImageUpdateRequest) -> Request<AppStoreAPI.InAppPurchaseImageResponse> {
            Request(path: path, method: "PATCH", body: body, id: "inAppPurchaseImages_updateInstance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "inAppPurchaseImages_deleteInstance")
        }
    }
}
