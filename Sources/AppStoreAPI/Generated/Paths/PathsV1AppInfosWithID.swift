// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.AppInfos {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/appInfos/{id}`
        public let path: String

        public func get(fieldsAppInfos: [FieldsAppInfos]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations]? = nil, fieldsAppInfoLocalizations: [FieldsAppInfoLocalizations]? = nil, fieldsAppCategories: [FieldsAppCategories]? = nil, include: [Include]? = nil, limitAppInfoLocalizations: Int? = nil) -> Request<AppStoreAPI.AppInfoResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsAppInfos, fieldsAgeRatingDeclarations, fieldsAppInfoLocalizations, fieldsAppCategories, include, limitAppInfoLocalizations), id: "appInfos_getInstance")
        }

        private func makeGetQuery(_ fieldsAppInfos: [FieldsAppInfos]?, _ fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations]?, _ fieldsAppInfoLocalizations: [FieldsAppInfoLocalizations]?, _ fieldsAppCategories: [FieldsAppCategories]?, _ include: [Include]?, _ limitAppInfoLocalizations: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsAppInfos, forKey: "fields[appInfos]")
            encoder.encode(fieldsAgeRatingDeclarations, forKey: "fields[ageRatingDeclarations]")
            encoder.encode(fieldsAppInfoLocalizations, forKey: "fields[appInfoLocalizations]")
            encoder.encode(fieldsAppCategories, forKey: "fields[appCategories]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitAppInfoLocalizations, forKey: "limit[appInfoLocalizations]")
            return encoder.items
        }

        public enum FieldsAppInfos: String, CaseIterable, Codable, Sendable {
            case appStoreState
            case state
            case appStoreAgeRating
            case australiaAgeRating
            case brazilAgeRating
            case brazilAgeRatingV2
            case koreaAgeRating
            case kidsAgeBand
            case app
            case ageRatingDeclaration
            case appInfoLocalizations
            case primaryCategory
            case primarySubcategoryOne
            case primarySubcategoryTwo
            case secondaryCategory
            case secondarySubcategoryOne
            case secondarySubcategoryTwo
        }

        public enum FieldsAgeRatingDeclarations: String, CaseIterable, Codable, Sendable {
            case alcoholTobaccoOrDrugUseOrReferences
            case contests
            case gamblingAndContests
            case gambling
            case gamblingSimulated
            case kidsAgeBand
            case lootBox
            case medicalOrTreatmentInformation
            case profanityOrCrudeHumor
            case sexualContentGraphicAndNudity
            case sexualContentOrNudity
            case horrorOrFearThemes
            case matureOrSuggestiveThemes
            case unrestrictedWebAccess
            case violenceCartoonOrFantasy
            case violenceRealisticProlongedGraphicOrSadistic
            case violenceRealistic
            case ageRatingOverride
            case koreaAgeRatingOverride
            case seventeenPlus
        }

        public enum FieldsAppInfoLocalizations: String, CaseIterable, Codable, Sendable {
            case locale
            case name
            case subtitle
            case privacyPolicyURL = "privacyPolicyUrl"
            case privacyChoicesURL = "privacyChoicesUrl"
            case privacyPolicyText
            case appInfo
        }

        public enum FieldsAppCategories: String, CaseIterable, Codable, Sendable {
            case platforms
            case subcategories
            case parent
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case app
            case ageRatingDeclaration
            case appInfoLocalizations
            case primaryCategory
            case primarySubcategoryOne
            case primarySubcategoryTwo
            case secondaryCategory
            case secondarySubcategoryOne
            case secondarySubcategoryTwo
        }

        public func patch(_ body: AppStoreAPI.AppInfoUpdateRequest) -> Request<AppStoreAPI.AppInfoResponse> {
            Request(path: path, method: "PATCH", body: body, id: "appInfos_updateInstance")
        }
    }
}
