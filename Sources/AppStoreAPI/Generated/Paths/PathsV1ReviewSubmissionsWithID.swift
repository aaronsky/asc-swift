// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.ReviewSubmissions {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/reviewSubmissions/{id}`
        public let path: String

        public func get(fieldsReviewSubmissions: [FieldsReviewSubmissions]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]? = nil, include: [Include]? = nil, limitItems: Int? = nil) -> Request<AppStoreAPI.ReviewSubmissionResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsReviewSubmissions, fieldsReviewSubmissionItems, include, limitItems), id: "reviewSubmissions_getInstance")
        }

        private func makeGetQuery(_ fieldsReviewSubmissions: [FieldsReviewSubmissions]?, _ fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]?, _ include: [Include]?, _ limitItems: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsReviewSubmissions, forKey: "fields[reviewSubmissions]")
            encoder.encode(fieldsReviewSubmissionItems, forKey: "fields[reviewSubmissionItems]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitItems, forKey: "limit[items]")
            return encoder.items
        }

        public enum FieldsReviewSubmissions: String, CaseIterable, Codable, Sendable {
            case platform
            case submittedDate
            case state
            case app
            case items
            case appStoreVersionForReview
            case submittedByActor
            case lastUpdatedByActor
        }

        public enum FieldsReviewSubmissionItems: String, CaseIterable, Codable, Sendable {
            case state
            case appStoreVersion
            case appCustomProductPageVersion
            case appStoreVersionExperiment
            case appStoreVersionExperimentV2
            case appEvent
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case app
            case items
            case appStoreVersionForReview
            case submittedByActor
            case lastUpdatedByActor
        }

        public func patch(_ body: AppStoreAPI.ReviewSubmissionUpdateRequest) -> Request<AppStoreAPI.ReviewSubmissionResponse> {
            Request(path: path, method: "PATCH", body: body, id: "reviewSubmissions_updateInstance")
        }
    }
}
