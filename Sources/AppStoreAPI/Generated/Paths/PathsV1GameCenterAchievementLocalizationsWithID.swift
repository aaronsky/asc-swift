// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.GameCenterAchievementLocalizations {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/gameCenterAchievementLocalizations/{id}`
        public let path: String

        public func get(fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]? = nil, include: [Include]? = nil, fieldsGameCenterAchievementImages: [FieldsGameCenterAchievementImages]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements]? = nil) -> Request<AppStoreAPI.GameCenterAchievementLocalizationResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsGameCenterAchievementLocalizations, include, fieldsGameCenterAchievementImages, fieldsGameCenterAchievements), id: "gameCenterAchievementLocalizations-get_instance")
        }

        private func makeGetQuery(_ fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]?, _ include: [Include]?, _ fieldsGameCenterAchievementImages: [FieldsGameCenterAchievementImages]?, _ fieldsGameCenterAchievements: [FieldsGameCenterAchievements]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsGameCenterAchievementLocalizations, forKey: "fields[gameCenterAchievementLocalizations]")
            encoder.encode(include, forKey: "include")
            encoder.encode(fieldsGameCenterAchievementImages, forKey: "fields[gameCenterAchievementImages]")
            encoder.encode(fieldsGameCenterAchievements, forKey: "fields[gameCenterAchievements]")
            return encoder.items
        }

        public enum FieldsGameCenterAchievementLocalizations: String, CaseIterable, Codable, Sendable {
            case afterEarnedDescription
            case beforeEarnedDescription
            case gameCenterAchievement
            case gameCenterAchievementImage
            case locale
            case name
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case gameCenterAchievement
            case gameCenterAchievementImage
        }

        public enum FieldsGameCenterAchievementImages: String, CaseIterable, Codable, Sendable {
            case assetDeliveryState
            case fileName
            case fileSize
            case gameCenterAchievementLocalization
            case imageAsset
            case uploadOperations
            case uploaded
        }

        public enum FieldsGameCenterAchievements: String, CaseIterable, Codable, Sendable {
            case archived
            case gameCenterDetail
            case gameCenterGroup
            case groupAchievement
            case localizations
            case points
            case referenceName
            case releases
            case repeatable
            case showBeforeEarned
            case vendorIdentifier
        }

        public func patch(_ body: AppStoreAPI.GameCenterAchievementLocalizationUpdateRequest) -> Request<AppStoreAPI.GameCenterAchievementLocalizationResponse> {
            Request(path: path, method: "PATCH", body: body, id: "gameCenterAchievementLocalizations-update_instance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "gameCenterAchievementLocalizations-delete_instance")
        }
    }
}
