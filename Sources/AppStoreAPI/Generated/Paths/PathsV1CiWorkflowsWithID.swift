// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.CiWorkflows {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/ciWorkflows/{id}`
        public let path: String

        public func get(fieldsCiWorkflows: [FieldsCiWorkflows]? = nil, fieldsScmRepositories: [FieldsScmRepositories]? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.CiWorkflowResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsCiWorkflows, fieldsScmRepositories, include), id: "ciWorkflows_getInstance")
        }

        private func makeGetQuery(_ fieldsCiWorkflows: [FieldsCiWorkflows]?, _ fieldsScmRepositories: [FieldsScmRepositories]?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsCiWorkflows, forKey: "fields[ciWorkflows]")
            encoder.encode(fieldsScmRepositories, forKey: "fields[scmRepositories]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsCiWorkflows: String, CaseIterable, Codable, Sendable {
            case name
            case description
            case branchStartCondition
            case tagStartCondition
            case pullRequestStartCondition
            case scheduledStartCondition
            case manualBranchStartCondition
            case manualTagStartCondition
            case manualPullRequestStartCondition
            case actions
            case isEnabled
            case isLockedForEditing
            case clean
            case containerFilePath
            case lastModifiedDate
            case product
            case repository
            case xcodeVersion
            case macOsVersion
            case buildRuns
        }

        public enum FieldsScmRepositories: String, CaseIterable, Codable, Sendable {
            case lastAccessedDate
            case httpCloneURL = "httpCloneUrl"
            case sshCloneURL = "sshCloneUrl"
            case ownerName
            case repositoryName
            case scmProvider
            case defaultBranch
            case gitReferences
            case pullRequests
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case product
            case repository
            case xcodeVersion
            case macOsVersion
        }

        public func patch(_ body: AppStoreAPI.CiWorkflowUpdateRequest) -> Request<AppStoreAPI.CiWorkflowResponse> {
            Request(path: path, method: "PATCH", body: body, id: "ciWorkflows_updateInstance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "ciWorkflows_deleteInstance")
        }
    }
}
