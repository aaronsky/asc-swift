// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Apps.WithID {
    public var accessibilityDeclarations: AccessibilityDeclarations {
        AccessibilityDeclarations(path: path + "/accessibilityDeclarations")
    }

    public struct AccessibilityDeclarations {
        /// Path: `/v1/apps/{id}/accessibilityDeclarations`
        public let path: String

        public func get(filterDeviceFamily: [FilterDeviceFamily]? = nil, filterState: [FilterState]? = nil, fieldsAccessibilityDeclarations: [FieldsAccessibilityDeclarations]? = nil, limit: Int? = nil) -> Request<AppStoreAPI.AccessibilityDeclarationsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterDeviceFamily, filterState, fieldsAccessibilityDeclarations, limit), id: "apps_accessibilityDeclarations_getToManyRelated")
        }

        private func makeGetQuery(_ filterDeviceFamily: [FilterDeviceFamily]?, _ filterState: [FilterState]?, _ fieldsAccessibilityDeclarations: [FieldsAccessibilityDeclarations]?, _ limit: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterDeviceFamily, forKey: "filter[deviceFamily]")
            encoder.encode(filterState, forKey: "filter[state]")
            encoder.encode(fieldsAccessibilityDeclarations, forKey: "fields[accessibilityDeclarations]")
            encoder.encode(limit, forKey: "limit")
            return encoder.items
        }

        public enum FilterDeviceFamily: String, CaseIterable, Codable, Sendable {
            case iphone = "IPHONE"
            case ipad = "IPAD"
            case appleTv = "APPLE_TV"
            case appleWatch = "APPLE_WATCH"
            case mac = "MAC"
            case vision = "VISION"
        }

        public enum FilterState: String, CaseIterable, Codable, Sendable {
            case draft = "DRAFT"
            case published = "PUBLISHED"
            case replaced = "REPLACED"
        }

        public enum FieldsAccessibilityDeclarations: String, CaseIterable, Codable, Sendable {
            case deviceFamily
            case state
            case supportsAudioDescriptions
            case supportsCaptions
            case supportsDarkInterface
            case supportsDifferentiateWithoutColorAlone
            case supportsLargerText
            case supportsReducedMotion
            case supportsSufficientContrast
            case supportsVoiceControl
            case supportsVoiceover
        }
    }
}
