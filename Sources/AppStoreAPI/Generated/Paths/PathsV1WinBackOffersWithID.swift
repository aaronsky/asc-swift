// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.WinBackOffers {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/winBackOffers/{id}`
        public let path: String

        public func get(fieldsWinBackOffers: [FieldsWinBackOffers]? = nil, fieldsWinBackOfferPrices: [FieldsWinBackOfferPrices]? = nil, include: [Include]? = nil, limitPrices: Int? = nil) -> Request<AppStoreAPI.WinBackOfferResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsWinBackOffers, fieldsWinBackOfferPrices, include, limitPrices), id: "winBackOffers_getInstance")
        }

        private func makeGetQuery(_ fieldsWinBackOffers: [FieldsWinBackOffers]?, _ fieldsWinBackOfferPrices: [FieldsWinBackOfferPrices]?, _ include: [Include]?, _ limitPrices: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsWinBackOffers, forKey: "fields[winBackOffers]")
            encoder.encode(fieldsWinBackOfferPrices, forKey: "fields[winBackOfferPrices]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitPrices, forKey: "limit[prices]")
            return encoder.items
        }

        public enum FieldsWinBackOffers: String, CaseIterable, Codable, Sendable {
            case referenceName
            case offerID = "offerId"
            case duration
            case offerMode
            case periodCount
            case customerEligibilityPaidSubscriptionDurationInMonths
            case customerEligibilityTimeSinceLastSubscribedInMonths
            case customerEligibilityWaitBetweenOffersInMonths
            case startDate
            case endDate
            case priority
            case promotionIntent
            case subscription
            case prices
        }

        public enum FieldsWinBackOfferPrices: String, CaseIterable, Codable, Sendable {
            case territory
            case subscriptionPricePoint
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case prices
        }

        public func patch(_ body: AppStoreAPI.WinBackOfferUpdateRequest) -> Request<AppStoreAPI.WinBackOfferResponse> {
            Request(path: path, method: "PATCH", body: body, id: "winBackOffers_updateInstance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "winBackOffers_deleteInstance")
        }
    }
}
