// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.AnalyticsReports.WithID {
    public var instances: Instances {
        Instances(path: path + "/instances")
    }

    public struct Instances {
        /// Path: `/v1/analyticsReports/{id}/instances`
        public let path: String

        public func get(filterGranularity: [FilterGranularity]? = nil, filterProcessingDate: [String]? = nil, fieldsAnalyticsReportInstances: [FieldsAnalyticsReportInstances]? = nil, limit: Int? = nil) -> Request<AppStoreAPI.AnalyticsReportInstancesResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterGranularity, filterProcessingDate, fieldsAnalyticsReportInstances, limit), id: "analyticsReports_instances_getToManyRelated")
        }

        private func makeGetQuery(_ filterGranularity: [FilterGranularity]?, _ filterProcessingDate: [String]?, _ fieldsAnalyticsReportInstances: [FieldsAnalyticsReportInstances]?, _ limit: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterGranularity, forKey: "filter[granularity]")
            encoder.encode(filterProcessingDate, forKey: "filter[processingDate]")
            encoder.encode(fieldsAnalyticsReportInstances, forKey: "fields[analyticsReportInstances]")
            encoder.encode(limit, forKey: "limit")
            return encoder.items
        }

        public enum FilterGranularity: String, CaseIterable, Codable, Sendable {
            case daily = "DAILY"
            case weekly = "WEEKLY"
            case monthly = "MONTHLY"
        }

        public enum FieldsAnalyticsReportInstances: String, CaseIterable, Codable, Sendable {
            case granularity
            case processingDate
            case segments
        }
    }
}
