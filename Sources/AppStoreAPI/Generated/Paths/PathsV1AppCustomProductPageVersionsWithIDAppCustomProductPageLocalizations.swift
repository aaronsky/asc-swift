// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.AppCustomProductPageVersions.WithID {
    public var appCustomProductPageLocalizations: AppCustomProductPageLocalizations {
        AppCustomProductPageLocalizations(path: path + "/appCustomProductPageLocalizations")
    }

    public struct AppCustomProductPageLocalizations {
        /// Path: `/v1/appCustomProductPageVersions/{id}/appCustomProductPageLocalizations`
        public let path: String

        public func get(filterLocale: [String]? = nil, fieldsAppCustomProductPageLocalizations: [FieldsAppCustomProductPageLocalizations]? = nil, fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets]? = nil, limit: Int? = nil, include: [Include]? = nil, limitAppScreenshotSets: Int? = nil, limitAppPreviewSets: Int? = nil) -> Request<AppStoreAPI.AppCustomProductPageLocalizationsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterLocale, fieldsAppCustomProductPageLocalizations, fieldsAppCustomProductPageVersions, fieldsAppScreenshotSets, fieldsAppPreviewSets, limit, include, limitAppScreenshotSets, limitAppPreviewSets), id: "appCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelated")
        }

        private func makeGetQuery(_ filterLocale: [String]?, _ fieldsAppCustomProductPageLocalizations: [FieldsAppCustomProductPageLocalizations]?, _ fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions]?, _ fieldsAppScreenshotSets: [FieldsAppScreenshotSets]?, _ fieldsAppPreviewSets: [FieldsAppPreviewSets]?, _ limit: Int?, _ include: [Include]?, _ limitAppScreenshotSets: Int?, _ limitAppPreviewSets: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterLocale, forKey: "filter[locale]")
            encoder.encode(fieldsAppCustomProductPageLocalizations, forKey: "fields[appCustomProductPageLocalizations]")
            encoder.encode(fieldsAppCustomProductPageVersions, forKey: "fields[appCustomProductPageVersions]")
            encoder.encode(fieldsAppScreenshotSets, forKey: "fields[appScreenshotSets]")
            encoder.encode(fieldsAppPreviewSets, forKey: "fields[appPreviewSets]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitAppScreenshotSets, forKey: "limit[appScreenshotSets]")
            encoder.encode(limitAppPreviewSets, forKey: "limit[appPreviewSets]")
            return encoder.items
        }

        public enum FieldsAppCustomProductPageLocalizations: String, CaseIterable, Codable, Sendable {
            case locale
            case promotionalText
            case appCustomProductPageVersion
            case appScreenshotSets
            case appPreviewSets
        }

        public enum FieldsAppCustomProductPageVersions: String, CaseIterable, Codable, Sendable {
            case version
            case state
            case deepLink
            case appCustomProductPage
            case appCustomProductPageLocalizations
        }

        public enum FieldsAppScreenshotSets: String, CaseIterable, Codable, Sendable {
            case screenshotDisplayType
            case appStoreVersionLocalization
            case appCustomProductPageLocalization
            case appStoreVersionExperimentTreatmentLocalization
            case appScreenshots
        }

        public enum FieldsAppPreviewSets: String, CaseIterable, Codable, Sendable {
            case previewType
            case appStoreVersionLocalization
            case appCustomProductPageLocalization
            case appStoreVersionExperimentTreatmentLocalization
            case appPreviews
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case appCustomProductPageVersion
            case appScreenshotSets
            case appPreviewSets
        }
    }
}
