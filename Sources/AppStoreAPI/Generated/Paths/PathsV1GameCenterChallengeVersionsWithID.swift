// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.GameCenterChallengeVersions {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/gameCenterChallengeVersions/{id}`
        public let path: String

        public func get(fieldsGameCenterChallengeVersions: [FieldsGameCenterChallengeVersions]? = nil, fieldsGameCenterChallengeLocalizations: [FieldsGameCenterChallengeLocalizations]? = nil, fieldsGameCenterChallengeImages: [FieldsGameCenterChallengeImages]? = nil, include: [Include]? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil) -> Request<AppStoreAPI.GameCenterChallengeVersionResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsGameCenterChallengeVersions, fieldsGameCenterChallengeLocalizations, fieldsGameCenterChallengeImages, include, limitLocalizations, limitReleases), id: "gameCenterChallengeVersions_getInstance")
        }

        private func makeGetQuery(_ fieldsGameCenterChallengeVersions: [FieldsGameCenterChallengeVersions]?, _ fieldsGameCenterChallengeLocalizations: [FieldsGameCenterChallengeLocalizations]?, _ fieldsGameCenterChallengeImages: [FieldsGameCenterChallengeImages]?, _ include: [Include]?, _ limitLocalizations: Int?, _ limitReleases: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsGameCenterChallengeVersions, forKey: "fields[gameCenterChallengeVersions]")
            encoder.encode(fieldsGameCenterChallengeLocalizations, forKey: "fields[gameCenterChallengeLocalizations]")
            encoder.encode(fieldsGameCenterChallengeImages, forKey: "fields[gameCenterChallengeImages]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitLocalizations, forKey: "limit[localizations]")
            encoder.encode(limitReleases, forKey: "limit[releases]")
            return encoder.items
        }

        public enum FieldsGameCenterChallengeVersions: String, CaseIterable, Codable, Sendable {
            case version
            case state
            case challenge
            case localizations
            case releases
            case defaultImage
        }

        public enum FieldsGameCenterChallengeLocalizations: String, CaseIterable, Codable, Sendable {
            case locale
            case name
            case description
            case version
            case image
        }

        public enum FieldsGameCenterChallengeImages: String, CaseIterable, Codable, Sendable {
            case fileSize
            case fileName
            case imageAsset
            case uploadOperations
            case assetDeliveryState
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case challenge
            case localizations
            case releases
            case defaultImage
        }
    }
}
