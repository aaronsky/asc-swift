// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.ReviewSubmissions.WithID {
    public var items: Items {
        Items(path: path + "/items")
    }

    public struct Items {
        /// Path: `/v1/reviewSubmissions/{id}/items`
        public let path: String

        public func get(fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]? = nil, fieldsAppEvents: [FieldsAppEvents]? = nil, limit: Int? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.ReviewSubmissionItemsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsReviewSubmissionItems, fieldsAppStoreVersions, fieldsAppCustomProductPageVersions, fieldsAppStoreVersionExperiments, fieldsAppEvents, limit, include), id: "reviewSubmissions_items_getToManyRelated")
        }

        private func makeGetQuery(_ fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]?, _ fieldsAppStoreVersions: [FieldsAppStoreVersions]?, _ fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions]?, _ fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]?, _ fieldsAppEvents: [FieldsAppEvents]?, _ limit: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsReviewSubmissionItems, forKey: "fields[reviewSubmissionItems]")
            encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
            encoder.encode(fieldsAppCustomProductPageVersions, forKey: "fields[appCustomProductPageVersions]")
            encoder.encode(fieldsAppStoreVersionExperiments, forKey: "fields[appStoreVersionExperiments]")
            encoder.encode(fieldsAppEvents, forKey: "fields[appEvents]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsReviewSubmissionItems: String, CaseIterable, Codable, Sendable {
            case state
            case resolved
            case removed
            case reviewSubmission
            case appStoreVersion
            case appCustomProductPageVersion
            case appStoreVersionExperiment
            case appStoreVersionExperimentV2
            case appEvent
        }

        public enum FieldsAppStoreVersions: String, CaseIterable, Codable, Sendable {
            case platform
            case versionString
            case appStoreState
            case appVersionState
            case copyright
            case reviewType
            case releaseType
            case earliestReleaseDate
            case downloadable
            case createdDate
            case app
            case ageRatingDeclaration
            case appStoreVersionLocalizations
            case build
            case appStoreVersionPhasedRelease
            case gameCenterAppVersion
            case routingAppCoverage
            case appStoreReviewDetail
            case appStoreVersionSubmission
            case appClipDefaultExperience
            case appStoreVersionExperiments
            case appStoreVersionExperimentsV2
            case customerReviews
            case alternativeDistributionPackage
        }

        public enum FieldsAppCustomProductPageVersions: String, CaseIterable, Codable, Sendable {
            case version
            case state
            case deepLink
            case appCustomProductPage
            case appCustomProductPageLocalizations
        }

        public enum FieldsAppStoreVersionExperiments: String, CaseIterable, Codable, Sendable {
            case name
            case trafficProportion
            case state
            case reviewRequired
            case startDate
            case endDate
            case started
            case appStoreVersion
            case appStoreVersionExperimentTreatments
            case platform
            case app
            case latestControlVersion
            case controlVersions
        }

        public enum FieldsAppEvents: String, CaseIterable, Codable, Sendable {
            case referenceName
            case badge
            case eventState
            case deepLink
            case purchaseRequirement
            case primaryLocale
            case priority
            case purpose
            case territorySchedules
            case archivedTerritorySchedules
            case app
            case localizations
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case appStoreVersion
            case appCustomProductPageVersion
            case appStoreVersionExperiment
            case appStoreVersionExperimentV2
            case appEvent
        }
    }
}
