// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1 {
    public var reviewSubmissions: ReviewSubmissions {
        ReviewSubmissions(path: path + "/reviewSubmissions")
    }

    public struct ReviewSubmissions {
        /// Path: `/v1/reviewSubmissions`
        public let path: String

        public func get(filterPlatform: [FilterPlatform]? = nil, filterState: [FilterState]? = nil, filterApp: [String], fieldsReviewSubmissions: [FieldsReviewSubmissions]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]? = nil, limit: Int? = nil, include: [Include]? = nil, limitItems: Int? = nil) -> Request<AppStoreAPI.ReviewSubmissionsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterPlatform, filterState, filterApp, fieldsReviewSubmissions, fieldsReviewSubmissionItems, limit, include, limitItems), id: "reviewSubmissions_getCollection")
        }

        private func makeGetQuery(_ filterPlatform: [FilterPlatform]?, _ filterState: [FilterState]?, _ filterApp: [String], _ fieldsReviewSubmissions: [FieldsReviewSubmissions]?, _ fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]?, _ limit: Int?, _ include: [Include]?, _ limitItems: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterPlatform, forKey: "filter[platform]")
            encoder.encode(filterState, forKey: "filter[state]")
            encoder.encode(filterApp, forKey: "filter[app]")
            encoder.encode(fieldsReviewSubmissions, forKey: "fields[reviewSubmissions]")
            encoder.encode(fieldsReviewSubmissionItems, forKey: "fields[reviewSubmissionItems]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitItems, forKey: "limit[items]")
            return encoder.items
        }

        public enum FilterPlatform: String, CaseIterable, Codable, Sendable {
            case iOS = "IOS"
            case macOS = "MAC_OS"
            case tvOS = "TV_OS"
            case visionOS = "VISION_OS"
        }

        public enum FilterState: String, CaseIterable, Codable, Sendable {
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case unresolvedIssues = "UNRESOLVED_ISSUES"
            case canceling = "CANCELING"
            case completing = "COMPLETING"
            case complete = "COMPLETE"
        }

        public enum FieldsReviewSubmissions: String, CaseIterable, Codable, Sendable {
            case platform
            case submittedDate
            case state
            case app
            case items
            case appStoreVersionForReview
            case submittedByActor
            case lastUpdatedByActor
        }

        public enum FieldsReviewSubmissionItems: String, CaseIterable, Codable, Sendable {
            case state
            case appStoreVersion
            case appCustomProductPageVersion
            case appStoreVersionExperiment
            case appStoreVersionExperimentV2
            case appEvent
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case app
            case items
            case appStoreVersionForReview
            case submittedByActor
            case lastUpdatedByActor
        }

        public func post(_ body: AppStoreAPI.ReviewSubmissionCreateRequest) -> Request<AppStoreAPI.ReviewSubmissionResponse> {
            Request(path: path, method: "POST", body: body, id: "reviewSubmissions_createInstance")
        }
    }
}
