// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.CiBuildRuns.WithID {
    public var builds: Builds {
        Builds(path: path + "/builds")
    }

    public struct Builds {
        /// Path: `/v1/ciBuildRuns/{id}/builds`
        public let path: String

        public func get(filterVersion: [String]? = nil, filterExpired: [String]? = nil, filterProcessingState: [FilterProcessingState]? = nil, filterBetaAppReviewSubmissionBetaReviewState: [FilterBetaAppReviewSubmissionBetaReviewState]? = nil, filterUsesNonExemptEncryption: [String]? = nil, filterPreReleaseVersionVersion: [String]? = nil, filterPreReleaseVersionPlatform: [FilterPreReleaseVersionPlatform]? = nil, filterBuildAudienceType: [FilterBuildAudienceType]? = nil, filterPreReleaseVersion: [String]? = nil, filterApp: [String]? = nil, filterBetaGroups: [String]? = nil, filterAppStoreVersion: [String]? = nil, filterID: [String]? = nil, existsUsesNonExemptEncryption: Bool? = nil, sort: [Sort]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions]? = nil, fieldsBetaTesters: [FieldsBetaTesters]? = nil, fieldsBetaGroups: [FieldsBetaGroups]? = nil, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations]? = nil, fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsBuildBetaDetails: [FieldsBuildBetaDetails]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsBuildIcons: [FieldsBuildIcons]? = nil, fieldsBuildBundles: [FieldsBuildBundles]? = nil, limit: Int? = nil, include: [Include]? = nil, limitIndividualTesters: Int? = nil, limitBetaGroups: Int? = nil, limitBetaBuildLocalizations: Int? = nil, limitIcons: Int? = nil, limitBuildBundles: Int? = nil) -> Request<AppStoreAPI.BuildsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterVersion, filterExpired, filterProcessingState, filterBetaAppReviewSubmissionBetaReviewState, filterUsesNonExemptEncryption, filterPreReleaseVersionVersion, filterPreReleaseVersionPlatform, filterBuildAudienceType, filterPreReleaseVersion, filterApp, filterBetaGroups, filterAppStoreVersion, filterID, existsUsesNonExemptEncryption, sort, fieldsBuilds, fieldsPreReleaseVersions, fieldsBetaTesters, fieldsBetaGroups, fieldsBetaBuildLocalizations, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsApps, fieldsBuildBetaDetails, fieldsAppStoreVersions, fieldsBuildIcons, fieldsBuildBundles, limit, include, limitIndividualTesters, limitBetaGroups, limitBetaBuildLocalizations, limitIcons, limitBuildBundles), id: "ciBuildRuns_builds_getToManyRelated")
        }

        private func makeGetQuery(_ filterVersion: [String]?, _ filterExpired: [String]?, _ filterProcessingState: [FilterProcessingState]?, _ filterBetaAppReviewSubmissionBetaReviewState: [FilterBetaAppReviewSubmissionBetaReviewState]?, _ filterUsesNonExemptEncryption: [String]?, _ filterPreReleaseVersionVersion: [String]?, _ filterPreReleaseVersionPlatform: [FilterPreReleaseVersionPlatform]?, _ filterBuildAudienceType: [FilterBuildAudienceType]?, _ filterPreReleaseVersion: [String]?, _ filterApp: [String]?, _ filterBetaGroups: [String]?, _ filterAppStoreVersion: [String]?, _ filterID: [String]?, _ existsUsesNonExemptEncryption: Bool?, _ sort: [Sort]?, _ fieldsBuilds: [FieldsBuilds]?, _ fieldsPreReleaseVersions: [FieldsPreReleaseVersions]?, _ fieldsBetaTesters: [FieldsBetaTesters]?, _ fieldsBetaGroups: [FieldsBetaGroups]?, _ fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations]?, _ fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations]?, _ fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions]?, _ fieldsApps: [FieldsApps]?, _ fieldsBuildBetaDetails: [FieldsBuildBetaDetails]?, _ fieldsAppStoreVersions: [FieldsAppStoreVersions]?, _ fieldsBuildIcons: [FieldsBuildIcons]?, _ fieldsBuildBundles: [FieldsBuildBundles]?, _ limit: Int?, _ include: [Include]?, _ limitIndividualTesters: Int?, _ limitBetaGroups: Int?, _ limitBetaBuildLocalizations: Int?, _ limitIcons: Int?, _ limitBuildBundles: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterVersion, forKey: "filter[version]")
            encoder.encode(filterExpired, forKey: "filter[expired]")
            encoder.encode(filterProcessingState, forKey: "filter[processingState]")
            encoder.encode(filterBetaAppReviewSubmissionBetaReviewState, forKey: "filter[betaAppReviewSubmission.betaReviewState]")
            encoder.encode(filterUsesNonExemptEncryption, forKey: "filter[usesNonExemptEncryption]")
            encoder.encode(filterPreReleaseVersionVersion, forKey: "filter[preReleaseVersion.version]")
            encoder.encode(filterPreReleaseVersionPlatform, forKey: "filter[preReleaseVersion.platform]")
            encoder.encode(filterBuildAudienceType, forKey: "filter[buildAudienceType]")
            encoder.encode(filterPreReleaseVersion, forKey: "filter[preReleaseVersion]")
            encoder.encode(filterApp, forKey: "filter[app]")
            encoder.encode(filterBetaGroups, forKey: "filter[betaGroups]")
            encoder.encode(filterAppStoreVersion, forKey: "filter[appStoreVersion]")
            encoder.encode(filterID, forKey: "filter[id]")
            encoder.encode(existsUsesNonExemptEncryption, forKey: "exists[usesNonExemptEncryption]")
            encoder.encode(sort, forKey: "sort")
            encoder.encode(fieldsBuilds, forKey: "fields[builds]")
            encoder.encode(fieldsPreReleaseVersions, forKey: "fields[preReleaseVersions]")
            encoder.encode(fieldsBetaTesters, forKey: "fields[betaTesters]")
            encoder.encode(fieldsBetaGroups, forKey: "fields[betaGroups]")
            encoder.encode(fieldsBetaBuildLocalizations, forKey: "fields[betaBuildLocalizations]")
            encoder.encode(fieldsAppEncryptionDeclarations, forKey: "fields[appEncryptionDeclarations]")
            encoder.encode(fieldsBetaAppReviewSubmissions, forKey: "fields[betaAppReviewSubmissions]")
            encoder.encode(fieldsApps, forKey: "fields[apps]")
            encoder.encode(fieldsBuildBetaDetails, forKey: "fields[buildBetaDetails]")
            encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
            encoder.encode(fieldsBuildIcons, forKey: "fields[buildIcons]")
            encoder.encode(fieldsBuildBundles, forKey: "fields[buildBundles]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitIndividualTesters, forKey: "limit[individualTesters]")
            encoder.encode(limitBetaGroups, forKey: "limit[betaGroups]")
            encoder.encode(limitBetaBuildLocalizations, forKey: "limit[betaBuildLocalizations]")
            encoder.encode(limitIcons, forKey: "limit[icons]")
            encoder.encode(limitBuildBundles, forKey: "limit[buildBundles]")
            return encoder.items
        }

        public enum FilterProcessingState: String, CaseIterable, Codable, Sendable {
            case processing = "PROCESSING"
            case failed = "FAILED"
            case invalid = "INVALID"
            case valid = "VALID"
        }

        public enum FilterBetaAppReviewSubmissionBetaReviewState: String, CaseIterable, Codable, Sendable {
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case rejected = "REJECTED"
            case approved = "APPROVED"
        }

        public enum FilterPreReleaseVersionPlatform: String, CaseIterable, Codable, Sendable {
            case iOS = "IOS"
            case macOS = "MAC_OS"
            case tvOS = "TV_OS"
            case visionOS = "VISION_OS"
        }

        public enum FilterBuildAudienceType: String, CaseIterable, Codable, Sendable {
            case internalOnly = "INTERNAL_ONLY"
            case appStoreEligible = "APP_STORE_ELIGIBLE"
        }

        public enum Sort: String, CaseIterable, Codable, Sendable {
            case version
            case minusVersion = "-version"
            case uploadedDate
            case minusUploadedDate = "-uploadedDate"
            case preReleaseVersion
            case minusPreReleaseVersion = "-preReleaseVersion"
        }

        public enum FieldsBuilds: String, CaseIterable, Codable, Sendable {
            case version
            case uploadedDate
            case expirationDate
            case expired
            case minOsVersion
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case computedMinVisionOsVersion
            case iconAssetToken
            case processingState
            case buildAudienceType
            case usesNonExemptEncryption
            case preReleaseVersion
            case individualTesters
            case betaGroups
            case betaBuildLocalizations
            case appEncryptionDeclaration
            case betaAppReviewSubmission
            case app
            case buildBetaDetail
            case appStoreVersion
            case icons
            case buildBundles
            case perfPowerMetrics
            case diagnosticSignatures
        }

        public enum FieldsPreReleaseVersions: String, CaseIterable, Codable, Sendable {
            case version
            case platform
            case builds
            case app
        }

        public enum FieldsBetaTesters: String, CaseIterable, Codable, Sendable {
            case firstName
            case lastName
            case email
            case inviteType
            case state
            case apps
            case betaGroups
            case builds
        }

        public enum FieldsBetaGroups: String, CaseIterable, Codable, Sendable {
            case name
            case createdDate
            case isInternalGroup
            case hasAccessToAllBuilds
            case publicLinkEnabled
            case publicLinkID = "publicLinkId"
            case publicLinkLimitEnabled
            case publicLinkLimit
            case publicLink
            case feedbackEnabled
            case iosBuildsAvailableForAppleSiliconMac
            case iosBuildsAvailableForAppleVision
            case app
            case builds
            case betaTesters
            case betaRecruitmentCriteria
            case betaRecruitmentCriterionCompatibleBuildCheck
        }

        public enum FieldsBetaBuildLocalizations: String, CaseIterable, Codable, Sendable {
            case whatsNew
            case locale
            case build
        }

        public enum FieldsAppEncryptionDeclarations: String, CaseIterable, Codable, Sendable {
            case appDescription
            case createdDate
            case usesEncryption
            case exempt
            case containsProprietaryCryptography
            case containsThirdPartyCryptography
            case availableOnFrenchStore
            case platform
            case uploadedDate
            case documentURL = "documentUrl"
            case documentName
            case documentType
            case appEncryptionDeclarationState
            case codeValue
            case app
            case builds
            case appEncryptionDeclarationDocument
        }

        public enum FieldsBetaAppReviewSubmissions: String, CaseIterable, Codable, Sendable {
            case betaReviewState
            case submittedDate
            case build
        }

        public enum FieldsApps: String, CaseIterable, Codable, Sendable {
            case accessibilityURL = "accessibilityUrl"
            case name
            case bundleID = "bundleId"
            case sku
            case primaryLocale
            case isOrEverWasMadeForKids
            case subscriptionStatusURL = "subscriptionStatusUrl"
            case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
            case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
            case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
            case contentRightsDeclaration
            case streamlinedPurchasingEnabled
            case accessibilityDeclarations
            case appEncryptionDeclarations
            case ciProduct
            case betaTesters
            case betaGroups
            case appStoreVersions
            case preReleaseVersions
            case betaAppLocalizations
            case builds
            case betaLicenseAgreement
            case betaAppReviewDetail
            case appInfos
            case appClips
            case appPricePoints
            case endUserLicenseAgreement
            case appPriceSchedule
            case appAvailabilityV2
            case inAppPurchases
            case subscriptionGroups
            case gameCenterEnabledVersions
            case perfPowerMetrics
            case appCustomProductPages
            case inAppPurchasesV2
            case promotedPurchases
            case appEvents
            case reviewSubmissions
            case subscriptionGracePeriod
            case customerReviews
            case customerReviewSummarizations
            case gameCenterDetail
            case appStoreVersionExperimentsV2
            case alternativeDistributionKey
            case analyticsReportRequests
            case marketplaceSearchDetail
            case backgroundAssets
            case betaFeedbackScreenshotSubmissions
            case betaFeedbackCrashSubmissions
            case webhooks
        }

        public enum FieldsBuildBetaDetails: String, CaseIterable, Codable, Sendable {
            case autoNotifyEnabled
            case internalBuildState
            case externalBuildState
            case build
        }

        public enum FieldsAppStoreVersions: String, CaseIterable, Codable, Sendable {
            case platform
            case versionString
            case appStoreState
            case appVersionState
            case copyright
            case reviewType
            case releaseType
            case earliestReleaseDate
            case usesIdfa
            case downloadable
            case createdDate
            case app
            case ageRatingDeclaration
            case appStoreVersionLocalizations
            case build
            case appStoreVersionPhasedRelease
            case gameCenterAppVersion
            case routingAppCoverage
            case appStoreReviewDetail
            case appStoreVersionSubmission
            case appClipDefaultExperience
            case appStoreVersionExperiments
            case appStoreVersionExperimentsV2
            case customerReviews
            case alternativeDistributionPackage
        }

        public enum FieldsBuildIcons: String, CaseIterable, Codable, Sendable {
            case iconAsset
            case iconType
            case name
        }

        public enum FieldsBuildBundles: String, CaseIterable, Codable, Sendable {
            case bundleID = "bundleId"
            case bundleType
            case sdkBuild
            case platformBuild
            case fileName
            case hasSirikit
            case hasOnDemandResources
            case hasPrerenderedIcon
            case usesLocationServices
            case isIosBuildMacAppStoreCompatible
            case includesSymbols
            case dSYMURL = "dSYMUrl"
            case supportedArchitectures
            case requiredCapabilities
            case deviceProtocols
            case locales
            case entitlements
            case baDownloadAllowance
            case baMaxInstallSize
            case appClipDomainCacheStatus
            case appClipDomainDebugStatus
            case betaAppClipInvocations
            case buildBundleFileSizes
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case preReleaseVersion
            case individualTesters
            case betaGroups
            case betaBuildLocalizations
            case appEncryptionDeclaration
            case betaAppReviewSubmission
            case app
            case buildBetaDetail
            case appStoreVersion
            case icons
            case buildBundles
        }
    }
}
