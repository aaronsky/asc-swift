// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.GameCenterLeaderboardSets.WithID {
    public var releases: Releases {
        Releases(path: path + "/releases")
    }

    public struct Releases {
        /// Path: `/v1/gameCenterLeaderboardSets/{id}/releases`
        public let path: String

        public func get(filterLive: [String]? = nil, filterGameCenterDetail: [String]? = nil, fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]? = nil, limit: Int? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.GameCenterLeaderboardSetReleasesResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterLive, filterGameCenterDetail, fieldsGameCenterLeaderboardSetReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboardSets, limit, include), id: "gameCenterLeaderboardSets_releases_getToManyRelated")
        }

        private func makeGetQuery(_ filterLive: [String]?, _ filterGameCenterDetail: [String]?, _ fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases]?, _ fieldsGameCenterDetails: [FieldsGameCenterDetails]?, _ fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]?, _ limit: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterLive, forKey: "filter[live]")
            encoder.encode(filterGameCenterDetail, forKey: "filter[gameCenterDetail]")
            encoder.encode(fieldsGameCenterLeaderboardSetReleases, forKey: "fields[gameCenterLeaderboardSetReleases]")
            encoder.encode(fieldsGameCenterDetails, forKey: "fields[gameCenterDetails]")
            encoder.encode(fieldsGameCenterLeaderboardSets, forKey: "fields[gameCenterLeaderboardSets]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsGameCenterLeaderboardSetReleases: String, CaseIterable, Codable, Sendable {
            case live
            case gameCenterDetail
            case gameCenterLeaderboardSet
        }

        public enum FieldsGameCenterDetails: String, CaseIterable, Codable, Sendable {
            case arcadeEnabled
            case challengeEnabled
            case app
            case gameCenterAppVersions
            case gameCenterGroup
            case gameCenterLeaderboards
            case gameCenterLeaderboardSets
            case gameCenterAchievements
            case defaultLeaderboard
            case defaultGroupLeaderboard
            case achievementReleases
            case leaderboardReleases
            case leaderboardSetReleases
        }

        public enum FieldsGameCenterLeaderboardSets: String, CaseIterable, Codable, Sendable {
            case referenceName
            case vendorIdentifier
            case gameCenterDetail
            case gameCenterGroup
            case groupLeaderboardSet
            case localizations
            case gameCenterLeaderboards
            case releases
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case gameCenterDetail
            case gameCenterLeaderboardSet
        }
    }
}
