// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.CiWorkflows.WithID {
    public var buildRuns: BuildRuns {
        BuildRuns(path: path + "/buildRuns")
    }

    public struct BuildRuns {
        /// Path: `/v1/ciWorkflows/{id}/buildRuns`
        public let path: String

        public func get(filterBuilds: [String]? = nil, sort: [Sort]? = nil, fieldsCiBuildRuns: [FieldsCiBuildRuns]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, fieldsCiWorkflows: [FieldsCiWorkflows]? = nil, fieldsCiProducts: [FieldsCiProducts]? = nil, fieldsScmGitReferences: [FieldsScmGitReferences]? = nil, fieldsScmPullRequests: [FieldsScmPullRequests]? = nil, limit: Int? = nil, include: [Include]? = nil, limitBuilds: Int? = nil) -> Request<AppStoreAPI.CiBuildRunsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterBuilds, sort, fieldsCiBuildRuns, fieldsBuilds, fieldsCiWorkflows, fieldsCiProducts, fieldsScmGitReferences, fieldsScmPullRequests, limit, include, limitBuilds), id: "ciWorkflows_buildRuns_getToManyRelated")
        }

        private func makeGetQuery(_ filterBuilds: [String]?, _ sort: [Sort]?, _ fieldsCiBuildRuns: [FieldsCiBuildRuns]?, _ fieldsBuilds: [FieldsBuilds]?, _ fieldsCiWorkflows: [FieldsCiWorkflows]?, _ fieldsCiProducts: [FieldsCiProducts]?, _ fieldsScmGitReferences: [FieldsScmGitReferences]?, _ fieldsScmPullRequests: [FieldsScmPullRequests]?, _ limit: Int?, _ include: [Include]?, _ limitBuilds: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterBuilds, forKey: "filter[builds]")
            encoder.encode(sort, forKey: "sort")
            encoder.encode(fieldsCiBuildRuns, forKey: "fields[ciBuildRuns]")
            encoder.encode(fieldsBuilds, forKey: "fields[builds]")
            encoder.encode(fieldsCiWorkflows, forKey: "fields[ciWorkflows]")
            encoder.encode(fieldsCiProducts, forKey: "fields[ciProducts]")
            encoder.encode(fieldsScmGitReferences, forKey: "fields[scmGitReferences]")
            encoder.encode(fieldsScmPullRequests, forKey: "fields[scmPullRequests]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitBuilds, forKey: "limit[builds]")
            return encoder.items
        }

        public enum Sort: String, CaseIterable, Codable, Sendable {
            case number
            case minusNumber = "-number"
        }

        public enum FieldsCiBuildRuns: String, CaseIterable, Codable, Sendable {
            case number
            case createdDate
            case startedDate
            case finishedDate
            case sourceCommit
            case destinationCommit
            case isPullRequestBuild
            case issueCounts
            case executionProgress
            case completionStatus
            case startReason
            case cancelReason
            case builds
            case workflow
            case product
            case sourceBranchOrTag
            case destinationBranch
            case actions
            case pullRequest
        }

        public enum FieldsBuilds: String, CaseIterable, Codable, Sendable {
            case version
            case uploadedDate
            case expirationDate
            case expired
            case minOsVersion
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case computedMinVisionOsVersion
            case iconAssetToken
            case processingState
            case buildAudienceType
            case usesNonExemptEncryption
            case preReleaseVersion
            case individualTesters
            case betaGroups
            case betaBuildLocalizations
            case appEncryptionDeclaration
            case betaAppReviewSubmission
            case app
            case buildBetaDetail
            case appStoreVersion
            case icons
            case buildBundles
            case perfPowerMetrics
            case diagnosticSignatures
        }

        public enum FieldsCiWorkflows: String, CaseIterable, Codable, Sendable {
            case name
            case description
            case branchStartCondition
            case tagStartCondition
            case pullRequestStartCondition
            case scheduledStartCondition
            case manualBranchStartCondition
            case manualTagStartCondition
            case manualPullRequestStartCondition
            case actions
            case isEnabled
            case isLockedForEditing
            case clean
            case containerFilePath
            case lastModifiedDate
            case product
            case repository
            case xcodeVersion
            case macOsVersion
            case buildRuns
        }

        public enum FieldsCiProducts: String, CaseIterable, Codable, Sendable {
            case name
            case createdDate
            case productType
            case app
            case bundleID = "bundleId"
            case workflows
            case primaryRepositories
            case additionalRepositories
            case buildRuns
        }

        public enum FieldsScmGitReferences: String, CaseIterable, Codable, Sendable {
            case name
            case canonicalName
            case isDeleted
            case kind
            case repository
        }

        public enum FieldsScmPullRequests: String, CaseIterable, Codable, Sendable {
            case title
            case number
            case webURL = "webUrl"
            case sourceRepositoryOwner
            case sourceRepositoryName
            case sourceBranchName
            case destinationRepositoryOwner
            case destinationRepositoryName
            case destinationBranchName
            case isClosed
            case isCrossRepository
            case repository
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case builds
            case workflow
            case product
            case sourceBranchOrTag
            case destinationBranch
            case pullRequest
        }
    }
}
