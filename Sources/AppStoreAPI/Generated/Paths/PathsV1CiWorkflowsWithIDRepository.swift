// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.CiWorkflows.WithID {
    public var repository: Repository {
        Repository(path: path + "/repository")
    }

    public struct Repository {
        /// Path: `/v1/ciWorkflows/{id}/repository`
        public let path: String

        public func get(fieldsScmRepositories: [FieldsScmRepositories]? = nil, fieldsScmProviders: [FieldsScmProviders]? = nil, fieldsScmGitReferences: [FieldsScmGitReferences]? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.ScmRepositoryResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsScmRepositories, fieldsScmProviders, fieldsScmGitReferences, include), id: "ciWorkflows_repository_getToOneRelated")
        }

        private func makeGetQuery(_ fieldsScmRepositories: [FieldsScmRepositories]?, _ fieldsScmProviders: [FieldsScmProviders]?, _ fieldsScmGitReferences: [FieldsScmGitReferences]?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsScmRepositories, forKey: "fields[scmRepositories]")
            encoder.encode(fieldsScmProviders, forKey: "fields[scmProviders]")
            encoder.encode(fieldsScmGitReferences, forKey: "fields[scmGitReferences]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsScmRepositories: String, CaseIterable, Codable, Sendable {
            case lastAccessedDate
            case httpCloneURL = "httpCloneUrl"
            case sshCloneURL = "sshCloneUrl"
            case ownerName
            case repositoryName
            case scmProvider
            case defaultBranch
            case gitReferences
            case pullRequests
        }

        public enum FieldsScmProviders: String, CaseIterable, Codable, Sendable {
            case scmProviderType
            case url
            case repositories
        }

        public enum FieldsScmGitReferences: String, CaseIterable, Codable, Sendable {
            case name
            case canonicalName
            case isDeleted
            case kind
            case repository
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case scmProvider
            case defaultBranch
        }
    }
}
