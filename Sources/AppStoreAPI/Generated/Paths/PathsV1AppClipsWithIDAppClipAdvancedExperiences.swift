// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.AppClips.WithID {
    public var appClipAdvancedExperiences: AppClipAdvancedExperiences {
        AppClipAdvancedExperiences(path: path + "/appClipAdvancedExperiences")
    }

    public struct AppClipAdvancedExperiences {
        /// Path: `/v1/appClips/{id}/appClipAdvancedExperiences`
        public let path: String

        public func get(filterStatus: [FilterStatus]? = nil, filterPlaceStatus: [FilterPlaceStatus]? = nil, filterAction: [FilterAction]? = nil, fieldsAppClipAdvancedExperiences: [FieldsAppClipAdvancedExperiences]? = nil, fieldsAppClips: [FieldsAppClips]? = nil, fieldsAppClipAdvancedExperienceImages: [FieldsAppClipAdvancedExperienceImages]? = nil, fieldsAppClipAdvancedExperienceLocalizations: [FieldsAppClipAdvancedExperienceLocalizations]? = nil, limit: Int? = nil, include: [Include]? = nil, limitLocalizations: Int? = nil) -> Request<AppStoreAPI.AppClipAdvancedExperiencesResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterStatus, filterPlaceStatus, filterAction, fieldsAppClipAdvancedExperiences, fieldsAppClips, fieldsAppClipAdvancedExperienceImages, fieldsAppClipAdvancedExperienceLocalizations, limit, include, limitLocalizations), id: "appClips_appClipAdvancedExperiences_getToManyRelated")
        }

        private func makeGetQuery(_ filterStatus: [FilterStatus]?, _ filterPlaceStatus: [FilterPlaceStatus]?, _ filterAction: [FilterAction]?, _ fieldsAppClipAdvancedExperiences: [FieldsAppClipAdvancedExperiences]?, _ fieldsAppClips: [FieldsAppClips]?, _ fieldsAppClipAdvancedExperienceImages: [FieldsAppClipAdvancedExperienceImages]?, _ fieldsAppClipAdvancedExperienceLocalizations: [FieldsAppClipAdvancedExperienceLocalizations]?, _ limit: Int?, _ include: [Include]?, _ limitLocalizations: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterStatus, forKey: "filter[status]")
            encoder.encode(filterPlaceStatus, forKey: "filter[placeStatus]")
            encoder.encode(filterAction, forKey: "filter[action]")
            encoder.encode(fieldsAppClipAdvancedExperiences, forKey: "fields[appClipAdvancedExperiences]")
            encoder.encode(fieldsAppClips, forKey: "fields[appClips]")
            encoder.encode(fieldsAppClipAdvancedExperienceImages, forKey: "fields[appClipAdvancedExperienceImages]")
            encoder.encode(fieldsAppClipAdvancedExperienceLocalizations, forKey: "fields[appClipAdvancedExperienceLocalizations]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitLocalizations, forKey: "limit[localizations]")
            return encoder.items
        }

        public enum FilterStatus: String, CaseIterable, Codable, Sendable {
            case received = "RECEIVED"
            case deactivated = "DEACTIVATED"
            case appTransferInProgress = "APP_TRANSFER_IN_PROGRESS"
        }

        public enum FilterPlaceStatus: String, CaseIterable, Codable, Sendable {
            case pending = "PENDING"
            case matched = "MATCHED"
            case noMatch = "NO_MATCH"
        }

        public enum FilterAction: String, CaseIterable, Codable, Sendable {
            case `open` = "OPEN"
            case view = "VIEW"
            case play = "PLAY"
        }

        public enum FieldsAppClipAdvancedExperiences: String, CaseIterable, Codable, Sendable {
            case link
            case version
            case status
            case action
            case isPoweredBy
            case place
            case placeStatus
            case businessCategory
            case defaultLanguage
            case removed
            case appClip
            case headerImage
            case localizations
        }

        public enum FieldsAppClips: String, CaseIterable, Codable, Sendable {
            case bundleID = "bundleId"
            case app
            case appClipDefaultExperiences
            case appClipAdvancedExperiences
        }

        public enum FieldsAppClipAdvancedExperienceImages: String, CaseIterable, Codable, Sendable {
            case fileSize
            case fileName
            case sourceFileChecksum
            case imageAsset
            case uploadOperations
            case assetDeliveryState
            case uploaded
        }

        public enum FieldsAppClipAdvancedExperienceLocalizations: String, CaseIterable, Codable, Sendable {
            case language
            case title
            case subtitle
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case appClip
            case headerImage
            case localizations
        }
    }
}
