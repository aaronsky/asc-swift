// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.GameCenterDetails.WithID.Metrics {
    public var ruleBasedMatchmakingRequests: RuleBasedMatchmakingRequests {
        RuleBasedMatchmakingRequests(path: path + "/ruleBasedMatchmakingRequests")
    }

    public struct RuleBasedMatchmakingRequests {
        /// Path: `/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests`
        public let path: String

        public func get(granularity: Granularity, groupBy: [GroupBy]? = nil, filterResult: FilterResult? = nil, sort: [Sort]? = nil, limit: Int? = nil) -> Request<AppStoreAPI.GameCenterMatchmakingAppRequestsV1MetricResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(granularity, groupBy, filterResult, sort, limit), id: "gameCenterDetails_ruleBasedMatchmakingRequests_getMetrics")
        }

        private func makeGetQuery(_ granularity: Granularity, _ groupBy: [GroupBy]?, _ filterResult: FilterResult?, _ sort: [Sort]?, _ limit: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(granularity, forKey: "granularity")
            encoder.encode(groupBy, forKey: "groupBy")
            encoder.encode(filterResult, forKey: "filter[result]")
            encoder.encode(sort, forKey: "sort")
            encoder.encode(limit, forKey: "limit")
            return encoder.items
        }

        public enum Granularity: String, CaseIterable, Codable, Sendable {
            case p1d = "P1D"
            case pt1h = "PT1H"
            case pt15m = "PT15M"
        }

        public enum GroupBy: String, CaseIterable, Codable, Sendable {
            case result
        }

        public enum FilterResult: String, CaseIterable, Codable, Sendable {
            case matched = "MATCHED"
            case canceled = "CANCELED"
            case expired = "EXPIRED"
        }

        public enum Sort: String, CaseIterable, Codable, Sendable {
            case count
            case minusCount = "-count"
            case averageSecondsInQueue
            case minusAverageSecondsInQueue = "-averageSecondsInQueue"
            case p50SecondsInQueue
            case minusP50SecondsInQueue = "-p50SecondsInQueue"
            case p95SecondsInQueue
            case minusP95SecondsInQueue = "-p95SecondsInQueue"
        }
    }
}
