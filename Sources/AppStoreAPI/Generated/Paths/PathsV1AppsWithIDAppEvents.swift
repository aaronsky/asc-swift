// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Apps.WithID {
    public var appEvents: AppEvents {
        AppEvents(path: path + "/appEvents")
    }

    public struct AppEvents {
        /// Path: `/v1/apps/{id}/appEvents`
        public let path: String

        public func get(filterEventState: [FilterEventState]? = nil, filterID: [String]? = nil, fieldsAppEvents: [FieldsAppEvents]? = nil, fieldsAppEventLocalizations: [FieldsAppEventLocalizations]? = nil, limit: Int? = nil, include: [Include]? = nil, limitLocalizations: Int? = nil) -> Request<AppStoreAPI.AppEventsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterEventState, filterID, fieldsAppEvents, fieldsAppEventLocalizations, limit, include, limitLocalizations), id: "apps_appEvents_getToManyRelated")
        }

        private func makeGetQuery(_ filterEventState: [FilterEventState]?, _ filterID: [String]?, _ fieldsAppEvents: [FieldsAppEvents]?, _ fieldsAppEventLocalizations: [FieldsAppEventLocalizations]?, _ limit: Int?, _ include: [Include]?, _ limitLocalizations: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterEventState, forKey: "filter[eventState]")
            encoder.encode(filterID, forKey: "filter[id]")
            encoder.encode(fieldsAppEvents, forKey: "fields[appEvents]")
            encoder.encode(fieldsAppEventLocalizations, forKey: "fields[appEventLocalizations]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitLocalizations, forKey: "limit[localizations]")
            return encoder.items
        }

        public enum FilterEventState: String, CaseIterable, Codable, Sendable {
            case draft = "DRAFT"
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case rejected = "REJECTED"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case published = "PUBLISHED"
            case past = "PAST"
            case archived = "ARCHIVED"
        }

        public enum FieldsAppEvents: String, CaseIterable, Codable, Sendable {
            case referenceName
            case badge
            case eventState
            case deepLink
            case purchaseRequirement
            case primaryLocale
            case priority
            case purpose
            case territorySchedules
            case archivedTerritorySchedules
            case app
            case localizations
        }

        public enum FieldsAppEventLocalizations: String, CaseIterable, Codable, Sendable {
            case locale
            case name
            case shortDescription
            case longDescription
            case appEvent
            case appEventScreenshots
            case appEventVideoClips
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case localizations
        }
    }
}
