// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.AppEvents {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/appEvents/{id}`
        public let path: String

        public func get(fieldsAppEvents: [FieldsAppEvents]? = nil, fieldsAppEventLocalizations: [FieldsAppEventLocalizations]? = nil, include: [Include]? = nil, limitLocalizations: Int? = nil) -> Request<AppStoreAPI.AppEventResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsAppEvents, fieldsAppEventLocalizations, include, limitLocalizations), id: "appEvents_getInstance")
        }

        private func makeGetQuery(_ fieldsAppEvents: [FieldsAppEvents]?, _ fieldsAppEventLocalizations: [FieldsAppEventLocalizations]?, _ include: [Include]?, _ limitLocalizations: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsAppEvents, forKey: "fields[appEvents]")
            encoder.encode(fieldsAppEventLocalizations, forKey: "fields[appEventLocalizations]")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitLocalizations, forKey: "limit[localizations]")
            return encoder.items
        }

        public enum FieldsAppEvents: String, CaseIterable, Codable, Sendable {
            case referenceName
            case badge
            case eventState
            case deepLink
            case purchaseRequirement
            case primaryLocale
            case priority
            case purpose
            case territorySchedules
            case archivedTerritorySchedules
            case app
            case localizations
        }

        public enum FieldsAppEventLocalizations: String, CaseIterable, Codable, Sendable {
            case locale
            case name
            case shortDescription
            case longDescription
            case appEvent
            case appEventScreenshots
            case appEventVideoClips
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case localizations
        }

        public func patch(_ body: AppStoreAPI.AppEventUpdateRequest) -> Request<AppStoreAPI.AppEventResponse> {
            Request(path: path, method: "PATCH", body: body, id: "appEvents_updateInstance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "appEvents_deleteInstance")
        }
    }
}
