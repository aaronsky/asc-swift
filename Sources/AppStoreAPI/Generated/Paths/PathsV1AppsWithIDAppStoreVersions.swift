// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Apps.WithID {
    public var appStoreVersions: AppStoreVersions {
        AppStoreVersions(path: path + "/appStoreVersions")
    }

    public struct AppStoreVersions {
        /// Path: `/v1/apps/{id}/appStoreVersions`
        public let path: String

        public func get(filterPlatform: [FilterPlatform]? = nil, filterVersionString: [String]? = nil, filterAppStoreState: [FilterAppStoreState]? = nil, filterAppVersionState: [FilterAppVersionState]? = nil, filterID: [String]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages]? = nil, limit: Int? = nil, include: [Include]? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil) -> Request<AppStoreAPI.AppStoreVersionsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterPlatform, filterVersionString, filterAppStoreState, filterAppVersionState, filterID, fieldsAppStoreVersions, fieldsApps, fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations, fieldsBuilds, fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions, fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages, limit, include, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2), id: "apps_appStoreVersions_getToManyRelated")
        }

        private func makeGetQuery(_ filterPlatform: [FilterPlatform]?, _ filterVersionString: [String]?, _ filterAppStoreState: [FilterAppStoreState]?, _ filterAppVersionState: [FilterAppVersionState]?, _ filterID: [String]?, _ fieldsAppStoreVersions: [FieldsAppStoreVersions]?, _ fieldsApps: [FieldsApps]?, _ fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations]?, _ fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations]?, _ fieldsBuilds: [FieldsBuilds]?, _ fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases]?, _ fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions]?, _ fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages]?, _ fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails]?, _ fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions]?, _ fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences]?, _ fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]?, _ fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages]?, _ limit: Int?, _ include: [Include]?, _ limitAppStoreVersionLocalizations: Int?, _ limitAppStoreVersionExperiments: Int?, _ limitAppStoreVersionExperimentsV2: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterPlatform, forKey: "filter[platform]")
            encoder.encode(filterVersionString, forKey: "filter[versionString]")
            encoder.encode(filterAppStoreState, forKey: "filter[appStoreState]")
            encoder.encode(filterAppVersionState, forKey: "filter[appVersionState]")
            encoder.encode(filterID, forKey: "filter[id]")
            encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
            encoder.encode(fieldsApps, forKey: "fields[apps]")
            encoder.encode(fieldsAgeRatingDeclarations, forKey: "fields[ageRatingDeclarations]")
            encoder.encode(fieldsAppStoreVersionLocalizations, forKey: "fields[appStoreVersionLocalizations]")
            encoder.encode(fieldsBuilds, forKey: "fields[builds]")
            encoder.encode(fieldsAppStoreVersionPhasedReleases, forKey: "fields[appStoreVersionPhasedReleases]")
            encoder.encode(fieldsGameCenterAppVersions, forKey: "fields[gameCenterAppVersions]")
            encoder.encode(fieldsRoutingAppCoverages, forKey: "fields[routingAppCoverages]")
            encoder.encode(fieldsAppStoreReviewDetails, forKey: "fields[appStoreReviewDetails]")
            encoder.encode(fieldsAppStoreVersionSubmissions, forKey: "fields[appStoreVersionSubmissions]")
            encoder.encode(fieldsAppClipDefaultExperiences, forKey: "fields[appClipDefaultExperiences]")
            encoder.encode(fieldsAppStoreVersionExperiments, forKey: "fields[appStoreVersionExperiments]")
            encoder.encode(fieldsAlternativeDistributionPackages, forKey: "fields[alternativeDistributionPackages]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(limitAppStoreVersionLocalizations, forKey: "limit[appStoreVersionLocalizations]")
            encoder.encode(limitAppStoreVersionExperiments, forKey: "limit[appStoreVersionExperiments]")
            encoder.encode(limitAppStoreVersionExperimentsV2, forKey: "limit[appStoreVersionExperimentsV2]")
            return encoder.items
        }

        public enum FilterPlatform: String, CaseIterable, Codable, Sendable {
            case iOS = "IOS"
            case macOS = "MAC_OS"
            case tvOS = "TV_OS"
            case visionOS = "VISION_OS"
        }

        public enum FilterAppStoreState: String, CaseIterable, Codable, Sendable {
            case accepted = "ACCEPTED"
            case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
            case developerRejected = "DEVELOPER_REJECTED"
            case inReview = "IN_REVIEW"
            case invalidBinary = "INVALID_BINARY"
            case metadataRejected = "METADATA_REJECTED"
            case pendingAppleRelease = "PENDING_APPLE_RELEASE"
            case pendingContract = "PENDING_CONTRACT"
            case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case preorderReadyForSale = "PREORDER_READY_FOR_SALE"
            case processingForAppStore = "PROCESSING_FOR_APP_STORE"
            case readyForReview = "READY_FOR_REVIEW"
            case readyForSale = "READY_FOR_SALE"
            case rejected = "REJECTED"
            case removedFromSale = "REMOVED_FROM_SALE"
            case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
            case notApplicable = "NOT_APPLICABLE"
        }

        public enum FilterAppVersionState: String, CaseIterable, Codable, Sendable {
            case accepted = "ACCEPTED"
            case developerRejected = "DEVELOPER_REJECTED"
            case inReview = "IN_REVIEW"
            case invalidBinary = "INVALID_BINARY"
            case metadataRejected = "METADATA_REJECTED"
            case pendingAppleRelease = "PENDING_APPLE_RELEASE"
            case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case processingForDistribution = "PROCESSING_FOR_DISTRIBUTION"
            case readyForDistribution = "READY_FOR_DISTRIBUTION"
            case readyForReview = "READY_FOR_REVIEW"
            case rejected = "REJECTED"
            case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
            case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
            case waitingForReview = "WAITING_FOR_REVIEW"
        }

        public enum FieldsAppStoreVersions: String, CaseIterable, Codable, Sendable {
            case platform
            case versionString
            case appStoreState
            case appVersionState
            case copyright
            case reviewType
            case releaseType
            case earliestReleaseDate
            case downloadable
            case createdDate
            case app
            case ageRatingDeclaration
            case appStoreVersionLocalizations
            case build
            case appStoreVersionPhasedRelease
            case gameCenterAppVersion
            case routingAppCoverage
            case appStoreReviewDetail
            case appStoreVersionSubmission
            case appClipDefaultExperience
            case appStoreVersionExperiments
            case appStoreVersionExperimentsV2
            case customerReviews
            case alternativeDistributionPackage
        }

        public enum FieldsApps: String, CaseIterable, Codable, Sendable {
            case name
            case bundleID = "bundleId"
            case sku
            case primaryLocale
            case isOrEverWasMadeForKids
            case subscriptionStatusURL = "subscriptionStatusUrl"
            case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
            case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
            case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
            case contentRightsDeclaration
            case streamlinedPurchasingEnabled
            case appEncryptionDeclarations
            case ciProduct
            case betaTesters
            case betaGroups
            case appStoreVersions
            case preReleaseVersions
            case betaAppLocalizations
            case builds
            case betaLicenseAgreement
            case betaAppReviewDetail
            case appInfos
            case appClips
            case appPricePoints
            case endUserLicenseAgreement
            case preOrder
            case appPriceSchedule
            case appAvailability
            case appAvailabilityV2
            case inAppPurchases
            case subscriptionGroups
            case gameCenterEnabledVersions
            case perfPowerMetrics
            case appCustomProductPages
            case inAppPurchasesV2
            case promotedPurchases
            case appEvents
            case reviewSubmissions
            case subscriptionGracePeriod
            case customerReviews
            case gameCenterDetail
            case appStoreVersionExperimentsV2
            case alternativeDistributionKey
            case analyticsReportRequests
            case marketplaceSearchDetail
        }

        public enum FieldsAgeRatingDeclarations: String, CaseIterable, Codable, Sendable {
            case alcoholTobaccoOrDrugUseOrReferences
            case contests
            case gamblingAndContests
            case gambling
            case gamblingSimulated
            case kidsAgeBand
            case lootBox
            case medicalOrTreatmentInformation
            case profanityOrCrudeHumor
            case sexualContentGraphicAndNudity
            case sexualContentOrNudity
            case horrorOrFearThemes
            case matureOrSuggestiveThemes
            case unrestrictedWebAccess
            case violenceCartoonOrFantasy
            case violenceRealisticProlongedGraphicOrSadistic
            case violenceRealistic
            case ageRatingOverride
            case koreaAgeRatingOverride
            case seventeenPlus
        }

        public enum FieldsAppStoreVersionLocalizations: String, CaseIterable, Codable, Sendable {
            case description
            case locale
            case keywords
            case marketingURL = "marketingUrl"
            case promotionalText
            case supportURL = "supportUrl"
            case whatsNew
            case appStoreVersion
            case appScreenshotSets
            case appPreviewSets
        }

        public enum FieldsBuilds: String, CaseIterable, Codable, Sendable {
            case version
            case uploadedDate
            case expirationDate
            case expired
            case minOsVersion
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case iconAssetToken
            case processingState
            case buildAudienceType
            case usesNonExemptEncryption
            case preReleaseVersion
            case individualTesters
            case betaGroups
            case betaBuildLocalizations
            case appEncryptionDeclaration
            case betaAppReviewSubmission
            case app
            case buildBetaDetail
            case appStoreVersion
            case icons
            case buildBundles
            case perfPowerMetrics
            case diagnosticSignatures
        }

        public enum FieldsAppStoreVersionPhasedReleases: String, CaseIterable, Codable, Sendable {
            case phasedReleaseState
            case startDate
            case totalPauseDuration
            case currentDayNumber
            case appStoreVersion
        }

        public enum FieldsGameCenterAppVersions: String, CaseIterable, Codable, Sendable {
            case enabled
            case compatibilityVersions
            case appStoreVersion
        }

        public enum FieldsRoutingAppCoverages: String, CaseIterable, Codable, Sendable {
            case fileSize
            case fileName
            case sourceFileChecksum
            case uploadOperations
            case assetDeliveryState
            case uploaded
            case appStoreVersion
        }

        public enum FieldsAppStoreReviewDetails: String, CaseIterable, Codable, Sendable {
            case contactFirstName
            case contactLastName
            case contactPhone
            case contactEmail
            case demoAccountName
            case demoAccountPassword
            case demoAccountRequired
            case notes
            case appStoreVersion
            case appStoreReviewAttachments
        }

        public enum FieldsAppStoreVersionSubmissions: String, CaseIterable, Codable, Sendable {
            case appStoreVersion
        }

        public enum FieldsAppClipDefaultExperiences: String, CaseIterable, Codable, Sendable {
            case action
            case appClip
            case releaseWithAppStoreVersion
            case appClipDefaultExperienceLocalizations
            case appClipAppStoreReviewDetail
            case appClipDefaultExperienceTemplate
        }

        public enum FieldsAppStoreVersionExperiments: String, CaseIterable, Codable, Sendable {
            case name
            case trafficProportion
            case state
            case reviewRequired
            case startDate
            case endDate
            case started
            case appStoreVersion
            case appStoreVersionExperimentTreatments
            case platform
            case app
            case latestControlVersion
            case controlVersions
        }

        public enum FieldsAlternativeDistributionPackages: String, CaseIterable, Codable, Sendable {
            case appStoreVersion
            case versions
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case app
            case ageRatingDeclaration
            case appStoreVersionLocalizations
            case build
            case appStoreVersionPhasedRelease
            case gameCenterAppVersion
            case routingAppCoverage
            case appStoreReviewDetail
            case appStoreVersionSubmission
            case appClipDefaultExperience
            case appStoreVersionExperiments
            case appStoreVersionExperimentsV2
            case alternativeDistributionPackage
        }
    }
}
