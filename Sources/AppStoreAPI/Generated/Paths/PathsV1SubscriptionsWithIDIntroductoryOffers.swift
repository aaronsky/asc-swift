// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.V1.Subscriptions.WithID {
    public var introductoryOffers: IntroductoryOffers {
        IntroductoryOffers(path: path + "/introductoryOffers")
    }

    public struct IntroductoryOffers {
        /// Path: `/v1/subscriptions/{id}/introductoryOffers`
        public let path: String

        public func get(filterTerritory: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers]? = nil, fieldsSubscriptions: [FieldsSubscriptions]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints]? = nil, limit: Int? = nil, include: [Include]? = nil) -> Request<AppStoreAPI.SubscriptionIntroductoryOffersResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterTerritory, fieldsSubscriptionIntroductoryOffers, fieldsSubscriptions, fieldsTerritories, fieldsSubscriptionPricePoints, limit, include), id: "subscriptions_introductoryOffers_getToManyRelated")
        }

        private func makeGetQuery(_ filterTerritory: [String]?, _ fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers]?, _ fieldsSubscriptions: [FieldsSubscriptions]?, _ fieldsTerritories: [FieldsTerritories]?, _ fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints]?, _ limit: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterTerritory, forKey: "filter[territory]")
            encoder.encode(fieldsSubscriptionIntroductoryOffers, forKey: "fields[subscriptionIntroductoryOffers]")
            encoder.encode(fieldsSubscriptions, forKey: "fields[subscriptions]")
            encoder.encode(fieldsTerritories, forKey: "fields[territories]")
            encoder.encode(fieldsSubscriptionPricePoints, forKey: "fields[subscriptionPricePoints]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsSubscriptionIntroductoryOffers: String, CaseIterable, Codable, Sendable {
            case startDate
            case endDate
            case duration
            case offerMode
            case numberOfPeriods
            case subscription
            case territory
            case subscriptionPricePoint
        }

        public enum FieldsSubscriptions: String, CaseIterable, Codable, Sendable {
            case name
            case productID = "productId"
            case familySharable
            case state
            case subscriptionPeriod
            case reviewNote
            case groupLevel
            case subscriptionLocalizations
            case appStoreReviewScreenshot
            case group
            case introductoryOffers
            case promotionalOffers
            case offerCodes
            case prices
            case pricePoints
            case promotedPurchase
            case subscriptionAvailability
            case winBackOffers
            case images
        }

        public enum FieldsTerritories: String, CaseIterable, Codable, Sendable {
            case currency
        }

        public enum FieldsSubscriptionPricePoints: String, CaseIterable, Codable, Sendable {
            case customerPrice
            case proceeds
            case proceedsYear2
            case territory
            case equalizations
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case subscription
            case territory
            case subscriptionPricePoint
        }
    }
}
