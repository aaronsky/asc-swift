// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation

public struct AppUpdateRequest: Codable, Hashable {
    public var data: Data
    public var included: [AppPriceInlineCreate]?

    public struct Data: Codable, Hashable, Identifiable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public struct Attributes: Codable, Hashable {
            public var bundleID: String?
            public var primaryLocale: String?
            public var subscriptionStatusURL: URL?
            public var subscriptionStatusURLVersion: SubscriptionStatusURLVersion?
            public var subscriptionStatusURLForSandbox: URL?
            public var subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion?
            /// - warning: Deprecated.
            public var isAvailableInNewTerritories: Bool?
            public var contentRightsDeclaration: ContentRightsDeclaration?

            public enum ContentRightsDeclaration: String, Codable, CaseIterable {
                case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
                case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
            }

            public init(bundleID: String? = nil, primaryLocale: String? = nil, subscriptionStatusURL: URL? = nil, subscriptionStatusURLVersion: SubscriptionStatusURLVersion? = nil, subscriptionStatusURLForSandbox: URL? = nil, subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion? = nil, isAvailableInNewTerritories: Bool? = nil, contentRightsDeclaration: ContentRightsDeclaration? = nil) {
                self.bundleID = bundleID
                self.primaryLocale = primaryLocale
                self.subscriptionStatusURL = subscriptionStatusURL
                self.subscriptionStatusURLVersion = subscriptionStatusURLVersion
                self.subscriptionStatusURLForSandbox = subscriptionStatusURLForSandbox
                self.subscriptionStatusURLVersionForSandbox = subscriptionStatusURLVersionForSandbox
                self.isAvailableInNewTerritories = isAvailableInNewTerritories
                self.contentRightsDeclaration = contentRightsDeclaration
            }

            private enum CodingKeys: String, CodingKey {
                case bundleID = "bundleId"
                case primaryLocale
                case subscriptionStatusURL = "subscriptionStatusUrl"
                case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
                case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
                case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
                case isAvailableInNewTerritories = "availableInNewTerritories"
                case contentRightsDeclaration
            }
        }

        public struct Relationships: Codable, Hashable {
            /// - warning: Deprecated.
            public var prices: Prices?
            /// - warning: Deprecated.
            public var availableTerritories: AvailableTerritories?

            @available(*, deprecated, message: "Deprecated")
            public struct Prices: Codable, Hashable {
                public var data: [Datum]?

                public struct Datum: Codable, Hashable, Identifiable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appPrices
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            @available(*, deprecated, message: "Deprecated")
            public struct AvailableTerritories: Codable, Hashable {
                public var data: [Datum]?

                public struct Datum: Codable, Hashable, Identifiable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(prices: Prices? = nil, availableTerritories: AvailableTerritories? = nil) {
                self.prices = prices
                self.availableTerritories = availableTerritories
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data, included: [AppPriceInlineCreate]? = nil) {
        self.data = data
        self.included = included
    }
}
