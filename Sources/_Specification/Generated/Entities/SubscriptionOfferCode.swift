// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation

public struct SubscriptionOfferCode: Codable, Equatable, Identifiable, Sendable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks?

    public enum `Type`: String, CaseIterable, Codable, Sendable {
        case subscriptionOfferCodes
    }

    public struct Attributes: Codable, Equatable, Sendable {
        public var name: String?
        public var customerEligibilities: [SubscriptionCustomerEligibility]?
        public var offerEligibility: SubscriptionOfferEligibility?
        public var duration: SubscriptionOfferDuration?
        public var offerMode: SubscriptionOfferMode?
        public var numberOfPeriods: Int?
        public var totalNumberOfCodes: Int?
        public var isActive: Bool?

        public init(name: String? = nil, customerEligibilities: [SubscriptionCustomerEligibility]? = nil, offerEligibility: SubscriptionOfferEligibility? = nil, duration: SubscriptionOfferDuration? = nil, offerMode: SubscriptionOfferMode? = nil, numberOfPeriods: Int? = nil, totalNumberOfCodes: Int? = nil, isActive: Bool? = nil) {
            self.name = name
            self.customerEligibilities = customerEligibilities
            self.offerEligibility = offerEligibility
            self.duration = duration
            self.offerMode = offerMode
            self.numberOfPeriods = numberOfPeriods
            self.totalNumberOfCodes = totalNumberOfCodes
            self.isActive = isActive
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case customerEligibilities
            case offerEligibility
            case duration
            case offerMode
            case numberOfPeriods
            case totalNumberOfCodes
            case isActive = "active"
        }
    }

    public struct Relationships: Codable, Equatable, Sendable {
        public var subscription: Subscription?
        public var oneTimeUseCodes: OneTimeUseCodes?
        public var customCodes: CustomCodes?
        public var prices: Prices?

        public struct Subscription: Codable, Equatable, Sendable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable, Equatable, Sendable {
                public var this: URL?
                public var related: URL?

                public init(this: URL? = nil, related: URL? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case subscriptions
                }

                public init(type: `Type` = .subscriptions, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct OneTimeUseCodes: Codable, Equatable, Sendable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable, Equatable, Sendable {
                public var this: URL?
                public var related: URL?

                public init(this: URL? = nil, related: URL? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case subscriptionOfferCodeOneTimeUseCodes
                }

                public init(type: `Type` = .subscriptionOfferCodeOneTimeUseCodes, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct CustomCodes: Codable, Equatable, Sendable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable, Equatable, Sendable {
                public var this: URL?
                public var related: URL?

                public init(this: URL? = nil, related: URL? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case subscriptionOfferCodeCustomCodes
                }

                public init(type: `Type` = .subscriptionOfferCodeCustomCodes, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Prices: Codable, Equatable, Sendable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable, Equatable, Sendable {
                public var this: URL?
                public var related: URL?

                public init(this: URL? = nil, related: URL? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable, Equatable, Identifiable, Sendable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, CaseIterable, Codable, Sendable {
                    case subscriptionOfferCodePrices
                }

                public init(type: `Type` = .subscriptionOfferCodePrices, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(subscription: Subscription? = nil, oneTimeUseCodes: OneTimeUseCodes? = nil, customCodes: CustomCodes? = nil, prices: Prices? = nil) {
            self.subscription = subscription
            self.oneTimeUseCodes = oneTimeUseCodes
            self.customCodes = customCodes
            self.prices = prices
        }
    }

    public init(type: `Type` = .subscriptionOfferCodes, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
