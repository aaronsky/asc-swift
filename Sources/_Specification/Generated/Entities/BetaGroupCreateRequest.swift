// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation

public struct BetaGroupCreateRequest: Codable, Equatable {
    public var data: Data

    public struct Data: Codable, Equatable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public struct Attributes: Codable, Equatable {
            public var name: String
            public var isInternalGroup: Bool?
            public var hasAccessToAllBuilds: Bool?
            public var isPublicLinkEnabled: Bool?
            public var isPublicLinkLimitEnabled: Bool?
            public var publicLinkLimit: Int?
            public var isFeedbackEnabled: Bool?

            public init(name: String, isInternalGroup: Bool? = nil, hasAccessToAllBuilds: Bool? = nil, isPublicLinkEnabled: Bool? = nil, isPublicLinkLimitEnabled: Bool? = nil, publicLinkLimit: Int? = nil, isFeedbackEnabled: Bool? = nil) {
                self.name = name
                self.isInternalGroup = isInternalGroup
                self.hasAccessToAllBuilds = hasAccessToAllBuilds
                self.isPublicLinkEnabled = isPublicLinkEnabled
                self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
                self.publicLinkLimit = publicLinkLimit
                self.isFeedbackEnabled = isFeedbackEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case isInternalGroup
                case hasAccessToAllBuilds
                case isPublicLinkEnabled = "publicLinkEnabled"
                case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
                case publicLinkLimit
                case isFeedbackEnabled = "feedbackEnabled"
            }
        }

        public struct Relationships: Codable, Equatable {
            public var app: App
            public var builds: Builds?
            public var betaTesters: BetaTesters?

            public struct App: Codable, Equatable {
                public var data: Data

                public struct Data: Codable, Equatable, Identifiable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type` = .apps, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Builds: Codable, Equatable {
                public var data: [Datum]?

                public struct Datum: Codable, Equatable, Identifiable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type` = .builds, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct BetaTesters: Codable, Equatable {
                public var data: [Datum]?

                public struct Datum: Codable, Equatable, Identifiable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaTesters
                    }

                    public init(type: `Type` = .betaTesters, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(app: App, builds: Builds? = nil, betaTesters: BetaTesters? = nil) {
                self.app = app
                self.builds = builds
                self.betaTesters = betaTesters
            }
        }

        public init(type: `Type` = .betaGroups, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}
