// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation

public struct GameCenterMatchmakingTestRequestInlineCreate: Codable, Equatable, Identifiable {
    public var type: `Type`
    public var id: String?
    public var attributes: Attributes
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case gameCenterMatchmakingTestRequests
    }

    public struct Attributes: Codable, Equatable {
        public var requestName: String
        public var secondsInQueue: Int
        public var locale: Locale?
        public var location: Location?
        public var minPlayers: Int?
        public var maxPlayers: Int?
        public var playerCount: Int?
        public var bundleID: String
        public var platform: Platform
        public var appVersion: String

        public enum Locale: String, Codable, CaseIterable {
            case arSa = "AR-SA"
            case caEs = "CA-ES"
            case csCz = "CS-CZ"
            case daDk = "DA-DK"
            case deDe = "DE-DE"
            case elGr = "EL-GR"
            case enAu = "EN-AU"
            case enGb = "EN-GB"
            case enUs = "EN-US"
            case enKy = "EN-KY"
            case esEs = "ES-ES"
            case esMx = "ES-MX"
            case fiFi = "FI-FI"
            case frCa = "FR-CA"
            case frFr = "FR-FR"
            case hiIn = "HI-IN"
            case hrHr = "HR-HR"
            case huHu = "HU-HU"
            case idID = "ID-ID"
            case itIt = "IT-IT"
            case iwIl = "IW-IL"
            case jaJp = "JA-JP"
            case koKr = "KO-KR"
            case msMy = "MS-MY"
            case nlNl = "NL-NL"
            case noNo = "NO-NO"
            case plPl = "PL-PL"
            case ptBr = "PT-BR"
            case ptPt = "PT-PT"
            case roRo = "RO-RO"
            case ruRu = "RU-RU"
            case skSk = "SK-SK"
            case svSe = "SV-SE"
            case thTh = "TH-TH"
            case trTr = "TR-TR"
            case ukUa = "UK-UA"
            case zhCn = "ZH-CN"
            case zhTw = "ZH-TW"
            case zhHk = "ZH-HK"
        }

        public init(requestName: String, secondsInQueue: Int, locale: Locale? = nil, location: Location? = nil, minPlayers: Int? = nil, maxPlayers: Int? = nil, playerCount: Int? = nil, bundleID: String, platform: Platform, appVersion: String) {
            self.requestName = requestName
            self.secondsInQueue = secondsInQueue
            self.locale = locale
            self.location = location
            self.minPlayers = minPlayers
            self.maxPlayers = maxPlayers
            self.playerCount = playerCount
            self.bundleID = bundleID
            self.platform = platform
            self.appVersion = appVersion
        }

        private enum CodingKeys: String, CodingKey {
            case requestName
            case secondsInQueue
            case locale
            case location
            case minPlayers
            case maxPlayers
            case playerCount
            case bundleID = "bundleId"
            case platform
            case appVersion
        }
    }

    public struct Relationships: Codable, Equatable {
        public var matchmakingPlayerProperties: MatchmakingPlayerProperties?

        public struct MatchmakingPlayerProperties: Codable, Equatable {
            public var data: [Datum]?

            public struct Datum: Codable, Equatable, Identifiable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case gameCenterMatchmakingTestPlayerProperties
                }

                public init(type: `Type` = .gameCenterMatchmakingTestPlayerProperties, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: [Datum]? = nil) {
                self.data = data
            }
        }

        public init(matchmakingPlayerProperties: MatchmakingPlayerProperties? = nil) {
            self.matchmakingPlayerProperties = matchmakingPlayerProperties
        }
    }

    public init(type: `Type` = .gameCenterMatchmakingTestRequests, id: String? = nil, attributes: Attributes, relationships: Relationships? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
    }
}
