// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation

public struct BetaBuildUsagesV1MetricResponse: Codable, Equatable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable, Equatable {
        public var dataPoints: DataPoints?
        public var dimensions: Dimensions?

        public struct DataPoints: Codable, Equatable {
            public var start: Date?
            public var end: Date?
            public var values: Values?

            public struct Values: Codable, Equatable {
                public var crashCount: Int?
                public var installCount: Int?
                public var sessionCount: Int?
                public var feedbackCount: Int?
                public var inviteCount: Int?

                public init(crashCount: Int? = nil, installCount: Int? = nil, sessionCount: Int? = nil, feedbackCount: Int? = nil, inviteCount: Int? = nil) {
                    self.crashCount = crashCount
                    self.installCount = installCount
                    self.sessionCount = sessionCount
                    self.feedbackCount = feedbackCount
                    self.inviteCount = inviteCount
                }
            }

            public init(start: Date? = nil, end: Date? = nil, values: Values? = nil) {
                self.start = start
                self.end = end
                self.values = values
            }
        }

        public struct Dimensions: Codable, Equatable {
            public var bundleIDs: BundleIDs?

            public struct BundleIDs: Codable, Equatable {
                public var links: Links?

                public struct Links: Codable, Equatable {
                    public var groupBy: URL?

                    public init(groupBy: URL? = nil) {
                        self.groupBy = groupBy
                    }
                }

                public init(links: Links? = nil) {
                    self.links = links
                }
            }

            public init(bundleIDs: BundleIDs? = nil) {
                self.bundleIDs = bundleIDs
            }

            private enum CodingKeys: String, CodingKey {
                case bundleIDs = "bundleIds"
            }
        }

        public init(dataPoints: DataPoints? = nil, dimensions: Dimensions? = nil) {
            self.dataPoints = dataPoints
            self.dimensions = dimensions
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}
