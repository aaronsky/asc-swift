// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1.Apps.WithID {
    public var inAppPurchasesV2: InAppPurchasesV2 {
        InAppPurchasesV2(path: path + "/inAppPurchasesV2")
    }

    public struct InAppPurchasesV2 {
        /// Path: `/v1/apps/{id}/inAppPurchasesV2`
        public let path: String

        public func get(filterInAppPurchaseType: [FilterInAppPurchaseType]? = nil, filterName: [String]? = nil, filterProductID: [String]? = nil, filterState: [FilterState]? = nil, sort: [Sort]? = nil, fieldsInAppPurchaseAppStoreReviewScreenshots: [FieldsInAppPurchaseAppStoreReviewScreenshots]? = nil, fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases]? = nil, fieldsInAppPurchaseLocalizations: [FieldsInAppPurchaseLocalizations]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases]? = nil, fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules]? = nil, fieldsInAppPurchaseContents: [FieldsInAppPurchaseContents]? = nil, limit: Int? = nil, limitInAppPurchaseLocalizations: Int? = nil, include: [Include]? = nil) -> Request<_Specification.InAppPurchasesV2Response> {
            Request(path: path, method: "GET", query: makeGetQuery(filterInAppPurchaseType, filterName, filterProductID, filterState, sort, fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsInAppPurchaseAvailabilities, fieldsPromotedPurchases, fieldsInAppPurchaseLocalizations, fieldsInAppPurchases, fieldsInAppPurchasePriceSchedules, fieldsInAppPurchaseContents, limit, limitInAppPurchaseLocalizations, include), id: "apps-inAppPurchasesV2-get_to_many_related")
        }

        private func makeGetQuery(_ filterInAppPurchaseType: [FilterInAppPurchaseType]?, _ filterName: [String]?, _ filterProductID: [String]?, _ filterState: [FilterState]?, _ sort: [Sort]?, _ fieldsInAppPurchaseAppStoreReviewScreenshots: [FieldsInAppPurchaseAppStoreReviewScreenshots]?, _ fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities]?, _ fieldsPromotedPurchases: [FieldsPromotedPurchases]?, _ fieldsInAppPurchaseLocalizations: [FieldsInAppPurchaseLocalizations]?, _ fieldsInAppPurchases: [FieldsInAppPurchases]?, _ fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules]?, _ fieldsInAppPurchaseContents: [FieldsInAppPurchaseContents]?, _ limit: Int?, _ limitInAppPurchaseLocalizations: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterInAppPurchaseType, forKey: "filter[inAppPurchaseType]")
            encoder.encode(filterName, forKey: "filter[name]")
            encoder.encode(filterProductID, forKey: "filter[productId]")
            encoder.encode(filterState, forKey: "filter[state]")
            encoder.encode(sort, forKey: "sort")
            encoder.encode(fieldsInAppPurchaseAppStoreReviewScreenshots, forKey: "fields[inAppPurchaseAppStoreReviewScreenshots]")
            encoder.encode(fieldsInAppPurchaseAvailabilities, forKey: "fields[inAppPurchaseAvailabilities]")
            encoder.encode(fieldsPromotedPurchases, forKey: "fields[promotedPurchases]")
            encoder.encode(fieldsInAppPurchaseLocalizations, forKey: "fields[inAppPurchaseLocalizations]")
            encoder.encode(fieldsInAppPurchases, forKey: "fields[inAppPurchases]")
            encoder.encode(fieldsInAppPurchasePriceSchedules, forKey: "fields[inAppPurchasePriceSchedules]")
            encoder.encode(fieldsInAppPurchaseContents, forKey: "fields[inAppPurchaseContents]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(limitInAppPurchaseLocalizations, forKey: "limit[inAppPurchaseLocalizations]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FilterInAppPurchaseType: String, CaseIterable, Codable, Sendable {
            case consumable = "CONSUMABLE"
            case nonConsumable = "NON_CONSUMABLE"
            case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
        }

        public enum FilterState: String, CaseIterable, Codable, Sendable {
            case missingMetadata = "MISSING_METADATA"
            case waitingForUpload = "WAITING_FOR_UPLOAD"
            case processingContent = "PROCESSING_CONTENT"
            case readyToSubmit = "READY_TO_SUBMIT"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
            case pendingBinaryApproval = "PENDING_BINARY_APPROVAL"
            case approved = "APPROVED"
            case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
            case removedFromSale = "REMOVED_FROM_SALE"
            case rejected = "REJECTED"
        }

        public enum Sort: String, CaseIterable, Codable, Sendable {
            case inAppPurchaseType
            case minusinAppPurchaseType = "-inAppPurchaseType"
            case name
            case minusname = "-name"
        }

        public enum FieldsInAppPurchaseAppStoreReviewScreenshots: String, CaseIterable, Codable, Sendable {
            case assetDeliveryState
            case assetToken
            case assetType
            case fileName
            case fileSize
            case imageAsset
            case inAppPurchaseV2
            case sourceFileChecksum
            case uploadOperations
            case uploaded
        }

        public enum FieldsInAppPurchaseAvailabilities: String, CaseIterable, Codable, Sendable {
            case availableInNewTerritories
            case availableTerritories
            case inAppPurchase
        }

        public enum FieldsPromotedPurchases: String, CaseIterable, Codable, Sendable {
            case app
            case enabled
            case inAppPurchaseV2
            case promotionImages
            case state
            case subscription
            case visibleForAllUsers
        }

        public enum FieldsInAppPurchaseLocalizations: String, CaseIterable, Codable, Sendable {
            case description
            case inAppPurchaseV2
            case locale
            case name
            case state
        }

        public enum FieldsInAppPurchases: String, CaseIterable, Codable, Sendable {
            case app
            case appStoreReviewScreenshot
            case content
            case contentHosting
            case familySharable
            case iapPriceSchedule
            case inAppPurchaseAvailability
            case inAppPurchaseLocalizations
            case inAppPurchaseType
            case name
            case productID = "productId"
            case promotedPurchase
            case reviewNote
            case state
        }

        public enum FieldsInAppPurchasePriceSchedules: String, CaseIterable, Codable, Sendable {
            case automaticPrices
            case baseTerritory
            case inAppPurchase
            case manualPrices
        }

        public enum FieldsInAppPurchaseContents: String, CaseIterable, Codable, Sendable {
            case fileName
            case fileSize
            case inAppPurchaseV2
            case lastModifiedDate
            case url
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case appStoreReviewScreenshot
            case content
            case iapPriceSchedule
            case inAppPurchaseAvailability
            case inAppPurchaseLocalizations
            case promotedPurchase
        }
    }
}
