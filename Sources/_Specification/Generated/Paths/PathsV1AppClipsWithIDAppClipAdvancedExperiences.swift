// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1.AppClips.WithID {
    public var appClipAdvancedExperiences: AppClipAdvancedExperiences {
        AppClipAdvancedExperiences(path: path + "/appClipAdvancedExperiences")
    }

    public struct AppClipAdvancedExperiences {
        /// Path: `/v1/appClips/{id}/appClipAdvancedExperiences`
        public let path: String

        public func get(filterAction: [FilterAction]? = nil, filterPlaceStatus: [FilterPlaceStatus]? = nil, filterStatus: [FilterStatus]? = nil, fieldsAppClipAdvancedExperiences: [FieldsAppClipAdvancedExperiences]? = nil, fieldsAppClips: [FieldsAppClips]? = nil, fieldsAppClipAdvancedExperienceImages: [FieldsAppClipAdvancedExperienceImages]? = nil, fieldsAppClipAdvancedExperienceLocalizations: [FieldsAppClipAdvancedExperienceLocalizations]? = nil, limit: Int? = nil, limitLocalizations: Int? = nil, include: [Include]? = nil) -> Request<_Specification.AppClipAdvancedExperiencesResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterAction, filterPlaceStatus, filterStatus, fieldsAppClipAdvancedExperiences, fieldsAppClips, fieldsAppClipAdvancedExperienceImages, fieldsAppClipAdvancedExperienceLocalizations, limit, limitLocalizations, include), id: "appClips-appClipAdvancedExperiences-get_to_many_related")
        }

        private func makeGetQuery(_ filterAction: [FilterAction]?, _ filterPlaceStatus: [FilterPlaceStatus]?, _ filterStatus: [FilterStatus]?, _ fieldsAppClipAdvancedExperiences: [FieldsAppClipAdvancedExperiences]?, _ fieldsAppClips: [FieldsAppClips]?, _ fieldsAppClipAdvancedExperienceImages: [FieldsAppClipAdvancedExperienceImages]?, _ fieldsAppClipAdvancedExperienceLocalizations: [FieldsAppClipAdvancedExperienceLocalizations]?, _ limit: Int?, _ limitLocalizations: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterAction, forKey: "filter[action]")
            encoder.encode(filterPlaceStatus, forKey: "filter[placeStatus]")
            encoder.encode(filterStatus, forKey: "filter[status]")
            encoder.encode(fieldsAppClipAdvancedExperiences, forKey: "fields[appClipAdvancedExperiences]")
            encoder.encode(fieldsAppClips, forKey: "fields[appClips]")
            encoder.encode(fieldsAppClipAdvancedExperienceImages, forKey: "fields[appClipAdvancedExperienceImages]")
            encoder.encode(fieldsAppClipAdvancedExperienceLocalizations, forKey: "fields[appClipAdvancedExperienceLocalizations]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(limitLocalizations, forKey: "limit[localizations]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FilterAction: String, Codable, CaseIterable {
            case `open` = "OPEN"
            case view = "VIEW"
            case play = "PLAY"
        }

        public enum FilterPlaceStatus: String, Codable, CaseIterable {
            case pending = "PENDING"
            case matched = "MATCHED"
            case noMatch = "NO_MATCH"
        }

        public enum FilterStatus: String, Codable, CaseIterable {
            case received = "RECEIVED"
            case deactivated = "DEACTIVATED"
            case appTransferInProgress = "APP_TRANSFER_IN_PROGRESS"
        }

        public enum FieldsAppClipAdvancedExperiences: String, Codable, CaseIterable {
            case action
            case appClip
            case businessCategory
            case defaultLanguage
            case headerImage
            case isPoweredBy
            case link
            case localizations
            case place
            case placeStatus
            case removed
            case status
            case version
        }

        public enum FieldsAppClips: String, Codable, CaseIterable {
            case app
            case appClipAdvancedExperiences
            case appClipDefaultExperiences
            case bundleID = "bundleId"
        }

        public enum FieldsAppClipAdvancedExperienceImages: String, Codable, CaseIterable {
            case assetDeliveryState
            case fileName
            case fileSize
            case imageAsset
            case sourceFileChecksum
            case uploadOperations
            case uploaded
        }

        public enum FieldsAppClipAdvancedExperienceLocalizations: String, Codable, CaseIterable {
            case language
            case subtitle
            case title
        }

        public enum Include: String, Codable, CaseIterable {
            case appClip
            case headerImage
            case localizations
        }
    }
}
