// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1 {
    public var appPricePoints: AppPricePoints {
        AppPricePoints(path: path + "/appPricePoints")
    }

    public struct AppPricePoints {
        /// Path: `/v1/appPricePoints`
        public let path: String

        @available(*, deprecated, message: "Deprecated")
        public func get(filterPriceTier: [String]? = nil, filterTerritory: [String]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints]? = nil, limit: Int? = nil, include: [Include]? = nil, fieldsTerritories: [FieldsTerritories]? = nil) -> Request<_Specification.AppPricePointsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterPriceTier, filterTerritory, fieldsAppPricePoints, limit, include, fieldsTerritories), id: "appPricePoints-get_collection")
        }

        private func makeGetQuery(_ filterPriceTier: [String]?, _ filterTerritory: [String]?, _ fieldsAppPricePoints: [FieldsAppPricePoints]?, _ limit: Int?, _ include: [Include]?, _ fieldsTerritories: [FieldsTerritories]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterPriceTier, forKey: "filter[priceTier]")
            encoder.encode(filterTerritory, forKey: "filter[territory]")
            encoder.encode(fieldsAppPricePoints, forKey: "fields[appPricePoints]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(fieldsTerritories, forKey: "fields[territories]")
            return encoder.items
        }

        public enum FieldsAppPricePoints: String, Codable, CaseIterable {
            case customerPrice
            case priceTier
            case proceeds
            case territory
        }

        public enum Include: String, Codable, CaseIterable {
            case priceTier
            case territory
        }

        public enum FieldsTerritories: String, Codable, CaseIterable {
            case currency
        }
    }
}
