// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1.AppEventVideoClips {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/appEventVideoClips/{id}`
        public let path: String

        public func get(fieldsAppEventVideoClips: [FieldsAppEventVideoClips]? = nil, include: [Include]? = nil) -> Request<_Specification.AppEventVideoClipResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsAppEventVideoClips, include), id: "appEventVideoClips-get_instance")
        }

        private func makeGetQuery(_ fieldsAppEventVideoClips: [FieldsAppEventVideoClips]?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsAppEventVideoClips, forKey: "fields[appEventVideoClips]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsAppEventVideoClips: String, Codable, CaseIterable {
            case appEventAssetType
            case appEventLocalization
            case assetDeliveryState
            case fileName
            case fileSize
            case previewFrameTimeCode
            case previewImage
            case uploadOperations
            case uploaded
            case videoURL = "videoUrl"
        }

        public enum Include: String, Codable, CaseIterable {
            case appEventLocalization
        }

        public func patch(_ body: _Specification.AppEventVideoClipUpdateRequest) -> Request<_Specification.AppEventVideoClipResponse> {
            Request(path: path, method: "PATCH", body: body, id: "appEventVideoClips-update_instance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "appEventVideoClips-delete_instance")
        }
    }
}
