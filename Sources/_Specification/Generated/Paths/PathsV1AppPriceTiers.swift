// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1 {
    public var appPriceTiers: AppPriceTiers {
        AppPriceTiers(path: path + "/appPriceTiers")
    }

    public struct AppPriceTiers {
        /// Path: `/v1/appPriceTiers`
        public let path: String

        public func get(filterID: [String]? = nil, fieldsAppPriceTiers: [FieldsAppPriceTiers]? = nil, limit: Int? = nil, include: [Include]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints]? = nil, limitPricePoints: Int? = nil) -> Request<_Specification.AppPriceTiersResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterID, fieldsAppPriceTiers, limit, include, fieldsAppPricePoints, limitPricePoints), id: "appPriceTiers-get_collection")
        }

        private func makeGetQuery(_ filterID: [String]?, _ fieldsAppPriceTiers: [FieldsAppPriceTiers]?, _ limit: Int?, _ include: [Include]?, _ fieldsAppPricePoints: [FieldsAppPricePoints]?, _ limitPricePoints: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterID, forKey: "filter[id]")
            encoder.encode(fieldsAppPriceTiers, forKey: "fields[appPriceTiers]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(fieldsAppPricePoints, forKey: "fields[appPricePoints]")
            encoder.encode(limitPricePoints, forKey: "limit[pricePoints]")
            return encoder.items
        }

        public enum FieldsAppPriceTiers: String, Codable, CaseIterable {
            case pricePoints
        }

        public enum Include: String, Codable, CaseIterable {
            case pricePoints
        }

        public enum FieldsAppPricePoints: String, Codable, CaseIterable {
            case customerPrice
            case priceTier
            case proceeds
            case territory
        }
    }
}
