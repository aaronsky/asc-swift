// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1.AppCustomProductPages.WithID {
    public var appCustomProductPageVersions: AppCustomProductPageVersions {
        AppCustomProductPageVersions(path: path + "/appCustomProductPageVersions")
    }

    public struct AppCustomProductPageVersions {
        /// Path: `/v1/appCustomProductPages/{id}/appCustomProductPageVersions`
        public let path: String

        public func get(filterState: [FilterState]? = nil, fieldsAppCustomProductPageLocalizations: [FieldsAppCustomProductPageLocalizations]? = nil, fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages]? = nil, limit: Int? = nil, limitAppCustomProductPageLocalizations: Int? = nil, include: [Include]? = nil) -> Request<_Specification.AppCustomProductPageVersionsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterState, fieldsAppCustomProductPageLocalizations, fieldsAppCustomProductPageVersions, fieldsAppCustomProductPages, limit, limitAppCustomProductPageLocalizations, include), id: "appCustomProductPages-appCustomProductPageVersions-get_to_many_related")
        }

        private func makeGetQuery(_ filterState: [FilterState]?, _ fieldsAppCustomProductPageLocalizations: [FieldsAppCustomProductPageLocalizations]?, _ fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions]?, _ fieldsAppCustomProductPages: [FieldsAppCustomProductPages]?, _ limit: Int?, _ limitAppCustomProductPageLocalizations: Int?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterState, forKey: "filter[state]")
            encoder.encode(fieldsAppCustomProductPageLocalizations, forKey: "fields[appCustomProductPageLocalizations]")
            encoder.encode(fieldsAppCustomProductPageVersions, forKey: "fields[appCustomProductPageVersions]")
            encoder.encode(fieldsAppCustomProductPages, forKey: "fields[appCustomProductPages]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(limitAppCustomProductPageLocalizations, forKey: "limit[appCustomProductPageLocalizations]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FilterState: String, Codable, CaseIterable {
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
            case rejected = "REJECTED"
        }

        public enum FieldsAppCustomProductPageLocalizations: String, Codable, CaseIterable {
            case appCustomProductPageVersion
            case appPreviewSets
            case appScreenshotSets
            case locale
            case promotionalText
        }

        public enum FieldsAppCustomProductPageVersions: String, Codable, CaseIterable {
            case appCustomProductPage
            case appCustomProductPageLocalizations
            case state
            case version
        }

        public enum FieldsAppCustomProductPages: String, Codable, CaseIterable {
            case app
            case appCustomProductPageVersions
            case appStoreVersionTemplate
            case customProductPageTemplate
            case name
            case url
            case visible
        }

        public enum Include: String, Codable, CaseIterable {
            case appCustomProductPage
            case appCustomProductPageLocalizations
        }
    }
}
