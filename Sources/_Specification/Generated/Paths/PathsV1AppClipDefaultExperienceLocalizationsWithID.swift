// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1.AppClipDefaultExperienceLocalizations {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/appClipDefaultExperienceLocalizations/{id}`
        public let path: String

        public func get(fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations]? = nil, include: [Include]? = nil, fieldsAppClipHeaderImages: [FieldsAppClipHeaderImages]? = nil) -> Request<_Specification.AppClipDefaultExperienceLocalizationResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsAppClipDefaultExperienceLocalizations, include, fieldsAppClipHeaderImages), id: "appClipDefaultExperienceLocalizations-get_instance")
        }

        private func makeGetQuery(_ fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations]?, _ include: [Include]?, _ fieldsAppClipHeaderImages: [FieldsAppClipHeaderImages]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsAppClipDefaultExperienceLocalizations, forKey: "fields[appClipDefaultExperienceLocalizations]")
            encoder.encode(include, forKey: "include")
            encoder.encode(fieldsAppClipHeaderImages, forKey: "fields[appClipHeaderImages]")
            return encoder.items
        }

        public enum FieldsAppClipDefaultExperienceLocalizations: String, Codable, CaseIterable {
            case appClipDefaultExperience
            case appClipHeaderImage
            case locale
            case subtitle
        }

        public enum Include: String, Codable, CaseIterable {
            case appClipDefaultExperience
            case appClipHeaderImage
        }

        public enum FieldsAppClipHeaderImages: String, Codable, CaseIterable {
            case appClipDefaultExperienceLocalization
            case assetDeliveryState
            case fileName
            case fileSize
            case imageAsset
            case sourceFileChecksum
            case uploadOperations
            case uploaded
        }

        public func patch(_ body: _Specification.AppClipDefaultExperienceLocalizationUpdateRequest) -> Request<_Specification.AppClipDefaultExperienceLocalizationResponse> {
            Request(path: path, method: "PATCH", body: body, id: "appClipDefaultExperienceLocalizations-update_instance")
        }

        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "appClipDefaultExperienceLocalizations-delete_instance")
        }
    }
}
