// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1 {
    public var scmProviders: ScmProviders {
        ScmProviders(path: path + "/scmProviders")
    }

    public struct ScmProviders {
        /// Path: `/v1/scmProviders`
        public let path: String

        public func get(fieldsScmProviders: [FieldsScmProviders]? = nil, limit: Int? = nil, fieldsScmRepositories: [FieldsScmRepositories]? = nil) -> Request<_Specification.ScmProvidersResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsScmProviders, limit, fieldsScmRepositories), id: "scmProviders-get_collection")
        }

        private func makeGetQuery(_ fieldsScmProviders: [FieldsScmProviders]?, _ limit: Int?, _ fieldsScmRepositories: [FieldsScmRepositories]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsScmProviders, forKey: "fields[scmProviders]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(fieldsScmRepositories, forKey: "fields[scmRepositories]")
            return encoder.items
        }

        public enum FieldsScmProviders: String, Codable, CaseIterable {
            case repositories
            case scmProviderType
            case url
        }

        public enum FieldsScmRepositories: String, Codable, CaseIterable {
            case defaultBranch
            case gitReferences
            case httpCloneURL = "httpCloneUrl"
            case lastAccessedDate
            case ownerName
            case pullRequests
            case repositoryName
            case scmProvider
            case sshCloneURL = "sshCloneUrl"
        }
    }
}
