// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1.AppAvailabilities {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/appAvailabilities/{id}`
        public let path: String

        @available(*, deprecated, message: "Deprecated")
        public func get(fieldsAppAvailabilities: [FieldsAppAvailabilities]? = nil, include: [Include]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, limitAvailableTerritories: Int? = nil) -> Request<_Specification.AppAvailabilityResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsAppAvailabilities, include, fieldsTerritories, limitAvailableTerritories), id: "appAvailabilities-get_instance")
        }

        private func makeGetQuery(_ fieldsAppAvailabilities: [FieldsAppAvailabilities]?, _ include: [Include]?, _ fieldsTerritories: [FieldsTerritories]?, _ limitAvailableTerritories: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsAppAvailabilities, forKey: "fields[appAvailabilities]")
            encoder.encode(include, forKey: "include")
            encoder.encode(fieldsTerritories, forKey: "fields[territories]")
            encoder.encode(limitAvailableTerritories, forKey: "limit[availableTerritories]")
            return encoder.items
        }

        public enum FieldsAppAvailabilities: String, Codable, CaseIterable {
            case app
            case availableInNewTerritories
            case availableTerritories
        }

        public enum Include: String, Codable, CaseIterable {
            case app
            case availableTerritories
        }

        public enum FieldsTerritories: String, Codable, CaseIterable {
            case currency
        }
    }
}
