// Generated by Create API
// https://github.com/CreateAPI/CreateAPI"
//
// swift-format-ignore-file

import Foundation

public struct CiXcodeVersion: Codable, Hashable, Identifiable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciXcodeVersions
    }

    public struct Attributes: Codable, Hashable {
        public var version: String?
        public var name: String?
        public var testDestinations: [TestDestination]?

        public struct TestDestination: Codable, Hashable {
            public var deviceTypeName: String?
            public var deviceTypeIdentifier: String?
            public var availableRuntimes: [AvailableRuntime]?
            public var kind: CiTestDestinationKind?

            public struct AvailableRuntime: Codable, Hashable {
                public var runtimeName: String?
                public var runtimeIdentifier: String?

                public init(runtimeName: String? = nil, runtimeIdentifier: String? = nil) {
                    self.runtimeName = runtimeName
                    self.runtimeIdentifier = runtimeIdentifier
                }
            }

            public init(deviceTypeName: String? = nil, deviceTypeIdentifier: String? = nil, availableRuntimes: [AvailableRuntime]? = nil, kind: CiTestDestinationKind? = nil) {
                self.deviceTypeName = deviceTypeName
                self.deviceTypeIdentifier = deviceTypeIdentifier
                self.availableRuntimes = availableRuntimes
                self.kind = kind
            }
        }

        public init(version: String? = nil, name: String? = nil, testDestinations: [TestDestination]? = nil) {
            self.version = version
            self.name = name
            self.testDestinations = testDestinations
        }
    }

    public struct Relationships: Codable, Hashable {
        public var macOsVersions: MacOsVersions?

        public struct MacOsVersions: Codable, Hashable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable, Hashable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable, Hashable, Identifiable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciMacOsVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(macOsVersions: MacOsVersions? = nil) {
            self.macOsVersions = macOsVersions
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}
