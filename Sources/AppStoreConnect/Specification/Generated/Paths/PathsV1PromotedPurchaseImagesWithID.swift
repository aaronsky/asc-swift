// Generated by Create API
// https://github.com/CreateAPI/CreateAPI"
//
// swift-format-ignore-file

import Foundation
import URLQueryEncoder

extension Resources.V1.PromotedPurchaseImages {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/promotedPurchaseImages/{id}`
        public let path: String

        public func get(fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages]? = nil, include: [Include]? = nil) -> Request<AppStoreConnect.PromotedPurchaseImageResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(fieldsPromotedPurchaseImages, include), id: "promotedPurchaseImages-get_instance")
        }

        private func makeGetQuery(_ fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages]?, _ include: [Include]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsPromotedPurchaseImages, forKey: "fields[promotedPurchaseImages]")
            encoder.encode(include, forKey: "include")
            return encoder.items
        }

        public enum FieldsPromotedPurchaseImages: String, Codable, CaseIterable {
            case assetToken
            case assetType
            case fileName
            case fileSize
            case imageAsset
            case promotedPurchase
            case sourceFileChecksum
            case state
            case uploadOperations
            case uploaded
        }

        public enum Include: String, Codable, CaseIterable {
            case promotedPurchase
        }

        public func patch(_ body: AppStoreConnect.PromotedPurchaseImageUpdateRequest) -> Request<AppStoreConnect.PromotedPurchaseImageResponse> {
            Request(method: "PATCH", url: path, body: body, id: "promotedPurchaseImages-update_instance")
        }

        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "promotedPurchaseImages-delete_instance")
        }
    }
}
