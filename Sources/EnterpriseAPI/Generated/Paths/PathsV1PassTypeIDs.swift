// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources {
    public static var passTypeIDs: PassTypeIDs {
        PassTypeIDs(path: "/v1/passTypeIds")
    }

    public struct PassTypeIDs {
        /// Path: `/v1/passTypeIds`
        public let path: String

        /// List Pass Type Ids
        public func get(filterIdentifier: [String]? = nil, filterName: [String]? = nil, filterID: [String]? = nil, sort: [Sort]? = nil, fieldsPassTypeIDs: [FieldsPassTypeIDs]? = nil, limit: Int? = nil, include: [Include]? = nil, fieldsCertificates: [FieldsCertificates]? = nil, limitCertificates: Int? = nil) -> Request<EnterpriseAPI.PassTypeIDsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(filterIdentifier, filterName, filterID, sort, fieldsPassTypeIDs, limit, include, fieldsCertificates, limitCertificates), id: "passTypeIds-get_collection")
        }

        private func makeGetQuery(_ filterIdentifier: [String]?, _ filterName: [String]?, _ filterID: [String]?, _ sort: [Sort]?, _ fieldsPassTypeIDs: [FieldsPassTypeIDs]?, _ limit: Int?, _ include: [Include]?, _ fieldsCertificates: [FieldsCertificates]?, _ limitCertificates: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(filterIdentifier, forKey: "filter[identifier]")
            encoder.encode(filterName, forKey: "filter[name]")
            encoder.encode(filterID, forKey: "filter[id]")
            encoder.encode(sort, forKey: "sort")
            encoder.encode(fieldsPassTypeIDs, forKey: "fields[passTypeIds]")
            encoder.encode(limit, forKey: "limit")
            encoder.encode(include, forKey: "include")
            encoder.encode(fieldsCertificates, forKey: "fields[certificates]")
            encoder.encode(limitCertificates, forKey: "limit[certificates]")
            return encoder.items
        }

        public enum Sort: String, CaseIterable, Codable, Sendable {
            case id
            case minusID = "-id"
            case identifier
            case minusIdentifier = "-identifier"
            case name
            case minusName = "-name"
        }

        public enum FieldsPassTypeIDs: String, CaseIterable, Codable, Sendable {
            case certificates
            case identifier
            case name
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case certificates
        }

        public enum FieldsCertificates: String, CaseIterable, Codable, Sendable {
            case certificateContent
            case certificateType
            case csrContent
            case displayName
            case expirationDate
            case name
            case passTypeID = "passTypeId"
            case platform
            case serialNumber
        }

        /// Create a PassTypeId
        public func post(_ body: EnterpriseAPI.PassTypeIDCreateRequest) -> Request<EnterpriseAPI.PassTypeIDResponse> {
            Request(path: path, method: "POST", body: body, id: "passTypeIds-create_instance")
        }
    }
}
