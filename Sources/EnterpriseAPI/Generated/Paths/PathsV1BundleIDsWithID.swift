// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swift-format-ignore-file

import Foundation
import AppStoreConnect
import URLQueryEncoder

extension Resources.BundleIDs {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/v1/bundleIds/{id}`
        public let path: String

        /// Read BundleId Information
        public func get(fieldsBundleIDs: [FieldsBundleIDs]? = nil, include: [Include]? = nil, fieldsBundleIDCapabilities: [FieldsBundleIDCapabilities]? = nil, fieldsProfiles: [FieldsProfiles]? = nil, limitBundleIDCapabilities: Int? = nil, limitProfiles: Int? = nil) -> Request<EnterpriseAPI.BundleIDResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(fieldsBundleIDs, include, fieldsBundleIDCapabilities, fieldsProfiles, limitBundleIDCapabilities, limitProfiles), id: "bundleIds-get_instance")
        }

        private func makeGetQuery(_ fieldsBundleIDs: [FieldsBundleIDs]?, _ include: [Include]?, _ fieldsBundleIDCapabilities: [FieldsBundleIDCapabilities]?, _ fieldsProfiles: [FieldsProfiles]?, _ limitBundleIDCapabilities: Int?, _ limitProfiles: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder(explode: false)
            encoder.encode(fieldsBundleIDs, forKey: "fields[bundleIds]")
            encoder.encode(include, forKey: "include")
            encoder.encode(fieldsBundleIDCapabilities, forKey: "fields[bundleIdCapabilities]")
            encoder.encode(fieldsProfiles, forKey: "fields[profiles]")
            encoder.encode(limitBundleIDCapabilities, forKey: "limit[bundleIdCapabilities]")
            encoder.encode(limitProfiles, forKey: "limit[profiles]")
            return encoder.items
        }

        public enum FieldsBundleIDs: String, CaseIterable, Codable, Sendable {
            case bundleIDCapabilities = "bundleIdCapabilities"
            case identifier
            case name
            case platform
            case profiles
            case seedID = "seedId"
        }

        public enum Include: String, CaseIterable, Codable, Sendable {
            case bundleIDCapabilities = "bundleIdCapabilities"
            case profiles
        }

        public enum FieldsBundleIDCapabilities: String, CaseIterable, Codable, Sendable {
            case bundleID = "bundleId"
            case capabilityType
            case settings
        }

        public enum FieldsProfiles: String, CaseIterable, Codable, Sendable {
            case bundleID = "bundleId"
            case certificates
            case createdDate
            case devices
            case expirationDate
            case name
            case platform
            case profileContent
            case profileState
            case profileType
            case uuid
        }

        /// Modify a BundleId
        public func patch(_ body: EnterpriseAPI.BundleIDUpdateRequest) -> Request<EnterpriseAPI.BundleIDResponse> {
            Request(path: path, method: "PATCH", body: body, id: "bundleIds-update_instance")
        }

        /// Delete a BundleId
        public var delete: Request<Void> {
            Request(path: path, method: "DELETE", id: "bundleIds-delete_instance")
        }
    }
}
